Object.defineProperty(exports,"__esModule",{value:true});var _slicedToArray2=require("babel-runtime/helpers/slicedToArray");var _slicedToArray3=_interopRequireDefault(_slicedToArray2);var _extends2=require("babel-runtime/helpers/extends");var _extends3=_interopRequireDefault(_extends2);var _classCallCheck2=require("babel-runtime/helpers/classCallCheck");var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require("babel-runtime/helpers/createClass");var _createClass3=_interopRequireDefault(_createClass2);var _possibleConstructorReturn2=require("babel-runtime/helpers/possibleConstructorReturn");var _possibleConstructorReturn3=_interopRequireDefault(_possibleConstructorReturn2);var _set2=require("babel-runtime/helpers/set");var _set3=_interopRequireDefault(_set2);var _get2=require("babel-runtime/helpers/get");var _get3=_interopRequireDefault(_get2);var _inherits2=require("babel-runtime/helpers/inherits");var _inherits3=_interopRequireDefault(_inherits2);var _dec,_class;var _RCTView2=require("./../RCTView");var _RCTView3=_interopRequireDefault(_RCTView2);var _RCTImageSource=require("./RCTImageSource");var _RCTImageSource2=_interopRequireDefault(_RCTImageSource);var _CustomElement=require("./../../utils/CustomElement");var _CustomElement2=_interopRequireDefault(_CustomElement);var _ColorArrayFromHexARGB=require("./../../utils/ColorArrayFromHexARGB");var _ColorArrayFromHexARGB2=_interopRequireDefault(_ColorArrayFromHexARGB);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var tintColorSVG=function tintColorSVG(color,id){return"\n    <svg>\n      <defs>\n        <filter id=\"tint-"+id+"\">\n          <feFlood flood-color=\""+color+"\"></feFlood>\n          <feComposite in2=\"SourceAlpha\" operator=\"atop\"></feComposite>\n        </filter>\n      </defs>\n    </svg>";};var onLoadParamsForSource=function onLoadParamsForSource(source){return{source:{width:source.size.width,height:source.size.height,url:source.request}};};var idCounter=0;var RCTImageView=(_dec=(0,_CustomElement2.default)("rct-image-view"),_dec(_class=function(_RCTView){(0,_inherits3.default)(RCTImageView,_RCTView);function RCTImageView(bridge){(0,_classCallCheck3.default)(this,RCTImageView);var _this=(0,_possibleConstructorReturn3.default)(this,(RCTImageView.__proto__||Object.getPrototypeOf(RCTImageView)).call(this,bridge));_this.onLoadStart=false;_this.onLoad=false;_this.onLoadEnd=false;(0,_extends3.default)(_this.style,{overflow:"hidden"});_this._imageSources=[];_this.svgFilter=document.createElement("div");_this.svgFilter.style.height="0";_this.childContainer.appendChild(_this.svgFilter);_this.filterId=idCounter;idCounter++;_this.imageElement=document.createElement("img");_this.childContainer.appendChild(_this.imageElement);_this.resizeMode="stretch";_this.imageElement.addEventListener("load",function(){_this.forceRasterization();});return _this;}(0,_createClass3.default)(RCTImageView,[{key:"updateFilter",value:function updateFilter(){var filterStrings=[];if(this._tintColor){filterStrings.push("url(#tint-"+this.filterId+")");}if(this._blurRadius){filterStrings.push("blur("+this._blurRadius+"px)");}this.imageElement.style.webkitFilter=filterStrings.join(" ");this.imageElement.style.filter=filterStrings.join(" ");}},{key:"forceRasterization",value:function forceRasterization(){var _this2=this;if(this._tintColor!=null){requestAnimationFrame(function(){_this2.imageElement.style.willChange="transform";requestAnimationFrame(function(){_this2.imageElement.style.willChange="";});});}}},{key:"hasMultipleSources",value:function hasMultipleSources(){return this._imageSources.length>1;}},{key:"imageSourceForSize",value:function imageSourceForSize(size){if(!this.hasMultipleSources()){return this._imageSources[0];}if(size.width===0&&size.height===0){return null;}var scale=this.imageScale;var targetImagePixels=size.width*size.height*scale*scale;var bestSource=null;var bestFit=Infinity;for(var _iterator=this._imageSources,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[typeof Symbol==="function"?Symbol.iterator:"@@iterator"]();;){var _ref;if(_isArray){if(_i>=_iterator.length)break;_ref=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref=_i.value;}var source=_ref;var imgSize=source.size;var imagePixels=imgSize.width*imgSize.height*source.scale*source.scale;var fit=Math.abs(1-imagePixels/targetImagePixels);if(fit<bestFit){bestFit=fit;bestSource=source;}}return bestSource;}},{key:"reloadImage",value:function reloadImage(){var _this3=this;var source=this.imageSourceForSize(this.frameSize);if(source&&this.frameSize.width>0&&this.frameSize.height>0){if(this.onLoadStart){this.bridge.enqueueJSCall("RCTEventEmitter","receiveEvent",[this.reactTag,"topLoadStart",null]);}this.bridge.imageLoader.loadImageWithURLRequest(source.request).then(function(image){_this3.imageElement.src=image.src;if(_this3.onLoad){var sourceLoaded=source.imageSourceWithSizeAndScale({width:image.width,height:image.height},source.scale);_this3.bridge.enqueueJSCall("RCTEventEmitter","receiveEvent",[_this3.reactTag,"topLoad",onLoadParamsForSource(sourceLoaded)]);}}).catch(function(err){_this3.bridge.enqueueJSCall("RCTEventEmitter","receiveEvent",[_this3.reactTag,"topError",{error:err}]);}).then(function(){if(_this3.onLoadEnd){_this3.bridge.enqueueJSCall("RCTEventEmitter","receiveEvent",[_this3.reactTag,"topLoadEnd",null]);}});}}},{key:"imageSources",set:function set(value){this._imageSources=value;this.reloadImage();}},{key:"resizeMode",set:function set(value){var outputValue="";switch(value){case"contain":case"cover":outputValue=value;break;case"center":outputValue="scale-down";break;case"stretch":outputValue="fill";break;case"none":outputValue="none";break;}(0,_extends3.default)(this.imageElement.style,{objectFit:outputValue});}},{key:"blurRadius",set:function set(value){this._blurRadius=value;this.updateFilter();}},{key:"tintColor",set:function set(value){if(typeof value==="number"){var _ColorArrayFromHexARG=(0,_ColorArrayFromHexARGB2.default)(value),_ColorArrayFromHexARG2=(0,_slicedToArray3.default)(_ColorArrayFromHexARG,4),a=_ColorArrayFromHexARG2[0],r=_ColorArrayFromHexARG2[1],g=_ColorArrayFromHexARG2[2],b=_ColorArrayFromHexARG2[3];var stringValue="rgba("+r+","+g+","+b+","+a+")";this._tintColor=stringValue;}else{this._tintColor=value;}this.svgFilter.innerHTML=this._tintColor?tintColorSVG(this._tintColor,this.filterId):"";this.updateFilter();}},{key:"imageScale",get:function get(){return this.bridge.deviceInfo.getDevicePixelRatio();}},{key:"frame",get:function get(){return(0,_get3.default)(RCTImageView.prototype.__proto__||Object.getPrototypeOf(RCTImageView.prototype),"frame",this);},set:function set(value){(0,_set3.default)(RCTImageView.prototype.__proto__||Object.getPrototypeOf(RCTImageView.prototype),"frame",value,this);var width=value.width,height=value.height;(0,_extends3.default)(this.imageElement.style,{width:"100%",height:"100%"});this.reloadImage();}},{key:"frameSize",get:function get(){var _frame=this.frame,width=_frame.width,height=_frame.height;return{width:width,height:height};}}]);return RCTImageView;}(_RCTView3.default))||_class);exports.default=RCTImageView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,