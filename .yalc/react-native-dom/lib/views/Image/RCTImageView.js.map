{"version":3,"sources":["../../../ReactDom/views/Image/RCTImageView.js"],"names":["tintColorSVG","color","id","onLoadParamsForSource","source","width","size","height","url","request","idCounter","RCTImageView","bridge","onLoadStart","onLoad","onLoadEnd","style","overflow","_imageSources","svgFilter","document","createElement","childContainer","appendChild","filterId","imageElement","Image","setAttribute","resizeMode","addEventListener","forceRasterization","addWillChange","filterStrings","_tintColor","push","_blurRadius","webkitFilter","join","filter","requestAnimationFrame","willChange","length","hasMultipleSources","scale","imageScale","targetImagePixels","bestSource","bestFit","Infinity","imgSize","imagePixels","fit","Math","abs","imageSourceForSize","frameSize","enqueueJSCall","reactTag","imageLoader","loadImageWithURLRequest","then","image","src","sourceLoaded","imageSourceWithSizeAndScale","catch","err","error","message","updateFilter","value","reloadImage","outputValue","objectFit","a","r","g","b","stringValue","innerHTML","deviceInfo","getDevicePixelRatio","frame"],"mappings":"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","file":"RCTImageView.js","sourcesContent":["/**\n * @providesModule RCTImageView\n * @flow\n */\n\nimport type RCTBridge from \"RCTBridge\";\n\nimport RCTView from \"RCTView\";\nimport RCTImageSource from \"RCTImageSource\";\nimport CustomElement from \"CustomElement\";\nimport ColorArrayFromHexARGB from \"ColorArrayFromHexARGB\";\nimport prefixInlineStyles from \"prefixInlineStyles\";\nimport isIOS from \"isIOS\";\n\nconst tintColorSVG = (color: string, id: number) => {\n  return `\n    <svg>\n      <defs>\n        <filter id=\"tint-${id}\">\n          <feFlood flood-color=\"${color}\"></feFlood>\n          <feComposite in2=\"SourceAlpha\" operator=\"atop\"></feComposite>\n        </filter>\n      </defs>\n    </svg>`;\n};\n\nconst onLoadParamsForSource = (source: RCTImageSource) => ({\n  source: {\n    width: source.size.width,\n    height: source.size.height,\n    url: source.request\n  }\n});\n\nlet idCounter = 0;\n\n@CustomElement(\"rct-image-view\")\nclass RCTImageView extends RCTView {\n  _imageSources: RCTImageSource[];\n  imageElement: HTMLImageElement;\n  imageContainer: HTMLDivElement;\n  childShadowRoot: ShadowRoot;\n  imgStyle: HTMLStyleElement;\n\n  onLoadStart: boolean = false;\n  onLoad: boolean = false;\n  onLoadEnd: boolean = false;\n\n  filterId: number;\n  svgFilter: HTMLElement;\n  _blurRadius: ?number;\n  _tintColor: ?string;\n\n  constructor(bridge: RCTBridge) {\n    super(bridge);\n\n    Object.assign(this.style, {\n      overflow: \"hidden\"\n    });\n\n    this._imageSources = [];\n\n    // TODO: Using a shadow root breaks the tintColor functionality on safari,\n    //       figure out why and re-enable\n    // this.childShadowRoot = this.childContainer.attachShadow({ mode: \"open\" });\n\n    this.svgFilter = document.createElement(\"div\");\n    this.svgFilter.style.height = \"0\";\n    this.childContainer.appendChild(this.svgFilter);\n    this.filterId = idCounter;\n    idCounter++;\n\n    this.imageElement = new Image();\n    this.imageElement.setAttribute(\"draggable\", \"false\");\n    // this.imageElement.setAttribute(\"decoding\", \"async\");\n    this.childContainer.appendChild(this.imageElement);\n\n    this.resizeMode = \"stretch\";\n\n    this.imageElement.addEventListener(\"load\", () => {\n      this.forceRasterization();\n    });\n\n    if (isIOS) {\n      this.addWillChange(\"transform\");\n    }\n  }\n\n  updateFilter() {\n    const filterStrings: string[] = [];\n    if (this._tintColor) {\n      filterStrings.push(`url(#tint-${this.filterId})`);\n    }\n    if (this._blurRadius) {\n      filterStrings.push(`blur(${this._blurRadius}px)`);\n    }\n\n    // $FlowFixMe\n    this.imageElement.style.webkitFilter = filterStrings.join(\" \");\n    this.imageElement.style.filter = filterStrings.join(\" \");\n  }\n\n  forceRasterization() {\n    if (this._tintColor != null) {\n      requestAnimationFrame(() => {\n        this.imageElement.style.willChange = \"transform\";\n        requestAnimationFrame(() => {\n          this.imageElement.style.willChange = \"auto\";\n        });\n      });\n    }\n  }\n\n  set imageSources(value: RCTImageSource[]) {\n    this._imageSources = value;\n    this.reloadImage();\n  }\n\n  set resizeMode(value: string) {\n    let outputValue: string = \"\";\n    switch (value) {\n      case \"contain\":\n      case \"cover\":\n        outputValue = value;\n        break;\n      case \"center\":\n        outputValue = \"scale-down\";\n        break;\n      case \"stretch\":\n        outputValue = \"fill\";\n        break;\n      case \"none\":\n        outputValue = `none`;\n        break;\n    }\n    Object.assign(this.imageElement.style, {\n      objectFit: outputValue\n    });\n  }\n\n  set blurRadius(value: ?number) {\n    this._blurRadius = value;\n    this.updateFilter();\n  }\n\n  set tintColor(value: ?number) {\n    if (typeof value === \"number\") {\n      const [a, r, g, b] = ColorArrayFromHexARGB(value);\n      const stringValue = `rgba(${r},${g},${b},${a})`;\n      this._tintColor = stringValue;\n    } else {\n      this._tintColor = value;\n    }\n    this.svgFilter.innerHTML = this._tintColor\n      ? tintColorSVG(this._tintColor, this.filterId)\n      : \"\";\n    this.updateFilter();\n    this.forceRasterization();\n  }\n\n  get imageScale(): number {\n    return this.bridge.deviceInfo.getDevicePixelRatio();\n  }\n\n  get frame(): Frame {\n    return super.frame;\n  }\n\n  set frame(value: Frame) {\n    super.frame = value;\n\n    const { width, height } = value;\n    Object.assign(this.imageElement.style, {\n      width: `${width}px`,\n      height: `${height}px`\n    });\n\n    this.reloadImage();\n  }\n\n  hasMultipleSources(): boolean {\n    return this._imageSources.length > 1;\n  }\n\n  imageSourceForSize(size: Size): ?RCTImageSource {\n    if (!this.hasMultipleSources()) {\n      return this._imageSources[0];\n    }\n\n    // need to wait for layout pass before deciding\n    if (size.width === 0 && size.height === 0) {\n      return null;\n    }\n\n    const scale = this.imageScale;\n    const targetImagePixels = size.width * size.height * scale * scale;\n\n    let bestSource: ?RCTImageSource = null;\n    let bestFit: number = Infinity;\n\n    for (let source of this._imageSources) {\n      const imgSize = source.size;\n      const imagePixels =\n        imgSize.width * imgSize.height * source.scale * source.scale;\n      const fit = Math.abs(1 - imagePixels / targetImagePixels);\n\n      if (fit < bestFit) {\n        bestFit = fit;\n        bestSource = source;\n      }\n    }\n\n    return bestSource;\n  }\n\n  get frameSize(): Size {\n    const { width, height } = this.frame;\n    return { width, height };\n  }\n\n  reloadImage() {\n    const source = this.imageSourceForSize(this.frameSize);\n    if (source && this.frameSize.width > 0 && this.frameSize.height > 0) {\n      if (this.onLoadStart) {\n        this.bridge.enqueueJSCall(\"RCTEventEmitter\", \"receiveEvent\", [\n          this.reactTag,\n          \"topLoadStart\",\n          null\n        ]);\n      }\n\n      this.bridge.imageLoader\n        .loadImageWithURLRequest(source.request)\n        .then((image: Image) => {\n          this.imageElement.src = image.src;\n\n          if (this.onLoad) {\n            const sourceLoaded = source.imageSourceWithSizeAndScale(\n              {\n                width: image.width,\n                height: image.height\n              },\n              source.scale\n            );\n            this.bridge.enqueueJSCall(\"RCTEventEmitter\", \"receiveEvent\", [\n              this.reactTag,\n              \"topLoad\",\n              onLoadParamsForSource(sourceLoaded)\n            ]);\n          }\n        })\n        .catch((err) => {\n          this.bridge.enqueueJSCall(\"RCTEventEmitter\", \"receiveEvent\", [\n            this.reactTag,\n            \"topError\",\n            {\n              error: err.message\n            }\n          ]);\n        })\n        .then(() => {\n          if (this.onLoadEnd) {\n            this.bridge.enqueueJSCall(\"RCTEventEmitter\", \"receiveEvent\", [\n              this.reactTag,\n              \"topLoadEnd\",\n              null\n            ]);\n          }\n          this.updateFilter();\n        });\n    }\n  }\n}\n\nexport default RCTImageView;\n"]}