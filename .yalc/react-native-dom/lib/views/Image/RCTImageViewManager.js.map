{"version":3,"sources":["../../../ReactDom/views/Image/RCTImageViewManager.js"],"names":["module","exports","RCTViewManager","RCT_EXPORT_VIEW_PROP","RCTImageViewManager","bridge","__props","filter","v","name","view","value","imageSources","map","srcJson","size","width","height","imageSource","uri","scale","__packager_asset","packagerAsset","resizeMode","blurRadius","tintColor","onLoadStart","onLoad","onLoadEnd","url","resolveId","rejectId","resolve","callbackFromId","reject","imageLoader","loadImageWithURLRequest","then","catch","error","request","successId","errorId","success","getImageSizeForURLRequest","errorMsg"],"mappings":"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","file":"RCTImageViewManager.js","sourcesContent":["/**\n * @providesModule RCTImageViewManager\n * @flow\n */\nimport type UIView from \"UIView\";\nimport RCTBridge, {\n  RCT_EXPORT_MODULE,\n  RCT_EXPORT_METHOD,\n  RCTFunctionTypeNormal,\n  RCTFunctionTypePromise\n} from \"RCTBridge\";\nimport RCTImageView from \"RCTImageView\";\nimport RCTImageSource from \"RCTImageSource\";\n\nimport _RCTViewManager from \"RCTViewManager\";\n\ntype ImageSourceJson = {\n  __packager_asset?: boolean,\n  width?: number,\n  height?: number,\n  scale?: number,\n  uri: string\n};\n\nmodule.exports = (async () => {\n  const RCTViewManager = await _RCTViewManager;\n  const { RCT_EXPORT_VIEW_PROP } = RCTViewManager;\n\n  @RCT_EXPORT_MODULE(\"RCTImageViewManager\")\n  class RCTImageViewManager extends RCTViewManager {\n    constructor(bridge: RCTBridge) {\n      super(bridge);\n\n      // TODO: Revamp ViewManager decorators so this isn't necessary\n      // $FlowFixMe\n      this.__props = this.__props.filter((v) => {\n        return v.name !== \"hitSlop\";\n      });\n    }\n\n    view(): RCTImageView {\n      return new RCTImageView(this.bridge);\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"source\", \"array\")\n    setImageSources(view: RCTImageView, value: ImageSourceJson[]) {\n      const imageSources = value.map((srcJson: ImageSourceJson) => {\n        const size = {\n          width: srcJson.width != null ? srcJson.width : 0,\n          height: srcJson.height != null ? srcJson.height : 0\n        };\n\n        const imageSource = new RCTImageSource(\n          srcJson.uri,\n          // $FlowFixMe\n          size,\n          // $FlowFixMe\n          srcJson.scale ? srcJson.scale : 1\n        );\n\n        if (srcJson.__packager_asset != null) {\n          imageSource.packagerAsset = srcJson.__packager_asset;\n        }\n\n        return imageSource;\n      });\n\n      view.imageSources = imageSources;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"resizeMode\", \"string\")\n    setResizeMode(view: RCTImageView, value: string) {\n      view.resizeMode = value;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"blurRadius\", \"number\")\n    setBlurRadius(view: RCTImageView, value: number) {\n      view.blurRadius = value;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"tintColor\", \"color\")\n    setTintColor(view: RCTImageView, value: ?number) {\n      view.tintColor = value;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"onLoadStart\", \"RCTDirectEventBlock\")\n    setOnLoadStart(view: RCTImageView, value: boolean) {\n      view.onLoadStart = value;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"onLoad\", \"RCTDirectEventBlock\")\n    setOnLoad(view: RCTImageView, value: boolean) {\n      view.onLoad = value;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"onLoadEnd\", \"RCTDirectEventBlock\")\n    setOnLoadEnd(view: RCTImageView, value: boolean) {\n      view.onLoadEnd = value;\n    }\n\n    // TODO: set this to something meaningfull\n    @RCT_EXPORT_VIEW_PROP(\"onError\", \"RCTDirectEventBlock\")\n    setOnError() {}\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypePromise)\n    prefetchImage(url: string, resolveId: number, rejectId: number) {\n      const resolve = this.bridge.callbackFromId(resolveId);\n      const reject = this.bridge.callbackFromId(rejectId);\n\n      this.bridge.imageLoader\n        .loadImageWithURLRequest(url)\n        .then(() => {\n          resolve(true);\n        })\n        .catch((error) => {\n          reject(\"E_PREFETCH_FAILURE\", null, error);\n        });\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    getSize(request: string, successId: number, errorId: number) {\n      const success = this.bridge.callbackFromId(successId);\n      const error = this.bridge.callbackFromId(errorId);\n\n      this.bridge.imageLoader\n        .getImageSizeForURLRequest(request)\n        .then((size: Size) => {\n          success(size.width, size.height);\n        })\n        .catch((errorMsg) => {\n          error(errorMsg);\n        });\n    }\n  }\n\n  return RCTImageViewManager;\n})();\n"]}