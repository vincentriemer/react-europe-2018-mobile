{"version":3,"sources":["../../../ReactDom/views/WebView/RCTWebViewManager.js"],"names":["module","exports","RCTViewManager","RCT_EXPORT_VIEW_PROP","RCTWebViewManager","bridge","view","value","loadStart","loadFinish","loadError","source","scrollEnabled","reactTag","uiManager","addUIBlock","_","viewRegistry","get","iframeElement","src","script","message"],"mappings":"ipBAQA,mD,mDAKA,wC,qDAEA,oD,qyBAEAA,OAAOC,OAAP,CAAkB,8XACVC,cADU,eAERC,oBAFQ,CAEiBD,cAFjB,CAERC,oBAFQ,CAKVC,iBALU,OAIf,iCAAkB,mBAAlB,CAJe,OAUbD,qBAAqB,gBAArB,CAAuC,qBAAvC,CAVa,OAebA,qBAAqB,iBAArB,CAAwC,qBAAxC,CAfa,OAoBbA,qBAAqB,gBAArB,CAAuC,qBAAvC,CApBa,OAyBbA,qBAAqB,QAArB,CAA+B,QAA/B,CAzBa,OA8BbA,qBAAqB,eAArB,CAAsC,MAAtC,CA9Ba,OAmCb,kEAnCa,OAwCb,kEAxCa,OA6Cb,kEA7Ca,QAuDb,kEAvDa,QAiEb,kEAjEa,QAsEb,kEAtEa,+ZAMC,CACb,MAAO,0BAAe,KAAKE,MAApB,CAAP,CACD,CARa,0DAWGC,IAXH,CAWqBC,KAXrB,CAWsC,CAClDD,KAAKE,SAAL,CAAiBD,KAAjB,CACD,CAba,4DAgBID,IAhBJ,CAgBsBC,KAhBtB,CAgBuC,CACnDD,KAAKG,UAAL,CAAkBF,KAAlB,CACD,CAlBa,0DAqBGD,IArBH,CAqBqBC,KArBrB,CAqBsC,CAClDD,KAAKI,SAAL,CAAiBH,KAAjB,CACD,CAvBa,4CA0BJD,IA1BI,CA0ByC,IAA3BC,MAA2B,2DAAJ,EAAI,CACrDD,KAAKK,MAAL,CAAcJ,KAAd,CACD,CA5Ba,0DA+BGD,IA/BH,CA+B4C,IAAvBC,MAAuB,2DAAN,IAAM,CACxDD,KAAKM,aAAL,CAAqBL,KAArB,CACD,CAjCa,sCAoCPM,QApCO,CAoCW,CAExB,CAtCa,4CAyCJA,QAzCI,CAyCc,CAE3B,CA3Ca,sCA8CPA,QA9CO,CA8CW,CACvB,KAAKR,MAAL,CAAYS,SAAZ,CAAsBC,UAAtB,CAAiC,SAACC,CAAD,CAAIC,YAAJ,CAAqB,CACpD,GAAMX,MAAoBW,aAAaC,GAAb,CAAiBL,QAAjB,CAA1B,CACA,GAAIP,MAAQA,oCAAZ,CAAwC,CACtCA,KAAKa,aAAL,CAAmBC,GAAnB,EAA0B,EAA1B,CACD,CACF,CALD,EAMD,CArDa,gDAwDFP,QAxDE,CAwDgB,CAC5B,KAAKR,MAAL,CAAYS,SAAZ,CAAsBC,UAAtB,CAAiC,SAACC,CAAD,CAAIC,YAAJ,CAAqB,CACpD,GAAMX,MAAoBW,aAAaC,GAAb,CAAiBL,QAAjB,CAA1B,CACA,GAAIP,MAAQA,oCAAZ,CAAwC,CACtCA,KAAKK,MAAL,CAAc,EAAd,CACD,CACF,CALD,EAMD,CA/Da,0DAkEGE,QAlEH,CAkEqBQ,MAlErB,CAkEqC,CAElD,CApEa,gDAuEFR,QAvEE,CAuEgBS,OAvEhB,CAuEiC,CAE9C,CAzEa,+BAKgBpB,cALhB,osDA4ETE,iBA5ES,4DAAD,EAAjB","file":"RCTWebViewManager.js","sourcesContent":["/**\n * @providesModule RCTWebViewManager\n * @flow\n */\n\nimport type UIView from \"UIView\";\nimport type { WebViewSource } from \"RCTWebView\";\n\nimport RCTBridge, {\n  RCT_EXPORT_MODULE,\n  RCT_EXPORT_METHOD,\n  RCTFunctionTypeNormal\n} from \"RCTBridge\";\nimport RCTWebView from \"RCTWebView\";\n\nimport _RCTViewManager from \"RCTViewManager\";\n\nmodule.exports = (async () => {\n  const RCTViewManager = await _RCTViewManager;\n  const { RCT_EXPORT_VIEW_PROP } = RCTViewManager;\n\n  @RCT_EXPORT_MODULE(\"RCTWebViewManager\")\n  class RCTWebViewManager extends RCTViewManager {\n    view(): UIView {\n      return new RCTWebView(this.bridge);\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"onLoadingStart\", \"RCTDirectEventBlock\")\n    bindLoadingStart(view: RCTWebView, value: Function) {\n      view.loadStart = value;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"onLoadingFinish\", \"RCTDirectEventBlock\")\n    bindLoadingFinish(view: RCTWebView, value: Function) {\n      view.loadFinish = value;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"onLoadingError\", \"RCTDirectEventBlock\")\n    bindLoadingError(view: RCTWebView, value: Function) {\n      view.loadError = value;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"source\", \"object\")\n    setSource(view: RCTWebView, value: WebViewSource = {}) {\n      view.source = value;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"scrollEnabled\", \"bool\")\n    setScrollEnabled(view: RCTWebView, value: boolean = true) {\n      view.scrollEnabled = value;\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    goBack(reactTag: number) {\n      // NO-OP\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    goForward(reactTag: number) {\n      // NO-OP\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    reload(reactTag: number) {\n      this.bridge.uiManager.addUIBlock((_, viewRegistry) => {\n        const view: ?RCTWebView = viewRegistry.get(reactTag);\n        if (view && view instanceof RCTWebView) {\n          view.iframeElement.src += \"\";\n        }\n      });\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    stopLoading(reactTag: number) {\n      this.bridge.uiManager.addUIBlock((_, viewRegistry) => {\n        const view: ?RCTWebView = viewRegistry.get(reactTag);\n        if (view && view instanceof RCTWebView) {\n          view.source = {};\n        }\n      });\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    injectJavaScript(reactTag: number, script: string) {\n      // NO-OP\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    postMessage(reactTag: number, message: string) {\n      // NO-OP\n    }\n  }\n\n  return RCTWebViewManager;\n})();\n"]}