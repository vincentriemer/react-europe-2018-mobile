var _regenerator=require("babel-runtime/regenerator");var _regenerator2=_interopRequireDefault(_regenerator);var _extends2=require("babel-runtime/helpers/extends");var _extends3=_interopRequireDefault(_extends2);var _classCallCheck2=require("babel-runtime/helpers/classCallCheck");var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require("babel-runtime/helpers/createClass");var _createClass3=_interopRequireDefault(_createClass2);var _slicedToArray2=require("babel-runtime/helpers/slicedToArray");var _slicedToArray3=_interopRequireDefault(_slicedToArray2);var _this2=this;var _yogaDom=require("yoga-dom");var YG=_interopRequireWildcard(_yogaDom);var _Invariant=require("./../utils/Invariant");var _Invariant2=_interopRequireDefault(_Invariant);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var LAYOUT_PROPS=["top","left","width","height"];module.exports=function _callee(){var Yoga,propAlias,convertToYogaValue,setEnumProp,bindEnumProps,bindUnitProps,bindNumberProps,EDGES,bindEdgeProps,RCTShadowView;return _regenerator2.default.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:bindEdgeProps=function bindEdgeProps(instance,propDefs,bindingFunc){propDefs.forEach(function(propName){bindingFunc.call(null,instance,EDGES.map(function(edge){return""+propName+edge;}).concat([propName]));});};bindNumberProps=function bindNumberProps(instance,propDefs){propDefs.forEach(function(propName){Object.defineProperty(instance,propName,{configurable:true,get:function get(){return this.yogaNode[propName];},set:function set(value){this.yogaNode[propName]=value;this.makeDirty();return true;}});});};bindUnitProps=function bindUnitProps(instance,propDefs){propDefs.forEach(function(propName){Object.defineProperty(instance,propName,{configurable:true,get:function get(){return this.yogaNode[propName];},set:function set(value){this.yogaNode[propName]=convertToYogaValue(value,Yoga.Constants.unit);this.makeDirty();return true;}});});};bindEnumProps=function bindEnumProps(instance,propDefs){propDefs.forEach(function(_ref){var _ref2=(0,_slicedToArray3.default)(_ref,2),propName=_ref2[0],enumMap=_ref2[1];Object.defineProperty(instance,propName,{configurable:true,get:function get(){return this.yogaNode[propName];},set:function set(value){setEnumProp(this.yogaNode,propName,enumMap,value);this.makeDirty();return true;}});});};setEnumProp=function setEnumProp(yogaNode,propName,enumMap,value){if(value==null){yogaNode[propName]=NaN;}else{var enumValue=enumMap[value];if(enumValue!=null){yogaNode[propName]=enumValue;}else if(__DEV__){console.warn("No such value '"+value+"' found for prop '"+propName+"'");}}};convertToYogaValue=function convertToYogaValue(input,units){if(typeof input==="number"){return{value:input,unit:units.point};}else if(input==null){return{value:NaN,unit:units.undefined};}else{if(input==="auto"){return{value:NaN,unit:units.auto};}else{return{value:parseFloat(input),unit:input.endsWith("%")?units.percent:units.point};}}};propAlias=function propAlias(target,targetProp,sourceProp){Object.defineProperty(target,targetProp,{configurable:true,get:function get(){return this[sourceProp];},set:function set(value){this[sourceProp]=value;return true;}});};_context.next=9;return _regenerator2.default.awrap(require("yoga-dom"));case 9:Yoga=_context.sent;EDGES=["Left","Right","Top","Bottom","Start","End","Horizontal","Vertical"];RCTShadowView=function(){function RCTShadowView(){(0,_classCallCheck3.default)(this,RCTShadowView);this.isDirty=true;this.reactSubviews=[];this.yogaNode=new Yoga.Node();this.previousLayout=undefined;this.measurement=undefined;}(0,_createClass3.default)(RCTShadowView,[{key:"measureGlobal",value:function measureGlobal(){var globalX=0,globalY=0;var currentView=this;while(currentView){var _layout=currentView.previousLayout;if(_layout){globalX+=_layout.left;globalY+=_layout.top;if(currentView.hasOwnProperty("scrollOffset")){globalX-=currentView.scrollOffset.left;globalY-=currentView.scrollOffset.top;}currentView=currentView.reactSuperview;}else{currentView=null;}}return{globalX:globalX,globalY:globalY};}},{key:"getLayoutChanges",value:function getLayoutChanges(previousPosition){var _this=this;var layoutChanges=[];var newLayout=this.yogaNode.getComputedLayout();var currentPosition={top:previousPosition.top+newLayout.top,left:previousPosition.left+newLayout.left};var previousMeasurement=this.measurement?(0,_extends3.default)({},this.measurement):null;var nextMeasurement=(0,_extends3.default)({},currentPosition,{width:newLayout.width,height:newLayout.height});if(JSON.stringify(newLayout)!==JSON.stringify(this.previousLayout)){layoutChanges.push({reactTag:this.reactTag,layout:newLayout,previousMeasurement:previousMeasurement,nextMeasurement:nextMeasurement});this.previousLayout=newLayout;this.reactSubviews.forEach(function(subView){layoutChanges=layoutChanges.concat(subView.getLayoutChanges(currentPosition));});}else{var shouldUpdateChildren=function(){var result=false;_this.reactSubviews.forEach(function(subView){if(subView.isDirty){result=true;}});return result;}();if(shouldUpdateChildren){this.reactSubviews.forEach(function(subView){layoutChanges=layoutChanges.concat(subView.getLayoutChanges(currentPosition));});}}this.measurement=(0,_extends3.default)({},nextMeasurement);this.isDirty=false;return layoutChanges;}},{key:"makeDirty",value:function makeDirty(){this.isDirty=true;var view=this;while(view.reactSuperview){view=view.reactSuperview;view.isDirty=true;}}},{key:"makeDirtyRecursive",value:function makeDirtyRecursive(){this.reactSubviews.forEach(function(subView){subView.makeDirtyRecursive();});this.isDirty=true;}},{key:"insertReactSubviewAtIndex",value:function insertReactSubviewAtIndex(subview,index){subview.reactSuperview=this;this.reactSubviews.splice(index,0,subview);this.yogaNode.insertChild(subview.yogaNode,index);this.makeDirty();}},{key:"removeReactSubview",value:function removeReactSubview(subview){subview.reactSuperview=undefined;this.reactSubviews=this.reactSubviews.filter(function(s){return s!==subview;});this.yogaNode.removeChild(subview.yogaNode);this.makeDirty();}},{key:"purge",value:function purge(){this.reactSubviews.forEach(function(subView){return subView.purge();});this.yogaNode.free();}},{key:"didSetProps",value:function didSetProps(changedProps){}},{key:"didUpdateReactSubviews",value:function didUpdateReactSubviews(){}},{key:"reactTagAtPoint",value:function reactTagAtPoint(point){return 0;}},{key:"localData",set:function set(value){}},{key:"backgroundColor",get:function get(){return this._backgroundColor;},set:function set(value){this._backgroundColor=value;}}]);return RCTShadowView;}();bindEnumProps(RCTShadowView.prototype,[["direction",Yoga.Constants.direction],["flexDirection",Yoga.Constants.flexDirection],["justifyContent",Yoga.Constants.justify],["alignContent",Yoga.Constants.align],["alignItems",Yoga.Constants.align],["alignSelf",Yoga.Constants.align],["position",Yoga.Constants.position],["flexWrap",Yoga.Constants.wrap],["overflow",Yoga.Constants.overflow],["display",Yoga.Constants.display]]);bindUnitProps(RCTShadowView.prototype,["width","height","minWidth","minHeight","maxWidth","maxHeight","left","right","top","bottom","start","end","horizontal","vertical"]);bindNumberProps(RCTShadowView.prototype,["flex","flexGrow","flexShrink","aspectRatio"]);bindEdgeProps(RCTShadowView.prototype,["margin","padding"],bindUnitProps);bindEdgeProps(RCTShadowView.prototype,["border"],bindNumberProps);["borderTop","borderLeft","borderRight","borderBottom","borderStart","borderEnd"].forEach(function(propName){propAlias(RCTShadowView.prototype,propName+"Width",propName);});return _context.abrupt("return",RCTShadowView);case 19:case"end":return _context.stop();}}},null,_this2);}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,