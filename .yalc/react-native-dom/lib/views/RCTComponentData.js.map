{"version":3,"sources":["../../ReactDom/views/RCTComponentData.js"],"names":["moduleNameForClass","cls","name","__moduleName","startsWith","substring","endsWith","length","RCTComponentData","managerClass","bridge","viewPropBlocks","shadowPropBlocks","rawPropConfig","reduce","propConfig","raw","type","setter","view","value","tag","manager","reactTag","shadowView","props","Object","keys","forEach","propName","hasOwnProperty","propValue","shadowPropConfig","_manager","moduleForClass","count","propTypes","bubblingEvents","directEvents","customBubblingEventTypes","events","event","push","__props","exported","baseModuleName","_propConfig","generatePropConfig","_shadowPropConfig","__shadowProps"],"mappings":"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","file":"RCTComponentData.js","sourcesContent":["/**\n * @providesModule RCTComponentData\n * @flow\n */\n\nimport invariant from \"Invariant\";\nimport RCTBridge, {\n  getPropertyNames,\n  bridgeModuleNameForClass\n} from \"RCTBridge\";\nimport RCTUIManager from \"RCTUIManager\";\n\nimport type { RCTComponent } from \"RCTComponent\";\nimport UIView from \"UIView\";\nimport { normalizeInputEventName } from \"RCTEventDispatcher\";\nimport RCTText from \"RCTText\";\nimport RCTRawText from \"RCTRawText\";\nimport type RCTView from \"RCTView\";\nimport RCTTextInput from \"RCTTextInput\";\n\nimport typeof _RCTShadowView from \"RCTShadowView\";\nimport typeof _RCTViewManager from \"RCTViewManager\";\n\ntype RCTViewManager = $Call<$await<_RCTViewManager>>;\ntype RCTShadowView = $Call<$await<_RCTShadowView>>;\n\ntype Props = { [string]: any };\n\ntype ViewConfig = {\n  propTypes: Props,\n  bubblingEvents: Array<string>,\n  directEvents: Array<string>,\n  baseModuleName: ?string\n  // uiClassViewName: string\n};\n\ntype RCTPropBlock = (view: RCTComponent, { [string]: any }) => void;\ntype RCTPropBlockDictionary = { [string]: RCTPropBlock };\n\nfunction moduleNameForClass(cls: Class<RCTViewManager>) {\n  let name = cls.__moduleName;\n  if (name != null) {\n    if (name.startsWith(\"RK\")) {\n      name = `RCT${name.substring(2)}`;\n    }\n    if (name.endsWith(\"Manager\")) {\n      name = name.substring(0, name.length - \"Manager\".length);\n    }\n    return name;\n  }\n  return \"\";\n}\n\nclass RCTComponentData {\n  managerClass: Class<RCTViewManager>;\n  name: string;\n  _manager: ?RCTViewManager;\n  viewConfig: { [string]: any };\n  bridge: RCTBridge;\n  _propConfig: ?Object;\n  _shadowPropConfig: ?Object;\n\n  viewPropBlocks: RCTPropBlockDictionary;\n  shadowPropBlocks: RCTPropBlockDictionary;\n\n  constructor(managerClass: Class<RCTViewManager>, bridge: RCTBridge) {\n    this.bridge = bridge;\n    this.managerClass = managerClass;\n    this.viewPropBlocks = {};\n    this.shadowPropBlocks = {};\n    this.name = moduleNameForClass(managerClass);\n  }\n\n  get manager(): RCTViewManager {\n    if (this._manager == null) {\n      this._manager = (this.bridge.moduleForClass(this.managerClass): any);\n    }\n    invariant(this._manager, \"RCTComponentData's view manager must be set\");\n    return this._manager;\n  }\n\n  get viewConfig(): ViewConfig {\n    const count = 0;\n    const propTypes = {};\n    const bubblingEvents = [];\n    const directEvents = [];\n\n    if (this.manager.customBubblingEventTypes) {\n      const events = this.manager.customBubblingEventTypes();\n      for (let event of events) {\n        bubblingEvents.push(normalizeInputEventName(event));\n      }\n    }\n\n    this.manager.__props.forEach(({ name, type, exported }) => {\n      if (exported) {\n        if (type === \"RCTBubblingEventBlock\") {\n          bubblingEvents.push(normalizeInputEventName(name));\n          propTypes[name] = \"BOOL\";\n        } else if (type === \"RCTDirectEventBlock\") {\n          directEvents.push(normalizeInputEventName(name));\n          propTypes[name] = \"BOOL\";\n        } else {\n          propTypes[name] = type;\n        }\n      }\n    });\n\n    return {\n      propTypes,\n      bubblingEvents,\n      directEvents,\n      baseModuleName: null\n    };\n  }\n\n  generatePropConfig(\n    rawPropConfig: Array<any>\n  ): { [string]: { type: string, setter: Function } } {\n    return rawPropConfig.reduce(\n      (propConfig, raw) => ({\n        ...propConfig,\n        [raw.name]: {\n          type: raw.type,\n          setter: raw.setter\n            ? raw.setter\n            : (view, value) => {\n                view[raw.name] = value;\n              }\n        }\n      }),\n      {}\n    );\n  }\n\n  get propConfig(): { [string]: { type: string, setter: Function } } {\n    if (this._propConfig == null) {\n      this._propConfig = this.generatePropConfig(this.manager.__props);\n    }\n\n    return this._propConfig;\n  }\n\n  get shadowPropConfig(): { [string]: { type: string, setter: Function } } {\n    if (this._shadowPropConfig == null) {\n      this._shadowPropConfig = this.generatePropConfig(\n        this.manager.__shadowProps\n      );\n    }\n\n    return this._shadowPropConfig;\n  }\n\n  createView(tag: number): UIView {\n    const view: UIView = (this.manager.view(): any);\n    view.reactTag = tag;\n    return view;\n  }\n\n  createShadowView(tag: number): RCTShadowView {\n    const shadowView: RCTShadowView = this.manager.shadowView();\n    shadowView.reactTag = tag;\n    return shadowView;\n  }\n\n  setPropsForView(props: Props, view: RCTComponent) {\n    if (props) {\n      Object.keys(props).forEach((propName) => {\n        if (this.propConfig.hasOwnProperty(propName)) {\n          const propConfig = this.propConfig[propName];\n          const propValue = props[propName];\n          const setter = propConfig.setter;\n\n          setter(view, propValue);\n        }\n      });\n    }\n  }\n\n  setPropsForShadowView(props: Props, shadowView: RCTShadowView) {\n    if (props) {\n      Object.keys(props).forEach((propName) => {\n        if (this.shadowPropConfig.hasOwnProperty(propName)) {\n          const propConfig = this.shadowPropConfig[propName];\n          const propValue = props[propName];\n          const setter = propConfig.setter;\n\n          setter(shadowView, propValue);\n        }\n      });\n    }\n  }\n}\n\nexport default RCTComponentData;\n"]}