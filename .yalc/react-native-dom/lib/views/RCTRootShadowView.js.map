{"version":3,"sources":["../../ReactDom/views/RCTRootShadowView.js"],"names":["RCTShadowView","Yoga","RCTRootShadowView","yogaConfig","Config","yogaNode","free","Node","createWithConfig","availableSize","width","Infinity","height","size","makeDirtyRecursive","ratio","setPointScaleFactor","calculateLayout","layoutChanges","getLayoutChanges","top","left"],"mappings":"0sBAOA,+C,4DACA,iC,kJAEgB,kQACRA,aADQ,4FAERC,IAFQ,eAIRC,iBAJQ,qFASZ,4BAAc,iMAGZ,MAAKC,UAAL,CAAkB,GAAIF,MAAKG,MAAT,EAAlB,CAEA,MAAKC,QAAL,CAAcC,IAAd,GACA,MAAKD,QAAL,CAAgBJ,KAAKM,IAAL,CAAUC,gBAAV,CAA2B,MAAKL,UAAhC,CAAhB,CAEA,MAAKM,aAAL,CAAqB,CAAEC,MAAOC,QAAT,CAAmBC,OAAQD,QAA3B,CAArB,CARY,aASb,CAlBW,2GAoBQE,IApBR,CAoBoB,CAC9B,KAAKJ,aAAL,CAAqBI,IAArB,CACA,KAAKC,kBAAL,GACD,CAvBW,sEAyBWC,KAzBX,CAyB0B,CACpC,KAAKZ,UAAL,CAAgBa,mBAAhB,CAAoCD,KAApC,EACD,CA3BW,6DA6B6B,oBACb,KAAKN,aADQ,CAC/BC,KAD+B,gBAC/BA,KAD+B,CACxBE,MADwB,gBACxBA,MADwB,CAEvC,KAAKP,QAAL,CAAcY,eAAd,CAA8BP,KAA9B,CAAqCE,MAArC,EAEA,GAAMM,eAAgB,KAAKC,gBAAL,CAAsB,CAC1CC,IAAK,CADqC,CAE1CC,KAAM,CAFoC,CAAtB,CAAtB,CAKA,MAAOH,cAAP,CACD,CAvCW,+BAIkBlB,aAJlB,kCA0CPE,iBA1CO,4DAAD,E","file":"RCTRootShadowView.js","sourcesContent":["/**\n * @providesModule RCTRootShadowView\n * @flow\n */\n\nimport type { LayoutChange } from \"RCTShadowView\";\n\nimport _RCTShadowView from \"RCTShadowView\";\nimport _Yoga from \"yoga-dom\";\n\nexport default (async () => {\n  const RCTShadowView = await _RCTShadowView;\n  const Yoga = await _Yoga;\n\n  class RCTRootShadowView extends RCTShadowView {\n    availableSize: Size;\n    yogaConfig: Yoga.Config;\n    // YGDirection\n\n    constructor() {\n      super();\n\n      this.yogaConfig = new Yoga.Config();\n\n      this.yogaNode.free();\n      this.yogaNode = Yoga.Node.createWithConfig(this.yogaConfig);\n\n      this.availableSize = { width: Infinity, height: Infinity };\n    }\n\n    updateAvailableSize(size: Size) {\n      this.availableSize = size;\n      this.makeDirtyRecursive();\n    }\n\n    updatePointScaleFactor(ratio: number) {\n      this.yogaConfig.setPointScaleFactor(ratio);\n    }\n\n    recalculateLayout(): Array<LayoutChange> {\n      const { width, height } = this.availableSize;\n      this.yogaNode.calculateLayout(width, height);\n\n      const layoutChanges = this.getLayoutChanges({\n        top: 0,\n        left: 0\n      });\n\n      return layoutChanges;\n    }\n  }\n\n  return RCTRootShadowView;\n})();\n"]}