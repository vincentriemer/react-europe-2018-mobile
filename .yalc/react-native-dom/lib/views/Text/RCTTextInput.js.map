{"version":3,"sources":["../../../ReactDom/views/Text/RCTTextInput.js"],"names":["RCTTextInput","bridge","inputElement","document","createElement","type","style","fontFamily","fontSize","backgroundColor","border","shadowRoot","attachShadow","mode","appendChild","value","borderRadius","top","left","width","height","padding","paddingLeft","paddingRight","paddingTop","paddingBottom","textAlign","fontWeight"],"mappings":"k3BAOA,sC,gDACA,0DACA,0D,iJAGMA,a,OADL,4BAAc,gBAAd,C,8EAIC,sBAAYC,MAAZ,CAA+B,gLACvBA,MADuB,GAG7B,MAAKC,YAAL,CAAoBC,SAASC,aAAT,CAAuB,OAAvB,CAApB,CACA,MAAKF,YAAL,CAAkBG,IAAlB,CAAyB,MAAzB,CAEA,sBAAc,MAAKH,YAAL,CAAkBI,KAAhC,CAAuC,CACrCC,gDADqC,CAErCC,kDAFqC,CAGrCC,gBAAiB,aAHoB,CAIrCC,OAAQ,WAJ6B,CAAvC,EAOA,GAAMC,YAAa,MAAKC,YAAL,CAAkB,CAAEC,KAAM,MAAR,CAAlB,CAAnB,CACAF,WAAWG,WAAX,CAAuB,MAAKZ,YAA5B,EACAS,WAAWG,WAAX,CAAuBX,SAASC,aAAT,CAAuB,MAAvB,CAAvB,EAf6B,aAgB9B,C,6EAEgBW,K,CAAe,CAE9B,iHAAqBA,KAArB,OACA,KAAKb,YAAL,CAAkBI,KAAlB,CAAwBU,YAAxB,CAA0CD,KAA1C,MACD,C,iCAEkB,CACjB,sHACD,C,kBAgCSA,K,CAAc,CACtB,0GAAcA,KAAd,OACA,sBAAc,KAAKb,YAAL,CAAkBI,KAAhC,CAAuC,CACrCW,IAAQF,MAAME,GAAd,KADqC,CAErCC,KAASH,MAAMG,IAAf,KAFqC,CAGrCC,MAAUJ,MAAMI,KAAhB,KAHqC,CAIrCC,OAAWL,MAAMK,MAAjB,KAJqC,CAAvC,EAMD,C,kCAtCWL,K,CAAe,CACzB,KAAKb,YAAL,CAAkBI,KAAlB,CAAwBe,OAAxB,CAAqCN,KAArC,MACD,C,sCAEeA,K,CAAe,CAC7B,KAAKb,YAAL,CAAkBI,KAAlB,CAAwBgB,WAAxB,CAAyCP,KAAzC,MACD,C,uCAEgBA,K,CAAe,CAC9B,KAAKb,YAAL,CAAkBI,KAAlB,CAAwBiB,YAAxB,CAA0CR,KAA1C,MACD,C,qCAEcA,K,CAAe,CAC5B,KAAKb,YAAL,CAAkBI,KAAlB,CAAwBkB,UAAxB,CAAwCT,KAAxC,MACD,C,wCAEiBA,K,CAAe,CAC/B,KAAKb,YAAL,CAAkBI,KAAlB,CAAwBmB,aAAxB,CAA2CV,KAA3C,MACD,C,0CAEmBA,K,CAAe,CACjC,KAAKS,UAAL,CAAkBT,KAAlB,CACA,KAAKU,aAAL,CAAqBV,KAArB,CACD,C,4CAEqBA,K,CAAe,CACnC,KAAKO,WAAL,CAAmBP,KAAnB,CACA,KAAKQ,YAAL,CAAoBR,KAApB,CACD,C,qCAYcA,K,CAAe,CAC5B,KAAKT,KAAL,CAAWC,UAAX,CAAwBQ,KAAxB,CACD,C,mCAEYA,K,CAAY,CACvB,KAAKT,KAAL,CAAWE,QAAX,CAAsBO,KAAtB,CACD,C,oCAEaA,K,CAAe,CAC3B,KAAKT,KAAL,CAAWoB,SAAX,CAAuBX,KAAvB,CACD,C,qCAEcA,K,CAAe,CAC5B,KAAKT,KAAL,CAAWqB,UAAX,CAAwBZ,KAAxB,CACD,C,uEAGYf,Y","file":"RCTTextInput.js","sourcesContent":["/**\n * @providesModule RCTTextInput\n * @flow\n */\n\nimport type RCTBridge from \"RCTBridge\";\n\nimport RCTView from \"RCTView\";\nimport { defaultFontStack, defaultFontSize } from \"RCTSharedTextValues\";\nimport CustomElement from \"CustomElement\";\n\n@CustomElement(\"rct-text-input\")\nclass RCTTextInput extends RCTView {\n  inputElement: HTMLInputElement;\n\n  constructor(bridge: RCTBridge) {\n    super(bridge);\n\n    this.inputElement = document.createElement(\"input\");\n    this.inputElement.type = \"text\";\n\n    Object.assign(this.inputElement.style, {\n      fontFamily: defaultFontStack,\n      fontSize: `${defaultFontSize}px`,\n      backgroundColor: \"transparent\",\n      border: \"0px solid\"\n    });\n\n    const shadowRoot = this.attachShadow({ mode: \"open\" });\n    shadowRoot.appendChild(this.inputElement);\n    shadowRoot.appendChild(document.createElement(\"slot\"));\n  }\n\n  set borderRadius(value: number) {\n    // $FlowFixMe\n    super.borderRadius = value;\n    this.inputElement.style.borderRadius = `${value}px`;\n  }\n\n  get frame(): Frame {\n    return super.frame;\n  }\n\n  set padding(value: number) {\n    this.inputElement.style.padding = `${value}px`;\n  }\n\n  set paddingLeft(value: number) {\n    this.inputElement.style.paddingLeft = `${value}px`;\n  }\n\n  set paddingRight(value: number) {\n    this.inputElement.style.paddingRight = `${value}px`;\n  }\n\n  set paddingTop(value: number) {\n    this.inputElement.style.paddingTop = `${value}px`;\n  }\n\n  set paddingBottom(value: number) {\n    this.inputElement.style.paddingBottom = `${value}px`;\n  }\n\n  set paddingVertical(value: number) {\n    this.paddingTop = value;\n    this.paddingBottom = value;\n  }\n\n  set paddingHorizontal(value: number) {\n    this.paddingLeft = value;\n    this.paddingRight = value;\n  }\n\n  set frame(value: Frame) {\n    super.frame = value;\n    Object.assign(this.inputElement.style, {\n      top: `${value.top}px`,\n      left: `${value.left}px`,\n      width: `${value.width}px`,\n      height: `${value.height}px`\n    });\n  }\n\n  set fontFamily(value: string) {\n    this.style.fontFamily = value;\n  }\n\n  set fontSize(value: any) {\n    this.style.fontSize = value;\n  }\n\n  set textAlign(value: string) {\n    this.style.textAlign = value;\n  }\n\n  set fontWeight(value: string) {\n    this.style.fontWeight = value;\n  }\n}\n\nexport default RCTTextInput;\n"]}