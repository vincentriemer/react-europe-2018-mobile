{"version":3,"sources":["../../../ReactDom/views/Text/RCTTextManager.js"],"names":["module","exports","RCTViewManager","RCTShadowText","RCT_EXPORT_VIEW_PROP","RCT_EXPORT_MIRRORED_PROP","RCT_EXPORT_DIRECT_VIEW_PROPS","RCTTextManager","bridge","view","value","fontFamily","fontSize","selectable","color","textAlign","style","padding","stringValue","paddingLeft","paddingRight","paddingTop","paddingBottom","fontWeight","fontStyle","letterSpacing","textDecorationLine","textDecorationStyle","textDecorationColor","lineHeight","isHighlighted","numberOfLines"],"mappings":"ipBAKA,mD,mDACA,kC,+CAEA,oD,8DACA,+C,myBAEAA,OAAOC,OAAP,CAAkB,yeACVC,cADU,kGAEVC,aAFU,eAKdC,oBALc,CAQZF,cARY,CAKdE,oBALc,CAMdC,wBANc,CAQZH,cARY,CAMdG,wBANc,CAOdC,4BAPc,CAQZJ,cARY,CAOdI,4BAPc,CAWVC,cAXU,OAUf,iCAAkB,gBAAlB,CAVe,OAoBbF,yBAAyB,YAAzB,CAAuC,QAAvC,CApBa,OAyBbA,yBAAyB,UAAzB,CAAqC,QAArC,CAzBa,OA8BbD,qBAAqB,YAArB,CAAmC,MAAnC,CA9Ba,OAmCbA,qBAAqB,OAArB,CAA8B,QAA9B,CAnCa,OAwCbC,yBAAyB,WAAzB,CAAsC,QAAtC,CAxCa,OA6CbD,qBAAqB,SAArB,CAAgC,QAAhC,CA7Ca,OAkDbA,qBAAqB,mBAArB,CAA0C,QAA1C,CAlDa,OAyDbA,qBAAqB,iBAArB,CAAwC,QAAxC,CAzDa,QAgEbC,yBAAyB,YAAzB,CAAuC,QAAvC,CAhEa,QAqEbA,yBAAyB,WAAzB,CAAsC,QAAtC,CArEa,QA0EbA,yBAAyB,eAAzB,CAA0C,QAA1C,CA1Ea,QA+EbD,qBAAqB,oBAArB,CAA2C,QAA3C,CA/Ea,QAoFbA,qBAAqB,qBAArB,CAA4C,QAA5C,CApFa,QAyFbA,qBAAqB,qBAArB,CAA4C,OAA5C,CAzFa,QA8FbC,yBAAyB,YAAzB,CAAuC,QAAvC,CA9Fa,QAmGbD,qBAAqB,eAArB,CAAsC,SAAtC,CAnGa,QAwGbC,yBAAyB,eAAzB,CAA0C,QAA1C,CAxGa,6YAYE,CACd,MAAO,uBAAY,KAAKG,MAAjB,CAAP,CACD,CAda,+CAgBc,CAC1B,MAAO,IAAIL,cAAJ,EAAP,CACD,CAlBa,oDAqBAM,IArBA,CAqBWC,KArBX,CAqB0B,CACtCD,KAAKE,UAAL,CAAkBD,KAAlB,CACD,CAvBa,gDA0BFD,IA1BE,CA0BSC,KA1BT,CA0BwB,CACpCD,KAAKG,QAAL,CAAgBF,KAAhB,CACD,CA5Ba,oDA+BAD,IA/BA,CA+BeC,KA/Bf,CA+B+B,CAC3CD,KAAKI,UAAL,CAAkBH,KAAlB,CACD,CAjCa,0CAoCLD,IApCK,CAoCUC,KApCV,CAoCyB,CACrCD,KAAKK,KAAL,CAAaJ,KAAb,CACD,CAtCa,kDAyCDD,IAzCC,CAyCcC,KAzCd,CAyC6B,CACzCD,KAAKM,SAAL,CAAiBL,KAAjB,CACD,CA3Ca,8CA8CHD,IA9CG,CA8CYC,KA9CZ,CA8C2B,CACvCD,KAAKO,KAAL,CAAWC,OAAX,CAAwBP,KAAxB,MACD,CAhDa,kEAmDOD,IAnDP,CAmDsBC,KAnDtB,CAmDqC,CACjD,GAAMQ,aAAiBR,KAAjB,KAAN,CACAD,KAAKO,KAAL,CAAWG,WAAX,CAAyBD,WAAzB,CACAT,KAAKO,KAAL,CAAWI,YAAX,CAA0BF,WAA1B,CACD,CAvDa,8DA0DKT,IA1DL,CA0DoBC,KA1DpB,CA0DmC,CAC/C,GAAMQ,aAAiBR,KAAjB,KAAN,CACAD,KAAKO,KAAL,CAAWK,UAAX,CAAwBH,WAAxB,CACAT,KAAKO,KAAL,CAAWM,aAAX,CAA2BJ,WAA3B,CACD,CA9Da,oDAiEAT,IAjEA,CAiEeC,KAjEf,CAiE8B,CAC1CD,KAAKc,UAAL,CAAkBb,KAAlB,CACD,CAnEa,kDAsEDD,IAtEC,CAsEcC,KAtEd,CAsE6B,CACzCD,KAAKe,SAAL,CAAiBd,KAAjB,CACD,CAxEa,0DA2EGD,IA3EH,CA2EkBC,KA3ElB,CA2EiC,CAC7CD,KAAKgB,aAAL,CAAqBf,KAArB,CACD,CA7Ea,oEAgFQD,IAhFR,CAgFuBC,KAhFvB,CAgFsC,CAClDD,KAAKiB,kBAAL,CAA0BhB,KAA1B,CACD,CAlFa,sEAqFSD,IArFT,CAqFwBC,KArFxB,CAqFuC,CACnDD,KAAKkB,mBAAL,CAA2BjB,KAA3B,CACD,CAvFa,sEA0FSD,IA1FT,CA0FwBC,KA1FxB,CA0FuC,CACnDD,KAAKmB,mBAAL,CAA2BlB,KAA3B,CACD,CA5Fa,oDA+FAD,IA/FA,CA+FeC,KA/Ff,CA+F8B,CAC1CD,KAAKoB,UAAL,CAAkBnB,KAAlB,CACD,CAjGa,0DAoGGD,IApGH,CAoGkBC,KApGlB,CAoGmC,CAC/CD,KAAKqB,aAAL,CAAqBpB,KAArB,CACD,CAtGa,0DAyGGD,IAzGH,CAyGkBC,KAzGlB,CAyGkC,CAC9CD,KAAKsB,aAAL,CAAqBrB,KAArB,CACD,CA3Ga,4BAWaR,cAXb,gsFA8GTK,cA9GS,4DAAD,EAAjB","file":"RCTTextManager.js","sourcesContent":["/**\n * @providesModule RCTTextManager\n * @flow\n */\n\nimport RCTBridge, { RCT_EXPORT_MODULE } from \"RCTBridge\";\nimport RCTText from \"RCTText\";\n\nimport _RCTViewManager from \"RCTViewManager\";\nimport _RCTShadowText from \"RCTShadowText\";\n\nmodule.exports = (async () => {\n  const RCTViewManager = await _RCTViewManager;\n  const RCTShadowText = await _RCTShadowText;\n\n  const {\n    RCT_EXPORT_VIEW_PROP,\n    RCT_EXPORT_MIRRORED_PROP,\n    RCT_EXPORT_DIRECT_VIEW_PROPS\n  } = RCTViewManager;\n\n  @RCT_EXPORT_MODULE(\"RCTTextManager\")\n  class RCTTextManager extends RCTViewManager {\n    view(): RCTText {\n      return new RCTText(this.bridge);\n    }\n\n    shadowView(): RCTShadowText {\n      return new RCTShadowText();\n    }\n\n    @RCT_EXPORT_MIRRORED_PROP(\"fontFamily\", \"string\")\n    setFontFamily(view: any, value: string) {\n      view.fontFamily = value;\n    }\n\n    @RCT_EXPORT_MIRRORED_PROP(\"fontSize\", \"number\")\n    setFontSize(view: any, value: number) {\n      view.fontSize = value;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"selectable\", \"bool\")\n    setSelectable(view: RCTText, value: boolean) {\n      view.selectable = value;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"color\", \"number\")\n    setColor(view: RCTText, value: number) {\n      view.color = value;\n    }\n\n    @RCT_EXPORT_MIRRORED_PROP(\"textAlign\", \"string\")\n    setTextAlign(view: RCTText, value: string) {\n      view.textAlign = value;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"padding\", \"number\")\n    setPadding(view: RCTText, value: number) {\n      view.style.padding = `${value}px`;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"paddingHorizontal\", \"number\")\n    setPaddingHorizontal(view: RCTText, value: number) {\n      const stringValue = `${value}px`;\n      view.style.paddingLeft = stringValue;\n      view.style.paddingRight = stringValue;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"paddingVertical\", \"number\")\n    setPaddingVertical(view: RCTText, value: number) {\n      const stringValue = `${value}px`;\n      view.style.paddingTop = stringValue;\n      view.style.paddingBottom = stringValue;\n    }\n\n    @RCT_EXPORT_MIRRORED_PROP(\"fontWeight\", \"string\")\n    setFontWeight(view: RCTText, value: string) {\n      view.fontWeight = value;\n    }\n\n    @RCT_EXPORT_MIRRORED_PROP(\"fontStyle\", \"string\")\n    setFontStyle(view: RCTText, value: string) {\n      view.fontStyle = value;\n    }\n\n    @RCT_EXPORT_MIRRORED_PROP(\"letterSpacing\", \"number\")\n    setLetterSpacing(view: RCTText, value: number) {\n      view.letterSpacing = value;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"textDecorationLine\", \"string\")\n    setTextDecorationLine(view: RCTText, value: string) {\n      view.textDecorationLine = value;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"textDecorationStyle\", \"string\")\n    setTextDecorationStyle(view: RCTText, value: string) {\n      view.textDecorationStyle = value;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"textDecorationColor\", \"color\")\n    setTextDecorationColor(view: RCTText, value: number) {\n      view.textDecorationColor = value;\n    }\n\n    @RCT_EXPORT_MIRRORED_PROP(\"lineHeight\", \"number\")\n    setLineHeight(view: RCTText, value: number) {\n      view.lineHeight = value;\n    }\n\n    @RCT_EXPORT_VIEW_PROP(\"isHighlighted\", \"boolean\")\n    setIsHighlighted(view: RCTText, value: ?boolean) {\n      view.isHighlighted = value;\n    }\n\n    @RCT_EXPORT_MIRRORED_PROP(\"numberOfLines\", \"number\")\n    setNumberOfLines(view: RCTText, value: ?number) {\n      view.numberOfLines = value;\n    }\n  }\n\n  return RCTTextManager;\n})();\n"]}