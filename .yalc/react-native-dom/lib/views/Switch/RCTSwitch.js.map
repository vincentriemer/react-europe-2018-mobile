{"version":3,"sources":["../../../ReactDom/views/Switch/RCTSwitch.js"],"names":["RCTSwitch","bridge","style","contain","platformSwitch","addEventListener","handleChange","bind","childShadowRoot","childContainer","attachShadow","mode","appendChild","value","detail","onChange","width","height","disabled","tintColor","onTintColor","thumbTintColor"],"mappings":"2wBAKA,sC,gDAEA,0D,2DACA,0E,2EACA,gD,mJAGMA,U,OADL,4BAAc,YAAd,C,2EAOC,mBAAYC,MAAZ,CAA+B,uKACvBA,MADuB,GAG7B,MAAKC,KAAL,CAAWC,OAAX,CAAqB,QAArB,CAEA,MAAKC,cAAL,CAAsB,8BAAtB,CACA,MAAKA,cAAL,CAAoBC,gBAApB,CACE,UADF,CAEE,MAAKC,YAAL,CAAkBC,IAAlB,OAFF,EAKA,MAAKC,eAAL,CAAuB,MAAKC,cAAL,CAAoBC,YAApB,CAAiC,CAAEC,KAAM,MAAR,CAAjC,CAAvB,CACA,MAAKH,eAAL,CAAqBI,WAArB,CAAiC,MAAKR,cAAtC,EAZ6B,aAa9B,C,0FAEmE,IAA3CS,MAA2C,MAArDC,MAAqD,CAA3CD,KAA2C,CAClE,GAAI,KAAKE,QAAT,CAAmB,CACjB,KAAKA,QAAL,CAAc,CAAEF,WAAF,CAAd,EACD,CACF,C,iCAEkB,CACjB,gHACD,C,kBAESA,K,CAAc,CACtB,oGAAcA,KAAd,OADsB,GAGdG,MAHc,CAGIH,KAHJ,CAGdG,KAHc,CAGPC,MAHO,CAGIJ,KAHJ,CAGPI,MAHO,CAItB,KAAKb,cAAL,CAAoBY,KAApB,CAA4BA,KAA5B,CACA,KAAKZ,cAAL,CAAoBa,MAApB,CAA6BA,MAA7B,CACD,C,oCAEoC,IAAxBJ,MAAwB,2DAAP,KAAO,CACnC,uGAAiBA,KAAjB,OACA,KAAKT,cAAL,CAAoBc,QAApB,CAA+BL,KAA/B,CACD,C,iCAEiC,IAAxBA,MAAwB,2DAAP,KAAO,CAChC,KAAKT,cAAL,CAAoBS,KAApB,CAA4BA,KAA5B,CACD,C,oCAEaA,K,CAAe,CAC3B,KAAKT,cAAL,CAAoBe,SAApB,CAAgCN,KAAhC,CACD,C,sCAEeA,K,CAAe,CAC7B,KAAKT,cAAL,CAAoBgB,WAApB,CAAkCP,KAAlC,CACD,C,yCAEkBA,K,CAAe,CAChC,KAAKT,cAAL,CAAoBiB,cAApB,CAAqCR,KAArC,CACD,C,oEAGYb,S","file":"RCTSwitch.js","sourcesContent":["/**\n * @providesModule RCTSwitch\n * @flow\n */\n\nimport RCTView from \"RCTView\";\nimport type RCTBridge from \"RCTBridge\";\nimport CustomElement from \"CustomElement\";\nimport ColorArrayFromHexARGB from \"ColorArrayFromHexARGB\";\nimport PlatformSwitch from \"PlatformSwitch\";\n\n@CustomElement(\"rct-switch\")\nclass RCTSwitch extends RCTView {\n  bridge: RCTBridge;\n  onChange: ?(payload: { value: boolean }) => void;\n  childShadowRoot: ShadowRoot;\n  platformSwitch: PlatformSwitch;\n\n  constructor(bridge: RCTBridge) {\n    super(bridge);\n\n    this.style.contain = \"strict\";\n\n    this.platformSwitch = new PlatformSwitch();\n    this.platformSwitch.addEventListener(\n      \"onchange\",\n      this.handleChange.bind(this)\n    );\n\n    this.childShadowRoot = this.childContainer.attachShadow({ mode: \"open\" });\n    this.childShadowRoot.appendChild(this.platformSwitch);\n  }\n\n  handleChange({ detail: { value } }: { detail: { value: boolean } }) {\n    if (this.onChange) {\n      this.onChange({ value });\n    }\n  }\n\n  get frame(): Frame {\n    return super.frame;\n  }\n\n  set frame(value: Frame) {\n    super.frame = value;\n\n    const { width, height } = value;\n    this.platformSwitch.width = width;\n    this.platformSwitch.height = height;\n  }\n\n  set disabled(value: boolean = false) {\n    super.disabled = value;\n    this.platformSwitch.disabled = value;\n  }\n\n  set value(value: boolean = false) {\n    this.platformSwitch.value = value;\n  }\n\n  set tintColor(value: string) {\n    this.platformSwitch.tintColor = value;\n  }\n\n  set onTintColor(value: string) {\n    this.platformSwitch.onTintColor = value;\n  }\n\n  set thumbTintColor(value: string) {\n    this.platformSwitch.thumbTintColor = value;\n  }\n}\n\nexport default RCTSwitch;\n"]}