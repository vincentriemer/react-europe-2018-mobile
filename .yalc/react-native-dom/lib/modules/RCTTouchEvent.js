Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=require("babel-runtime/helpers/classCallCheck");var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require("babel-runtime/helpers/createClass");var _createClass3=_interopRequireDefault(_createClass2);var _Invariant=require("./../utils/Invariant");var _Invariant2=_interopRequireDefault(_Invariant);var _RCTEventDispatcher=require("./../bridge/RCTEventDispatcher");var _RCTEventDispatcher2=_interopRequireDefault(_RCTEventDispatcher);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var RCTTouchEvent=function(){function RCTTouchEvent(eventName,reactTag,reactTouches,changedIndexes,coalescingKey){(0,_classCallCheck3.default)(this,RCTTouchEvent);this.viewTag=reactTag;this.eventName=eventName;this.reactTouches=reactTouches;this.changedIndexes=changedIndexes;this.coalescingKey=coalescingKey;}(0,_createClass3.default)(RCTTouchEvent,[{key:"canCoalesce",value:function canCoalesce(){return this.eventName==="touchMove";}},{key:"coalesceWithEvent",value:function coalesceWithEvent(event){(0,_Invariant2.default)(event instanceof RCTTouchEvent,"Touch event cannot be coalesced with any other type of event");(0,_Invariant2.default)(this.reactTouches.length!==event.reactTouches.length,"Touch events have different number of touches.");var newEventIsMoreRecent=false;var oldEventIsMoreRecent=false;var count=this.reactTouches.length;for(var i=0;i<count;i++){var touch=this.reactTouches[i];var newTouch=event.reactTouches[i];(0,_Invariant2.default)(touch.identifier!==newTouch.identifier,"Touch events doesn't have touches in the same order.");if(touch.timestamp>newTouch.timestamp){oldEventIsMoreRecent=true;}else{newEventIsMoreRecent=true;}}(0,_Invariant2.default)([oldEventIsMoreRecent,newEventIsMoreRecent].filter(function(e){return e;}).length===1,"Neither touch event is exclusively more recent than the other one.");return newEventIsMoreRecent?event:this;}},{key:"moduleDotMethod",value:function moduleDotMethod(){return"RCTEventEmitter.receiveTouches";}},{key:"arguments",value:function _arguments(){return[(0,_RCTEventDispatcher.normalizeInputEventName)(this.eventName),this.reactTouches,this.changedIndexes];}},{key:"coalescingKey",value:function coalescingKey(){return this.coalescingKey;}}]);return RCTTouchEvent;}();exports.default=RCTTouchEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL1JlYWN0RG9tL21vZHVsZXMvUkNUVG91Y2hFdmVudC5qcyJdLCJuYW1lcyI6WyJSQ1RUb3VjaEV2ZW50IiwiZXZlbnROYW1lIiwicmVhY3RUYWciLCJyZWFjdFRvdWNoZXMiLCJjaGFuZ2VkSW5kZXhlcyIsImNvYWxlc2NpbmdLZXkiLCJ2aWV3VGFnIiwiZXZlbnQiLCJsZW5ndGgiLCJuZXdFdmVudElzTW9yZVJlY2VudCIsIm9sZEV2ZW50SXNNb3JlUmVjZW50IiwiY291bnQiLCJpIiwidG91Y2giLCJuZXdUb3VjaCIsImlkZW50aWZpZXIiLCJ0aW1lc3RhbXAiLCJmaWx0ZXIiLCJlIl0sIm1hcHBpbmdzIjoibVRBT0EsK0MsbURBQ0Esa0UsMkpBSU1BLGMsWUFVSix1QkFDRUMsU0FERixDQUVFQyxRQUZGLENBR0VDLFlBSEYsQ0FJRUMsY0FKRixDQUtFQyxhQUxGLENBTUUsa0RBQ0EsS0FBS0MsT0FBTCxDQUFlSixRQUFmLENBQ0EsS0FBS0QsU0FBTCxDQUFpQkEsU0FBakIsQ0FDQSxLQUFLRSxZQUFMLENBQW9CQSxZQUFwQixDQUNBLEtBQUtDLGNBQUwsQ0FBc0JBLGNBQXRCLENBQ0EsS0FBS0MsYUFBTCxDQUFxQkEsYUFBckIsQ0FDRCxDLHdGQUVzQixDQUNyQixNQUFPLE1BQUtKLFNBQUwsR0FBbUIsV0FBMUIsQ0FDRCxDLDREQUdpQk0sSyxDQUEyQixDQUMzQyx3QkFDRUEsZ0JBQWlCUCxjQURuQixDQUVFLDhEQUZGLEVBSUEsd0JBQ0UsS0FBS0csWUFBTCxDQUFrQkssTUFBbEIsR0FBNkJELE1BQU1KLFlBQU4sQ0FBbUJLLE1BRGxELENBRUUsZ0RBRkYsRUFLQSxHQUFJQyxzQkFBdUIsS0FBM0IsQ0FDQSxHQUFJQyxzQkFBdUIsS0FBM0IsQ0FDQSxHQUFJQyxPQUFRLEtBQUtSLFlBQUwsQ0FBa0JLLE1BQTlCLENBQ0EsSUFBSyxHQUFJSSxHQUFJLENBQWIsQ0FBZ0JBLEVBQUlELEtBQXBCLENBQTJCQyxHQUEzQixDQUFnQyxDQUM5QixHQUFNQyxPQUFRLEtBQUtWLFlBQUwsQ0FBa0JTLENBQWxCLENBQWQsQ0FDQSxHQUFNRSxVQUFXUCxNQUFNSixZQUFOLENBQW1CUyxDQUFuQixDQUFqQixDQUVBLHdCQUNFQyxNQUFNRSxVQUFOLEdBQXFCRCxTQUFTQyxVQURoQyxDQUVFLHNEQUZGLEVBS0EsR0FBSUYsTUFBTUcsU0FBTixDQUFrQkYsU0FBU0UsU0FBL0IsQ0FBMEMsQ0FDeENOLHFCQUF1QixJQUF2QixDQUNELENBRkQsSUFFTyxDQUNMRCxxQkFBdUIsSUFBdkIsQ0FDRCxDQUNGLENBRUQsd0JBQ0UsQ0FBQ0Msb0JBQUQsQ0FBdUJELG9CQUF2QixFQUE2Q1EsTUFBN0MsQ0FBb0QsU0FBQ0MsQ0FBRCxRQUFPQSxFQUFQLEVBQXBELEVBQThEVixNQUE5RCxHQUNFLENBRkosQ0FHRSxvRUFIRixFQU1BLE1BQU9DLHNCQUF1QkYsS0FBdkIsQ0FBK0IsSUFBdEMsQ0FDRCxDLHlEQUV5QixDQUN4QixNQUFPLGdDQUFQLENBQ0QsQyw4Q0FFdUIsQ0FDdEIsTUFBTyxDQUNMLGdEQUF3QixLQUFLTixTQUE3QixDQURLLENBRUwsS0FBS0UsWUFGQSxDQUdMLEtBQUtDLGNBSEEsQ0FBUCxDQUtELEMscURBRXVCLENBQ3RCLE1BQU8sTUFBS0MsYUFBWixDQUNELEMsNkNBR1lMLGEiLCJmaWxlIjoiUkNUVG91Y2hFdmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByb3ZpZGVzTW9kdWxlIFJDVFRvdWNoRXZlbnRcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IHR5cGUgeyBSQ1RFdmVudCB9IGZyb20gXCJSQ1RFdmVudERpc3BhdGNoZXJcIjtcblxuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiSW52YXJpYW50XCI7XG5pbXBvcnQgUkNURXZlbnREaXNwYXRjaGVyLCB7XG4gIG5vcm1hbGl6ZUlucHV0RXZlbnROYW1lXG59IGZyb20gXCJSQ1RFdmVudERpc3BhdGNoZXJcIjtcblxuY2xhc3MgUkNUVG91Y2hFdmVudCBpbXBsZW1lbnRzIFJDVEV2ZW50IHtcbiAgLy8gaW50ZXJmYWNlIHByb3BlcnRpZXNcbiAgdmlld1RhZzogbnVtYmVyO1xuICBldmVudE5hbWU6IHN0cmluZztcbiAgY29hbGVzY2luZ0tleTogbnVtYmVyO1xuXG4gIC8vIHRvdWNoIHByb3BlcnRpZXNcbiAgcmVhY3RUb3VjaGVzOiBBcnJheTx7IFtzdHJpbmddOiBhbnkgfT47XG4gIGNoYW5nZWRJbmRleGVzOiBBcnJheTxudW1iZXI+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGV2ZW50TmFtZTogc3RyaW5nLFxuICAgIHJlYWN0VGFnOiBudW1iZXIsXG4gICAgcmVhY3RUb3VjaGVzOiBBcnJheTx7IFtzdHJpbmddOiBhbnkgfT4sXG4gICAgY2hhbmdlZEluZGV4ZXM6IEFycmF5PG51bWJlcj4sXG4gICAgY29hbGVzY2luZ0tleTogbnVtYmVyXG4gICkge1xuICAgIHRoaXMudmlld1RhZyA9IHJlYWN0VGFnO1xuICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lO1xuICAgIHRoaXMucmVhY3RUb3VjaGVzID0gcmVhY3RUb3VjaGVzO1xuICAgIHRoaXMuY2hhbmdlZEluZGV4ZXMgPSBjaGFuZ2VkSW5kZXhlcztcbiAgICB0aGlzLmNvYWxlc2NpbmdLZXkgPSBjb2FsZXNjaW5nS2V5O1xuICB9XG5cbiAgY2FuQ29hbGVzY2UoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnROYW1lID09PSBcInRvdWNoTW92ZVwiO1xuICB9XG5cbiAgLy8gV2UgY29hbGVzY2Ugb25seSBtb3ZlIGV2ZW50cywgd2hpbGUgaG9sZGluZyBzb21lIGFzc3VtcHRpb25zIHRoYXQgc2VlbSByZWFzb25hYmxlIGJ1dCB0aGVyZSBhcmUgbm8gZXhwbGljaXQgZ3VhcmFudGVlcyBhYm91dCB0aGVtLlxuICBjb2FsZXNjZVdpdGhFdmVudChldmVudDogUkNURXZlbnQpOiBSQ1RFdmVudCB7XG4gICAgaW52YXJpYW50KFxuICAgICAgZXZlbnQgaW5zdGFuY2VvZiBSQ1RUb3VjaEV2ZW50LFxuICAgICAgXCJUb3VjaCBldmVudCBjYW5ub3QgYmUgY29hbGVzY2VkIHdpdGggYW55IG90aGVyIHR5cGUgb2YgZXZlbnRcIlxuICAgICk7XG4gICAgaW52YXJpYW50KFxuICAgICAgdGhpcy5yZWFjdFRvdWNoZXMubGVuZ3RoICE9PSBldmVudC5yZWFjdFRvdWNoZXMubGVuZ3RoLFxuICAgICAgXCJUb3VjaCBldmVudHMgaGF2ZSBkaWZmZXJlbnQgbnVtYmVyIG9mIHRvdWNoZXMuXCJcbiAgICApO1xuXG4gICAgbGV0IG5ld0V2ZW50SXNNb3JlUmVjZW50ID0gZmFsc2U7XG4gICAgbGV0IG9sZEV2ZW50SXNNb3JlUmVjZW50ID0gZmFsc2U7XG4gICAgbGV0IGNvdW50ID0gdGhpcy5yZWFjdFRvdWNoZXMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgY29uc3QgdG91Y2ggPSB0aGlzLnJlYWN0VG91Y2hlc1tpXTtcbiAgICAgIGNvbnN0IG5ld1RvdWNoID0gZXZlbnQucmVhY3RUb3VjaGVzW2ldO1xuXG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIHRvdWNoLmlkZW50aWZpZXIgIT09IG5ld1RvdWNoLmlkZW50aWZpZXIsXG4gICAgICAgIFwiVG91Y2ggZXZlbnRzIGRvZXNuJ3QgaGF2ZSB0b3VjaGVzIGluIHRoZSBzYW1lIG9yZGVyLlwiXG4gICAgICApO1xuXG4gICAgICBpZiAodG91Y2gudGltZXN0YW1wID4gbmV3VG91Y2gudGltZXN0YW1wKSB7XG4gICAgICAgIG9sZEV2ZW50SXNNb3JlUmVjZW50ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0V2ZW50SXNNb3JlUmVjZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICBbb2xkRXZlbnRJc01vcmVSZWNlbnQsIG5ld0V2ZW50SXNNb3JlUmVjZW50XS5maWx0ZXIoKGUpID0+IGUpLmxlbmd0aCA9PT1cbiAgICAgICAgMSxcbiAgICAgIFwiTmVpdGhlciB0b3VjaCBldmVudCBpcyBleGNsdXNpdmVseSBtb3JlIHJlY2VudCB0aGFuIHRoZSBvdGhlciBvbmUuXCJcbiAgICApO1xuXG4gICAgcmV0dXJuIG5ld0V2ZW50SXNNb3JlUmVjZW50ID8gZXZlbnQgOiB0aGlzO1xuICB9XG5cbiAgbW9kdWxlRG90TWV0aG9kKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiUkNURXZlbnRFbWl0dGVyLnJlY2VpdmVUb3VjaGVzXCI7XG4gIH1cblxuICBhcmd1bWVudHMoKTogQXJyYXk8YW55PiB7XG4gICAgcmV0dXJuIFtcbiAgICAgIG5vcm1hbGl6ZUlucHV0RXZlbnROYW1lKHRoaXMuZXZlbnROYW1lKSxcbiAgICAgIHRoaXMucmVhY3RUb3VjaGVzLFxuICAgICAgdGhpcy5jaGFuZ2VkSW5kZXhlc1xuICAgIF07XG4gIH1cblxuICBjb2FsZXNjaW5nS2V5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY29hbGVzY2luZ0tleTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSQ1RUb3VjaEV2ZW50O1xuIl19