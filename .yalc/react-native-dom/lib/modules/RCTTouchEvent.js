Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=require("babel-runtime/helpers/classCallCheck");var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require("babel-runtime/helpers/createClass");var _createClass3=_interopRequireDefault(_createClass2);var _Invariant=require("./../utils/Invariant");var _Invariant2=_interopRequireDefault(_Invariant);var _RCTEventDispatcher=require("./../bridge/RCTEventDispatcher");var _RCTEventDispatcher2=_interopRequireDefault(_RCTEventDispatcher);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var RCTTouchEvent=function(){function RCTTouchEvent(eventName,reactTag,reactTouches,changedIndexes,coalescingKey){(0,_classCallCheck3.default)(this,RCTTouchEvent);this.viewTag=reactTag;this.eventName=eventName;this.reactTouches=reactTouches;this.changedIndexes=changedIndexes;this.coalescingKey=coalescingKey;}(0,_createClass3.default)(RCTTouchEvent,[{key:"canCoalesce",value:function canCoalesce(){return this.eventName==="touchMove";}},{key:"coalesceWithEvent",value:function coalesceWithEvent(event){(0,_Invariant2.default)(event instanceof RCTTouchEvent,"Touch event cannot be coalesced with any other type of event");(0,_Invariant2.default)(this.reactTouches.length!==event.reactTouches.length,"Touch events have different number of touches.");var newEventIsMoreRecent=false;var oldEventIsMoreRecent=false;var count=this.reactTouches.length;for(var i=0;i<count;i++){var touch=this.reactTouches[i];var newTouch=event.reactTouches[i];(0,_Invariant2.default)(touch.identifier!==newTouch.identifier,"Touch events doesn't have touches in the same order.");if(touch.timestamp>newTouch.timestamp){oldEventIsMoreRecent=true;}else{newEventIsMoreRecent=true;}}(0,_Invariant2.default)([oldEventIsMoreRecent,newEventIsMoreRecent].filter(function(e){return e;}).length===1,"Neither touch event is exclusively more recent than the other one.");return newEventIsMoreRecent?event:this;}},{key:"moduleDotMethod",value:function moduleDotMethod(){return"RCTEventEmitter.receiveTouches";}},{key:"arguments",value:function _arguments(){return[(0,_RCTEventDispatcher.normalizeInputEventName)(this.eventName),this.reactTouches,this.changedIndexes];}},{key:"coalescingKey",value:function coalescingKey(){return this.coalescingKey;}}]);return RCTTouchEvent;}();exports.default=RCTTouchEvent;
//# sourceMappingURL=RCTTouchEvent.js.map