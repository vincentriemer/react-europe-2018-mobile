var _slicedToArray2=require("babel-runtime/helpers/slicedToArray");var _slicedToArray3=_interopRequireDefault(_slicedToArray2);var _regenerator=require("babel-runtime/regenerator");var _regenerator2=_interopRequireDefault(_regenerator);var _toConsumableArray2=require("babel-runtime/helpers/toConsumableArray");var _toConsumableArray3=_interopRequireDefault(_toConsumableArray2);var _classCallCheck2=require("babel-runtime/helpers/classCallCheck");var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require("babel-runtime/helpers/createClass");var _createClass3=_interopRequireDefault(_createClass2);var _this8=this;var _Invariant=require("./../utils/Invariant");var _Invariant2=_interopRequireDefault(_Invariant);var _RCTBridge=require("./../bridge/RCTBridge");var _RCTBridge2=_interopRequireDefault(_RCTBridge);var _UIView=require("./../base/UIView");var _UIView2=_interopRequireDefault(_UIView);var _RCTView=require("./../views/RCTView");var _RCTView2=_interopRequireDefault(_RCTView);var _RCTRootView=require("./../bridge/RCTRootView");var _RCTRootView2=_interopRequireDefault(_RCTRootView);var _RCTDeviceInfo=require("./RCTDeviceInfo");var _RCTDeviceInfo2=_interopRequireDefault(_RCTDeviceInfo);var _RCTLayoutAnimationManager=require("./LayoutAnimation/RCTLayoutAnimationManager");var _RCTLayoutAnimationManager2=_interopRequireDefault(_RCTLayoutAnimationManager);var _RCTUIManagerObserver=require("./RCTUIManagerObserver");var _RCTUIManagerObserver2=_interopRequireDefault(_RCTUIManagerObserver);var _RCTComponentData=require("./../views/RCTComponentData");var _RCTComponentData2=_interopRequireDefault(_RCTComponentData);var _CanUse=require("./../utils/CanUse");var _CanUse2=_interopRequireDefault(_CanUse);var _Instrument=require("./../utils/Instrument");var _Instrument2=_interopRequireDefault(_Instrument);var _RCTShadowView2=require("./../views/RCTShadowView");var _RCTShadowView3=_interopRequireDefault(_RCTShadowView2);var _RCTRootShadowView2=require("./../views/RCTRootShadowView");var _RCTRootShadowView3=_interopRequireDefault(_RCTRootShadowView2);var _RCTShadowText2=require("./../views/Text/RCTShadowText");var _RCTShadowText3=_interopRequireDefault(_RCTShadowText2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _applyDecoratedDescriptor(target,property,decorators,descriptor,context){var desc={};Object['ke'+'ys'](descriptor).forEach(function(key){desc[key]=descriptor[key];});desc.enumerable=!!desc.enumerable;desc.configurable=!!desc.configurable;if('value'in desc||desc.initializer){desc.writable=true;}desc=decorators.slice().reverse().reduce(function(desc,decorator){return decorator(target,property,desc)||desc;},desc);if(context&&desc.initializer!==void 0){desc.value=desc.initializer?desc.initializer.call(context):void 0;desc.initializer=undefined;}if(desc.initializer===void 0){Object['define'+'Property'](target,property,desc);desc=null;}return desc;}var rootTagCounter=0;function byPosition(a,b){if(a===b)return 0;if(!a.compareDocumentPosition){return b.sourceIndex-a.sourceIndex;}if(a.compareDocumentPosition(b)&2){return-1;}return 1;}function reactViewFromPoint(topView,x,y){var element,elements=[];var old_visibility=[];while(true){element=document.elementFromPoint(x,y);if(!element||element===document.documentElement){break;}elements.push(element);old_visibility.push(element.style.visibility);element.style.visibility="hidden";}for(var k=0;k<elements.length;k++){elements[k].style.visibility=old_visibility[k];}elements=elements.filter(function(elem){return topView.contains(elem)&&elem instanceof _UIView2.default;});elements.sort(byPosition);return elements[0];}module.exports=function _callee(){var _dec,_dec2,_dec3,_dec4,_dec5,_dec6,_dec7,_dec8,_dec9,_dec10,_dec11,_dec12,_dec13,_dec14,_class,_desc,_value,_class2;var RCTShadowView,RCTRootShadowView,RCTShadowText,RCTUIManager;return _regenerator2.default.async(function _callee$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return _regenerator2.default.awrap(_RCTShadowView3.default);case 2:RCTShadowView=_context4.sent;_context4.next=5;return _regenerator2.default.awrap(_RCTRootShadowView3.default);case 5:RCTRootShadowView=_context4.sent;_context4.next=8;return _regenerator2.default.awrap(_RCTShadowText3.default);case 8:RCTShadowText=_context4.sent;RCTUIManager=(_dec=(0,_RCTBridge.RCT_EXPORT_MODULE)("RCTUIManager"),_dec2=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec3=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec4=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec5=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec6=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec7=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec8=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec9=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec10=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec11=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec12=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec13=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec14=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec(_class=(_class2=function(){function RCTUIManager(bridge){var _this=this;(0,_classCallCheck3.default)(this,RCTUIManager);this.pendingUIBlocks=[];this.didUpdateDimensions=function(_ref){var _ref$window=_ref.window,width=_ref$window.width,height=_ref$window.height,scale=_ref$window.scale;var _loop=function _loop(rootViewTag){var rootView=_this.viewRegistry.get(rootViewTag);(0,_Invariant2.default)(rootView,"Root view must exist");(0,_Invariant2.default)(rootView instanceof _RCTRootView2.default,"View must be an RCTRootView");_this.addUIBlock(function(){_this.setAvailableSize({width:width,height:height},scale,rootView);});};for(var _iterator=_this.rootViewTags,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[typeof Symbol==="function"?typeof Symbol==="function"?typeof Symbol==="function"?Symbol.iterator:"@@iterator":"@@iterator":"@@iterator"]();;){var _ref2;if(_isArray){if(_i>=_iterator.length)break;_ref2=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref2=_i.value;}var rootViewTag=_ref2;_loop(rootViewTag);}_this.requestTick();};this.bridge=bridge;this.shadowViewRegistry=new Map();this.viewRegistry=new Map();this.rootViewTags=new Set();this.componentDataByName=new Map();this.bridge.moduleClasses.forEach(function(moduleClass){if(moduleClass.__isViewManager){var componentData=new _RCTComponentData2.default(moduleClass,_this.bridge);_this.componentDataByName.set(componentData.name,componentData);}});this.layoutAnimationManager=new _RCTLayoutAnimationManager2.default(this);this.observerCoordinator=new _RCTUIManagerObserver2.default();(0,_Invariant2.default)(this.bridge,"Bridge must be set");var deviceInfoModule=this.bridge.modulesByName["DeviceInfo"];deviceInfoModule.addListener("didUpdateDimensions",this.didUpdateDimensions);}(0,_createClass3.default)(RCTUIManager,[{key:"registerRootView",value:function registerRootView(rootView){var reactTag=rootView.reactTag;var availableSize=rootView.availableSize;this.viewRegistry.set(reactTag,rootView);var shadowView=new RCTRootShadowView();shadowView.availableSize=availableSize;shadowView.reactTag=reactTag;shadowView.viewName=rootView.constructor.name;var pixelRatio=this.bridge.deviceInfo.getDevicePixelRatio();shadowView.updatePointScaleFactor(pixelRatio);this.shadowViewRegistry.set(reactTag,shadowView);this.rootViewTags.add(reactTag);}},{key:"setAvailableSize",value:function setAvailableSize(size,scale,rootView){var _this2=this;this.pendingUIBlocks.push(function(){var reactTag=rootView.reactTag;var rootShadowView=_this2.shadowViewRegistry.get(reactTag);if(rootShadowView&&rootShadowView instanceof RCTRootShadowView)rootShadowView.updateAvailableSize(size)&&rootShadowView.updatePointScaleFactor(scale);});}},{key:"setLocalDataForView",value:function setLocalDataForView(localData,view){var tag=view.reactTag;var shadowView=this.shadowViewRegistry.get(tag);if(shadowView==null){console.warn("Could not locate shadow view with tag "+tag+", this is probably caused by a temporary inconsistency between native views and shadow views.");return;}shadowView.localData=localData;this.requestTick();}},{key:"rootViewForReactTag",value:function rootViewForReactTag(reactTag,completion){}},{key:"viewNameForReactTag",value:function viewNameForReactTag(reactTag){var shadowView=this.shadowViewRegistry.get(reactTag);(0,_Invariant2.default)(shadowView,"No such shadowView with id "+reactTag);return shadowView.viewName;}},{key:"purgeView",value:function purgeView(reactTag){var shadowView=this.shadowViewRegistry.get(reactTag);if(shadowView){this.shadowViewRegistry.delete(reactTag);shadowView.purge();}if(this.layoutAnimationManager.isPending()){var view=this.viewRegistry.get(reactTag);if(view&&view.reactSuperview){view.reactSuperview.removeReactSubview(view);}this.layoutAnimationManager.queueRemovedNode(reactTag);}else{this.addUIBlock(function(uiManager,viewRegistry){var view=viewRegistry.get(reactTag);viewRegistry.delete(reactTag);if(view){view.purge();}});}}},{key:"frame",value:function frame(){var _this3=this;return _regenerator2.default.async(function frame$(_context){while(1){switch(_context.prev=_context.next){case 0:this.observerCoordinator.uiManagerWillPerformLayout(this);this.rootViewTags.forEach(function(rootTag){var rootShadowView=_this3.shadowViewRegistry.get(rootTag);if(rootShadowView!=null&&rootShadowView.isDirty){(0,_Invariant2.default)(rootShadowView instanceof RCTRootShadowView,"attempting to recalculate from shadowView that isn't root");var layoutChanges=(0,_Instrument2.default)("⚛️ Layout",function(){return rootShadowView.recalculateLayout();});if(_this3.layoutAnimationManager.isPending()){_this3.layoutAnimationManager.addLayoutChanges(layoutChanges);}else{_this3.applyLayoutChanges(layoutChanges);}}});this.observerCoordinator.uiManagerDidPerformLayout(this);if(this.layoutAnimationManager.isPending()){(0,_Instrument2.default)("⚛️ LayoutAnimation Construction",function(){_this3.layoutAnimationManager.applyLayoutChanges();});}this.observerCoordinator.uiManagerWillFlushBlocks(this);(0,_Instrument2.default)("⚛️ Style",function(){if(_this3.pendingUIBlocks.length>0){var uiBlocks=[].concat((0,_toConsumableArray3.default)(_this3.pendingUIBlocks));_this3.pendingUIBlocks=[];uiBlocks.forEach(function(block){block.call(null,_this3,_this3.viewRegistry);});_this3.requestTick();}});case 6:case"end":return _context.stop();}}},null,this);}},{key:"shouldContinue",value:function shouldContinue(){return this.pendingUIBlocks.length!==0;}},{key:"requestTick",value:function requestTick(){var _this4=this;this.rootViewTags.forEach(function(rootViewTag){var rootView=_this4.viewRegistry.get(rootViewTag);(0,_Invariant2.default)(rootView&&rootView instanceof _RCTRootView2.default,"RootView (with ID "+rootViewTag+") does not exist");rootView.requestTick();});}},{key:"applyLayoutChanges",value:function applyLayoutChanges(layoutChanges){var _this5=this;layoutChanges.forEach(function(layoutChange){var reactTag=layoutChange.reactTag,layout=layoutChange.layout;_this5.addUIBlock(function(uiManager,viewRegistry){var view=viewRegistry.get(reactTag);(0,_Invariant2.default)(view,"View with reactTag "+reactTag+" does not exist");view.frame=layout;});});}},{key:"measure",value:function measure(reactTag,callbackId){var _this6=this;return new Promise(function(resolve,reject){_this6.addUIBlock(function(){var shadowView=_this6.shadowViewRegistry.get(reactTag);var view=_this6.viewRegistry.get(reactTag);if(!shadowView||!shadowView.measurement){return;}var _shadowView$measureGl=shadowView.measureGlobal(),globalX=_shadowView$measureGl.globalX,globalY=_shadowView$measureGl.globalY;(0,_Invariant2.default)(shadowView.previousLayout,"Shadow view has no previous layout");var _shadowView$previousL=shadowView.previousLayout,left=_shadowView$previousL.left,top=_shadowView$previousL.top,width=_shadowView$previousL.width,height=_shadowView$previousL.height;if(callbackId!=null){_this6.bridge.callbackFromId(callbackId)(left,top,width,height,globalX,globalY);}else{resolve({left:left,top:top,width:width,height:height,globalX:globalX,globalY:globalY});}});});}},{key:"measureInWindow",value:function measureInWindow(reactTag,callbackId){var result,globalX,globalY,width,height;return _regenerator2.default.async(function measureInWindow$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regenerator2.default.awrap(this.measure(reactTag));case 2:result=_context2.sent;(0,_Invariant2.default)(result,"No measurement available for view "+reactTag);globalX=result.globalX,globalY=result.globalY,width=result.width,height=result.height;this.bridge.callbackFromId(callbackId)(globalX,globalY,width,height);case 6:case"end":return _context2.stop();}}},null,this);}},{key:"setJSResponder",value:function setJSResponder(reactTag){this.jsResponder=this.viewRegistry.get(reactTag);if(!this.jsResponder){console.error("Invalid view set to be the JS responder - tag "+reactTag);}}},{key:"clearJSResponder",value:function clearJSResponder(){this.jsResponder=null;}},{key:"configureNextLayoutAnimation",value:function configureNextLayoutAnimation(config,onAnimationDidEnd){if(!_CanUse2.default.matchMedia||!window.matchMedia("(prefers-reduced-motion: reduce)").matches){this.layoutAnimationManager.configureNext(config,this.bridge.callbackFromId(onAnimationDidEnd));}}},{key:"addUIBlock",value:function addUIBlock(block){if(block==null||this.viewRegistry==null){return;}this.pendingUIBlocks.push(block);}},{key:"prependUIBlock",value:function prependUIBlock(block){if(!block){return;}this.pendingUIBlocks.unshift(block);}},{key:"setChildren",value:function setChildren(containerTag,reactTags){RCTUIManager.RCTSetChildren(containerTag,reactTags,this.shadowViewRegistry);this.addUIBlock(function(uiManager,viewRegistry){RCTUIManager.RCTSetChildren(containerTag,reactTags,viewRegistry);});}},{key:"createView",value:function createView(reactTag,viewName,rootTag,props){var componentData=this.componentDataByName.get(viewName);(0,_Invariant2.default)(componentData,"No component found for view with name "+viewName);var shadowView=componentData.createShadowView(reactTag);if(shadowView!=null){shadowView.viewName=viewName;componentData.setPropsForShadowView(props,shadowView);this.shadowViewRegistry.set(reactTag,shadowView);}var backgroundColor=shadowView.backgroundColor;var view=componentData.createView(reactTag);if(view!=null){componentData.setPropsForView(props,view);if(typeof view.setBackgroundColor==="function"){view.setBackgroundColor(backgroundColor);}this.viewRegistry.set(reactTag,view);}}},{key:"updateView",value:function updateView(reactTag,viewName,updatedProps){var componentData=this.componentDataByName.get(viewName);(0,_Invariant2.default)(componentData,"No component found for view with name "+viewName);var shadowView=this.shadowViewRegistry.get(reactTag);if(shadowView){componentData.setPropsForShadowView(updatedProps,shadowView);}var view=this.viewRegistry.get(reactTag);if(view){componentData.setPropsForView(updatedProps,view);}}},{key:"synchronouslyUpdateView",value:function synchronouslyUpdateView(reactTag,viewName,props){var componentData=this.componentDataByName.get(viewName);(0,_Invariant2.default)(componentData,"No component found for view with name "+viewName);var view=this.viewRegistry.get(reactTag);if(view){componentData.setPropsForView(props,view);}}},{key:"replaceExistingNonRootView",value:function replaceExistingNonRootView(reactTag,newReactTag){var shadowView=this.shadowViewRegistry.get(reactTag);(0,_Invariant2.default)(shadowView,"shadowView (for ID "+reactTag+") not found");var superShadowView=shadowView.reactSuperview;(0,_Invariant2.default)(superShadowView,"shadowView super (of ID "+reactTag+") not found");var indexOfView=superShadowView.reactSubviews.indexOf(shadowView);(0,_Invariant2.default)(indexOfView!==-1,"View's superview does't claim it as subview");var removeAtIndices=[indexOfView];var addTags=[newReactTag];this.manageChildren(superShadowView.reactTag,null,null,addTags,removeAtIndices,removeAtIndices);}},{key:"findSubviewIn",value:function findSubviewIn(reactTag,atPoint,callbackId){var _atPoint,x,y,view,target,measurement,globalX,globalY,width,height;return _regenerator2.default.async(function findSubviewIn$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_atPoint=(0,_slicedToArray3.default)(atPoint,2),x=_atPoint[0],y=_atPoint[1];view=this.viewRegistry.get(reactTag);(0,_Invariant2.default)(view,"No such view with tag "+reactTag);target=reactViewFromPoint(view,x,y);if(!(!target||!(target instanceof _UIView2.default))){_context3.next=6;break;}return _context3.abrupt("return");case 6:_context3.next=8;return _regenerator2.default.awrap(this.measure(target.reactTag));case 8:measurement=_context3.sent;(0,_Invariant2.default)(measurement,"View with tag "+target.reactTag+" has no measurement");globalX=measurement.globalX,globalY=measurement.globalY,width=measurement.width,height=measurement.height;this.bridge.callbackFromId(callbackId)(target.reactTag,globalX,globalY,width,height);case 12:case"end":return _context3.stop();}}},null,this);}},{key:"manageChildren",value:function manageChildren(tag,moveFrom,moveTo,addChildTags,addAtIndices,removeFrom){var _this7=this;var viewToManage=this.viewRegistry.get(tag);var shadowViewToManage=this.shadowViewRegistry.get(tag);if(!viewToManage||!shadowViewToManage)return;var numToMove=!moveFrom?0:moveFrom.length;var viewsToAdd=[];var indicesToRemove=[];var tagsToRemove=[];var tagsToDelete=[];if(moveFrom&&moveTo){for(var i=0;i<moveFrom.length;i++){var moveFromIndex=moveFrom[i];var tagToMove=viewToManage.reactSubviews[moveFromIndex].reactTag;viewsToAdd[i]={tag:tagToMove,index:moveTo[i]};indicesToRemove[i]=moveFromIndex;tagsToRemove[i]=tagToMove;}}if(addChildTags){for(var _i2=0;_i2<addChildTags.length;_i2++){var viewTagToAdd=addChildTags[_i2];var indexToAddAt=addAtIndices[_i2];viewsToAdd[numToMove+_i2]={tag:viewTagToAdd,index:indexToAddAt};}}if(removeFrom){for(var _i3=0;_i3<removeFrom.length;_i3++){var indexToRemove=removeFrom[_i3];if(viewToManage.reactSubviews[indexToRemove]){var tagToRemove=viewToManage.reactSubviews[indexToRemove].reactTag;indicesToRemove[numToMove+_i3]=indexToRemove;tagsToRemove[numToMove+_i3]=tagToRemove;tagsToDelete[_i3]=tagToRemove;}}}viewsToAdd.sort(function(a,b){return a.index-b.index;});indicesToRemove.sort(function(a,b){return a-b;});var _loop2=function _loop2(_i4){var childIndex=indicesToRemove[_i4];var shadowSubView=undefined;if(shadowViewToManage instanceof RCTShadowText){shadowSubView=shadowViewToManage.textChildren[childIndex];}else{shadowSubView=shadowViewToManage.reactSubviews[childIndex];}if(shadowSubView)shadowViewToManage.removeReactSubview(shadowSubView);if(!_this7.layoutAnimationManager.isPending()){_this7.addUIBlock(function(uiManager,viewRegistry){var subView=viewToManage.reactSubviews[childIndex];viewToManage.removeReactSubview(subView);});}};for(var _i4=indicesToRemove.length-1;_i4>=0;_i4--){_loop2(_i4);}var _loop3=function _loop3(_i5){var _viewsToAdd$_i=viewsToAdd[_i5],tagToAdd=_viewsToAdd$_i.tag,indexToAdd=_viewsToAdd$_i.index;var shadowSubView=_this7.shadowViewRegistry.get(tagToAdd);if(shadowSubView){shadowViewToManage.insertReactSubviewAtIndex(shadowSubView,indexToAdd);shadowSubView.makeDirty();}_this7.addUIBlock(function(uiManager,viewRegistry){var subView=viewRegistry.get(tagToAdd);(0,_Invariant2.default)(subView,"Attempted to insert subview with tag "+tagToAdd+" that does not exist");viewToManage.insertReactSubviewAtIndex(subView,indexToAdd);});};for(var _i5=0;_i5<viewsToAdd.length;_i5++){_loop3(_i5);}for(var _i6=0;_i6<tagsToDelete.length;_i6++){this.purgeView(tagsToDelete[_i6]);}}},{key:"focus",value:function focus(reactTag){}},{key:"blur",value:function blur(reactTag){}},{key:"constantsToExport",value:function constantsToExport(){var constants={};var bubblingEvents={};var directEvents={};for(var _iterator2=this.componentDataByName,_isArray2=Array.isArray(_iterator2),_i7=0,_iterator2=_isArray2?_iterator2:_iterator2[typeof Symbol==="function"?typeof Symbol==="function"?Symbol.iterator:"@@iterator":"@@iterator"]();;){var _ref5;if(_isArray2){if(_i7>=_iterator2.length)break;_ref5=_iterator2[_i7++];}else{_i7=_iterator2.next();if(_i7.done)break;_ref5=_i7.value;}var _ref3=_ref5;var _ref4=(0,_slicedToArray3.default)(_ref3,2);var name=_ref4[0];var componentData=_ref4[1];var moduleConstants={};var bubblingEventTypes={};var directEventTypes={};moduleConstants.Manager=(0,_RCTBridge.bridgeModuleNameForClass)(componentData.managerClass);var viewConfig=componentData.viewConfig;moduleConstants.NativeProps=viewConfig.propTypes;moduleConstants.baseModuleName=viewConfig.baseModuleName;for(var _iterator3=viewConfig.directEvents,_isArray3=Array.isArray(_iterator3),_i8=0,_iterator3=_isArray3?_iterator3:_iterator3[typeof Symbol==="function"?typeof Symbol==="function"?Symbol.iterator:"@@iterator":"@@iterator"]();;){var _ref6;if(_isArray3){if(_i8>=_iterator3.length)break;_ref6=_iterator3[_i8++];}else{_i8=_iterator3.next();if(_i8.done)break;_ref6=_i8.value;}var eventName=_ref6;if(!directEvents[eventName]){directEvents[eventName]={registrationName:"on"+eventName.substring(3)};}directEventTypes[eventName]=directEvents[eventName];}moduleConstants.directEventTypes=directEventTypes;for(var _iterator4=viewConfig.bubblingEvents,_isArray4=Array.isArray(_iterator4),_i9=0,_iterator4=_isArray4?_iterator4:_iterator4[typeof Symbol==="function"?typeof Symbol==="function"?Symbol.iterator:"@@iterator":"@@iterator"]();;){var _ref7;if(_isArray4){if(_i9>=_iterator4.length)break;_ref7=_iterator4[_i9++];}else{_i9=_iterator4.next();if(_i9.done)break;_ref7=_i9.value;}var _eventName=_ref7;if(!bubblingEvents[_eventName]){var bubbleName="on"+_eventName.substring(3);bubblingEvents[_eventName]={phasedRegistrationNames:{bubbled:bubbleName,captured:bubbleName+"Capture"}};}bubblingEventTypes[_eventName]=bubblingEvents[_eventName];}moduleConstants.bubblingEventTypes=bubblingEventTypes;constants[name]=moduleConstants;}return constants;}},{key:"allocateRootTag",get:function get(){var tag=rootTagCounter;rootTagCounter++;return tag*10+1;}}],[{key:"RCTSetChildren",value:function RCTSetChildren(containerTag,reactTags,registry){var container=registry.get(containerTag);var index=0;reactTags.forEach(function(reactTag){var view=registry.get(reactTag);(0,_Invariant2.default)(container,"No container view found with id: "+containerTag);(0,_Invariant2.default)(view,"No view found with id: "+reactTag);container.insertReactSubviewAtIndex(view,index++);});}}]);return RCTUIManager;}(),(_applyDecoratedDescriptor(_class2.prototype,"measure",[_dec2],Object.getOwnPropertyDescriptor(_class2.prototype,"measure"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"measureInWindow",[_dec3],Object.getOwnPropertyDescriptor(_class2.prototype,"measureInWindow"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"setJSResponder",[_dec4],Object.getOwnPropertyDescriptor(_class2.prototype,"setJSResponder"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"clearJSResponder",[_dec5],Object.getOwnPropertyDescriptor(_class2.prototype,"clearJSResponder"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"configureNextLayoutAnimation",[_dec6],Object.getOwnPropertyDescriptor(_class2.prototype,"configureNextLayoutAnimation"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"setChildren",[_dec7],Object.getOwnPropertyDescriptor(_class2.prototype,"setChildren"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"createView",[_dec8],Object.getOwnPropertyDescriptor(_class2.prototype,"createView"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"updateView",[_dec9],Object.getOwnPropertyDescriptor(_class2.prototype,"updateView"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"replaceExistingNonRootView",[_dec10],Object.getOwnPropertyDescriptor(_class2.prototype,"replaceExistingNonRootView"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"findSubviewIn",[_dec11],Object.getOwnPropertyDescriptor(_class2.prototype,"findSubviewIn"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"manageChildren",[_dec12],Object.getOwnPropertyDescriptor(_class2.prototype,"manageChildren"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"focus",[_dec13],Object.getOwnPropertyDescriptor(_class2.prototype,"focus"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"blur",[_dec14],Object.getOwnPropertyDescriptor(_class2.prototype,"blur"),_class2.prototype)),_class2))||_class);return _context4.abrupt("return",RCTUIManager);case 11:case"end":return _context4.stop();}}},null,_this8);}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL1JlYWN0RG9tL21vZHVsZXMvUkNUVUlNYW5hZ2VyLmpzIl0sIm5hbWVzIjpbInJvb3RUYWdDb3VudGVyIiwiYnlQb3NpdGlvbiIsImEiLCJiIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJzb3VyY2VJbmRleCIsInJlYWN0Vmlld0Zyb21Qb2ludCIsInRvcFZpZXciLCJ4IiwieSIsImVsZW1lbnQiLCJlbGVtZW50cyIsIm9sZF92aXNpYmlsaXR5IiwiZG9jdW1lbnQiLCJlbGVtZW50RnJvbVBvaW50IiwiZG9jdW1lbnRFbGVtZW50IiwicHVzaCIsInN0eWxlIiwidmlzaWJpbGl0eSIsImsiLCJsZW5ndGgiLCJmaWx0ZXIiLCJlbGVtIiwiY29udGFpbnMiLCJzb3J0IiwibW9kdWxlIiwiZXhwb3J0cyIsIlJDVFNoYWRvd1ZpZXciLCJSQ1RSb290U2hhZG93VmlldyIsIlJDVFNoYWRvd1RleHQiLCJSQ1RVSU1hbmFnZXIiLCJicmlkZ2UiLCJwZW5kaW5nVUlCbG9ja3MiLCJkaWRVcGRhdGVEaW1lbnNpb25zIiwid2luZG93Iiwid2lkdGgiLCJoZWlnaHQiLCJzY2FsZSIsInJvb3RWaWV3VGFnIiwicm9vdFZpZXciLCJ2aWV3UmVnaXN0cnkiLCJnZXQiLCJhZGRVSUJsb2NrIiwic2V0QXZhaWxhYmxlU2l6ZSIsInJvb3RWaWV3VGFncyIsInJlcXVlc3RUaWNrIiwic2hhZG93Vmlld1JlZ2lzdHJ5IiwiTWFwIiwiU2V0IiwiY29tcG9uZW50RGF0YUJ5TmFtZSIsIm1vZHVsZUNsYXNzZXMiLCJmb3JFYWNoIiwibW9kdWxlQ2xhc3MiLCJfX2lzVmlld01hbmFnZXIiLCJjb21wb25lbnREYXRhIiwic2V0IiwibmFtZSIsImxheW91dEFuaW1hdGlvbk1hbmFnZXIiLCJvYnNlcnZlckNvb3JkaW5hdG9yIiwiZGV2aWNlSW5mb01vZHVsZSIsIm1vZHVsZXNCeU5hbWUiLCJhZGRMaXN0ZW5lciIsInJlYWN0VGFnIiwiYXZhaWxhYmxlU2l6ZSIsInNoYWRvd1ZpZXciLCJ2aWV3TmFtZSIsImNvbnN0cnVjdG9yIiwicGl4ZWxSYXRpbyIsImRldmljZUluZm8iLCJnZXREZXZpY2VQaXhlbFJhdGlvIiwidXBkYXRlUG9pbnRTY2FsZUZhY3RvciIsImFkZCIsInNpemUiLCJyb290U2hhZG93VmlldyIsInVwZGF0ZUF2YWlsYWJsZVNpemUiLCJsb2NhbERhdGEiLCJ2aWV3IiwidGFnIiwiY29uc29sZSIsIndhcm4iLCJjb21wbGV0aW9uIiwiZGVsZXRlIiwicHVyZ2UiLCJpc1BlbmRpbmciLCJyZWFjdFN1cGVydmlldyIsInJlbW92ZVJlYWN0U3VidmlldyIsInF1ZXVlUmVtb3ZlZE5vZGUiLCJ1aU1hbmFnZXIiLCJ1aU1hbmFnZXJXaWxsUGVyZm9ybUxheW91dCIsInJvb3RUYWciLCJpc0RpcnR5IiwibGF5b3V0Q2hhbmdlcyIsInJlY2FsY3VsYXRlTGF5b3V0IiwiYWRkTGF5b3V0Q2hhbmdlcyIsImFwcGx5TGF5b3V0Q2hhbmdlcyIsInVpTWFuYWdlckRpZFBlcmZvcm1MYXlvdXQiLCJ1aU1hbmFnZXJXaWxsRmx1c2hCbG9ja3MiLCJ1aUJsb2NrcyIsImJsb2NrIiwiY2FsbCIsImxheW91dENoYW5nZSIsImxheW91dCIsImZyYW1lIiwiY2FsbGJhY2tJZCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwibWVhc3VyZW1lbnQiLCJtZWFzdXJlR2xvYmFsIiwiZ2xvYmFsWCIsImdsb2JhbFkiLCJwcmV2aW91c0xheW91dCIsImxlZnQiLCJ0b3AiLCJjYWxsYmFja0Zyb21JZCIsIm1lYXN1cmUiLCJyZXN1bHQiLCJqc1Jlc3BvbmRlciIsImVycm9yIiwiY29uZmlnIiwib25BbmltYXRpb25EaWRFbmQiLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsImNvbmZpZ3VyZU5leHQiLCJ1bnNoaWZ0IiwiY29udGFpbmVyVGFnIiwicmVhY3RUYWdzIiwiUkNUU2V0Q2hpbGRyZW4iLCJwcm9wcyIsImNyZWF0ZVNoYWRvd1ZpZXciLCJzZXRQcm9wc0ZvclNoYWRvd1ZpZXciLCJiYWNrZ3JvdW5kQ29sb3IiLCJjcmVhdGVWaWV3Iiwic2V0UHJvcHNGb3JWaWV3Iiwic2V0QmFja2dyb3VuZENvbG9yIiwidXBkYXRlZFByb3BzIiwibmV3UmVhY3RUYWciLCJzdXBlclNoYWRvd1ZpZXciLCJpbmRleE9mVmlldyIsInJlYWN0U3Vidmlld3MiLCJpbmRleE9mIiwicmVtb3ZlQXRJbmRpY2VzIiwiYWRkVGFncyIsIm1hbmFnZUNoaWxkcmVuIiwiYXRQb2ludCIsInRhcmdldCIsIm1vdmVGcm9tIiwibW92ZVRvIiwiYWRkQ2hpbGRUYWdzIiwiYWRkQXRJbmRpY2VzIiwicmVtb3ZlRnJvbSIsInZpZXdUb01hbmFnZSIsInNoYWRvd1ZpZXdUb01hbmFnZSIsIm51bVRvTW92ZSIsInZpZXdzVG9BZGQiLCJpbmRpY2VzVG9SZW1vdmUiLCJ0YWdzVG9SZW1vdmUiLCJ0YWdzVG9EZWxldGUiLCJpIiwibW92ZUZyb21JbmRleCIsInRhZ1RvTW92ZSIsImluZGV4Iiwidmlld1RhZ1RvQWRkIiwiaW5kZXhUb0FkZEF0IiwiaW5kZXhUb1JlbW92ZSIsInRhZ1RvUmVtb3ZlIiwiY2hpbGRJbmRleCIsInNoYWRvd1N1YlZpZXciLCJ1bmRlZmluZWQiLCJ0ZXh0Q2hpbGRyZW4iLCJzdWJWaWV3IiwidGFnVG9BZGQiLCJpbmRleFRvQWRkIiwiaW5zZXJ0UmVhY3RTdWJ2aWV3QXRJbmRleCIsIm1ha2VEaXJ0eSIsInB1cmdlVmlldyIsImNvbnN0YW50cyIsImJ1YmJsaW5nRXZlbnRzIiwiZGlyZWN0RXZlbnRzIiwibW9kdWxlQ29uc3RhbnRzIiwiYnViYmxpbmdFdmVudFR5cGVzIiwiZGlyZWN0RXZlbnRUeXBlcyIsIk1hbmFnZXIiLCJtYW5hZ2VyQ2xhc3MiLCJ2aWV3Q29uZmlnIiwiTmF0aXZlUHJvcHMiLCJwcm9wVHlwZXMiLCJiYXNlTW9kdWxlTmFtZSIsImV2ZW50TmFtZSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJzdWJzdHJpbmciLCJidWJibGVOYW1lIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMi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VUFBZixDQUFMLENBQWdDLENBQzlCLEdBQU1HLGlCQUFrQkgsV0FBVUUsU0FBVixDQUFvQixDQUFwQixDQUF4QixDQUNBYixlQUFlVyxVQUFmLEVBQTRCLENBQzFCSSx3QkFBeUIsQ0FDdkJDLFFBQVNGLFVBRGMsQ0FFdkJHLFNBQWFILFVBQWIsVUFGdUIsQ0FEQyxDQUE1QixDQU1ELENBQ0RYLG1CQUFtQlEsVUFBbkIsRUFBZ0NYLGVBQWVXLFVBQWYsQ0FBaEMsQ0FDRCxDQUNEVCxnQkFBZ0JDLGtCQUFoQixDQUFxQ0Esa0JBQXJDLENBRUFKLFVBQVV4SCxJQUFWLEVBQWtCMkgsZUFBbEIsQ0FDRCxDQUVELE1BQU9ILFVBQVAsQ0FDRCxDQTFyQmEsMkNBc0VnQixDQUM1QixHQUFNbkcsS0FBTTdFLGNBQVosQ0FDQUEsaUJBQ0EsTUFBTzZFLEtBQU0sRUFBTixDQUFXLENBQWxCLENBQ0QsQ0ExRWEsd0RBb1daZ0QsWUFwV1ksQ0FxV1pDLFNBcldZLENBc1dacUUsUUF0V1ksQ0F1V1osQ0FDQSxHQUFNQyxXQUFZRCxTQUFTMUosR0FBVCxDQUFhb0YsWUFBYixDQUFsQixDQUNBLEdBQUlvQyxPQUFRLENBQVosQ0FDQW5DLFVBQVUzRSxPQUFWLENBQWtCLFNBQUNXLFFBQUQsQ0FBYyxDQUM5QixHQUFNYyxNQUFPdUgsU0FBUzFKLEdBQVQsQ0FBYXFCLFFBQWIsQ0FBYixDQUNBLHdCQUNFc0ksU0FERixxQ0FFc0N2RSxZQUZ0QyxFQUlBLHdCQUFVakQsSUFBViwyQkFBMENkLFFBQTFDLEVBQ0FzSSxVQUFVdkIseUJBQVYsQ0FBb0NqRyxJQUFwQyxDQUEwQ3FGLE9BQTFDLEVBQ0QsQ0FSRCxFQVNELENBblhhLGlqRUE2ckJUbkksWUE3ckJTLDhEQUFELEVBQWpCIiwiZmlsZSI6IlJDVFVJTWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByb3ZpZGVzTW9kdWxlIFJDVFVJTWFuYWdlclxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJJbnZhcmlhbnRcIjtcbmltcG9ydCBSQ1RCcmlkZ2UsIHtcbiAgUkNUX0VYUE9SVF9NT0RVTEUsXG4gIFJDVF9FWFBPUlRfTUVUSE9ELFxuICBicmlkZ2VNb2R1bGVOYW1lRm9yQ2xhc3MsXG4gIFJDVEZ1bmN0aW9uVHlwZU5vcm1hbFxufSBmcm9tIFwiUkNUQnJpZGdlXCI7XG5pbXBvcnQgVUlWaWV3IGZyb20gXCJVSVZpZXdcIjtcbmltcG9ydCBSQ1RWaWV3IGZyb20gXCJSQ1RWaWV3XCI7XG5pbXBvcnQgUkNUUm9vdFZpZXcgZnJvbSBcIlJDVFJvb3RWaWV3XCI7XG5pbXBvcnQgUkNURGV2aWNlSW5mbyBmcm9tIFwiUkNURGV2aWNlSW5mb1wiO1xuaW1wb3J0IFJDVExheW91dEFuaW1hdGlvbk1hbmFnZXIgZnJvbSBcIlJDVExheW91dEFuaW1hdGlvbk1hbmFnZXJcIjtcbmltcG9ydCBSQ1RVSU1hbmFnZXJPYnNlcnZlckNvb3JkaW5hdG9yIGZyb20gXCJSQ1RVSU1hbmFnZXJPYnNlcnZlckNvb3JkaW5hdG9yXCI7XG5pbXBvcnQgUkNUQ29tcG9uZW50RGF0YSBmcm9tIFwiUkNUQ29tcG9uZW50RGF0YVwiO1xuaW1wb3J0IENhblVzZSBmcm9tIFwiQ2FuVXNlXCI7XG5pbXBvcnQgaW5zdHJ1bWVudCBmcm9tIFwiSW5zdHJ1bWVudFwiO1xuXG5pbXBvcnQgdHlwZSB7IFJDVENvbXBvbmVudCB9IGZyb20gXCJSQ1RDb21wb25lbnRcIjtcbmltcG9ydCB0eXBlIHsgTGF5b3V0Q2hhbmdlIH0gZnJvbSBcIlJDVFNoYWRvd1ZpZXdcIjtcbmltcG9ydCB0eXBlIHsgTGF5b3V0QW5pbWF0aW9uQ29uZmlnIH0gZnJvbSBcIlJDVExheW91dEFuaW1hdGlvbk1hbmFnZXJcIjtcblxuaW1wb3J0IF9SQ1RTaGFkb3dWaWV3IGZyb20gXCJSQ1RTaGFkb3dWaWV3XCI7XG5pbXBvcnQgX1JDVFJvb3RTaGFkb3dWaWV3IGZyb20gXCJSQ1RSb290U2hhZG93Vmlld1wiO1xuaW1wb3J0IF9SQ1RTaGFkb3dUZXh0IGZyb20gXCJSQ1RTaGFkb3dUZXh0XCI7XG5cbnR5cGUgU2hhZG93VmlldyA9IGFueTtcbnR5cGUgU2l6ZSA9IHsgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfTtcblxubGV0IHJvb3RUYWdDb3VudGVyID0gMDtcblxuZnVuY3Rpb24gYnlQb3NpdGlvbihhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gMDtcbiAgaWYgKCFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIGIuc291cmNlSW5kZXggLSBhLnNvdXJjZUluZGV4O1xuICB9XG4gIGlmIChhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpICYgMikge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICByZXR1cm4gMTtcbn1cblxuLy8gRG9lc24ndCBnZXQgbW9yZSBoYWNreSB0aGFuIHRoaXMgZm9sa3NcbmZ1bmN0aW9uIHJlYWN0Vmlld0Zyb21Qb2ludCh0b3BWaWV3OiBVSVZpZXcsIHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gIHZhciBlbGVtZW50LFxuICAgIGVsZW1lbnRzID0gW107XG4gIHZhciBvbGRfdmlzaWJpbGl0eSA9IFtdO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGVsZW1lbnQgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHgsIHkpO1xuICAgIGlmICghZWxlbWVudCB8fCBlbGVtZW50ID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBlbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgIG9sZF92aXNpYmlsaXR5LnB1c2goZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5KTtcbiAgICBlbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiOyAvLyBUZW1wb3JhcmlseSBoaWRlIHRoZSBlbGVtZW50ICh3aXRob3V0IGNoYW5naW5nIHRoZSBsYXlvdXQpXG4gIH1cbiAgZm9yICh2YXIgayA9IDA7IGsgPCBlbGVtZW50cy5sZW5ndGg7IGsrKykge1xuICAgIGVsZW1lbnRzW2tdLnN0eWxlLnZpc2liaWxpdHkgPSBvbGRfdmlzaWJpbGl0eVtrXTtcbiAgfVxuXG4gIGVsZW1lbnRzID0gZWxlbWVudHMuZmlsdGVyKFxuICAgIChlbGVtKSA9PiB0b3BWaWV3LmNvbnRhaW5zKGVsZW0pICYmIGVsZW0gaW5zdGFuY2VvZiBVSVZpZXdcbiAgKTtcbiAgZWxlbWVudHMuc29ydChieVBvc2l0aW9uKTtcblxuICByZXR1cm4gZWxlbWVudHNbMF07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gKGFzeW5jICgpID0+IHtcbiAgY29uc3QgUkNUU2hhZG93VmlldyA9IGF3YWl0IF9SQ1RTaGFkb3dWaWV3O1xuICBjb25zdCBSQ1RSb290U2hhZG93VmlldyA9IGF3YWl0IF9SQ1RSb290U2hhZG93VmlldztcbiAgY29uc3QgUkNUU2hhZG93VGV4dCA9IGF3YWl0IF9SQ1RTaGFkb3dUZXh0O1xuXG4gIHR5cGUgVUlCbG9jayA9IChSQ1RVSU1hbmFnZXIsIE1hcDxudW1iZXIsIFVJVmlldz4pID0+IHZvaWQ7XG5cbiAgQFJDVF9FWFBPUlRfTU9EVUxFKFwiUkNUVUlNYW5hZ2VyXCIpXG4gIGNsYXNzIFJDVFVJTWFuYWdlciB7XG4gICAgYnJpZGdlOiBSQ1RCcmlkZ2U7XG4gICAgcm9vdFZpZXdUYWdzOiBTZXQ8bnVtYmVyPjtcbiAgICBzaGFkb3dWaWV3UmVnaXN0cnk6IE1hcDxudW1iZXIsIFJDVFNoYWRvd1ZpZXc+O1xuICAgIHZpZXdSZWdpc3RyeTogTWFwPG51bWJlciwgVUlWaWV3PjtcbiAgICBjb21wb25lbnREYXRhQnlOYW1lOiBNYXA8c3RyaW5nLCBSQ1RDb21wb25lbnREYXRhPjtcbiAgICBqc1Jlc3BvbmRlcjogP1VJVmlldztcbiAgICBsYXlvdXRBbmltYXRpb25NYW5hZ2VyOiBSQ1RMYXlvdXRBbmltYXRpb25NYW5hZ2VyO1xuICAgIG9ic2VydmVyQ29vcmRpbmF0b3I6IFJDVFVJTWFuYWdlck9ic2VydmVyQ29vcmRpbmF0b3I7XG5cbiAgICBwZW5kaW5nVUlCbG9ja3M6IEFycmF5PFVJQmxvY2s+ID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihicmlkZ2U6IFJDVEJyaWRnZSkge1xuICAgICAgdGhpcy5icmlkZ2UgPSBicmlkZ2U7XG5cbiAgICAgIHRoaXMuc2hhZG93Vmlld1JlZ2lzdHJ5ID0gbmV3IE1hcCgpO1xuICAgICAgdGhpcy52aWV3UmVnaXN0cnkgPSBuZXcgTWFwKCk7XG5cbiAgICAgIC8vIEludGVybmFsIHJlc291cmNlc1xuICAgICAgdGhpcy5yb290Vmlld1RhZ3MgPSBuZXcgU2V0KCk7XG5cbiAgICAgIC8vIEdldCB2aWV3IG1hbmFnZXJzIGZyb20gYnJpZGdlXG4gICAgICB0aGlzLmNvbXBvbmVudERhdGFCeU5hbWUgPSBuZXcgTWFwKCk7XG4gICAgICB0aGlzLmJyaWRnZS5tb2R1bGVDbGFzc2VzLmZvckVhY2goKG1vZHVsZUNsYXNzOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKG1vZHVsZUNsYXNzLl9faXNWaWV3TWFuYWdlcikge1xuICAgICAgICAgIGNvbnN0IGNvbXBvbmVudERhdGEgPSBuZXcgUkNUQ29tcG9uZW50RGF0YShtb2R1bGVDbGFzcywgdGhpcy5icmlkZ2UpO1xuICAgICAgICAgIHRoaXMuY29tcG9uZW50RGF0YUJ5TmFtZS5zZXQoY29tcG9uZW50RGF0YS5uYW1lLCBjb21wb25lbnREYXRhKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMubGF5b3V0QW5pbWF0aW9uTWFuYWdlciA9IG5ldyBSQ1RMYXlvdXRBbmltYXRpb25NYW5hZ2VyKHRoaXMpO1xuICAgICAgdGhpcy5vYnNlcnZlckNvb3JkaW5hdG9yID0gbmV3IFJDVFVJTWFuYWdlck9ic2VydmVyQ29vcmRpbmF0b3IoKTtcblxuICAgICAgaW52YXJpYW50KHRoaXMuYnJpZGdlLCBcIkJyaWRnZSBtdXN0IGJlIHNldFwiKTtcbiAgICAgIGNvbnN0IGRldmljZUluZm9Nb2R1bGU6IFJDVERldmljZUluZm8gPSAodGhpcy5icmlkZ2UubW9kdWxlc0J5TmFtZVtcbiAgICAgICAgXCJEZXZpY2VJbmZvXCJcbiAgICAgIF06IGFueSk7XG4gICAgICBkZXZpY2VJbmZvTW9kdWxlLmFkZExpc3RlbmVyKFxuICAgICAgICBcImRpZFVwZGF0ZURpbWVuc2lvbnNcIixcbiAgICAgICAgdGhpcy5kaWRVcGRhdGVEaW1lbnNpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIGRpZFVwZGF0ZURpbWVuc2lvbnMgPSAoeyB3aW5kb3c6IHsgd2lkdGgsIGhlaWdodCwgc2NhbGUgfSB9OiBhbnkpID0+IHtcbiAgICAgIC8vIHRoaXMuYnJpZGdlLkdsb2JhbFlvZ2FDb25maWcuc2V0UG9pbnRTY2FsZUZhY3RvcihzY2FsZSk7XG5cbiAgICAgIGZvciAobGV0IHJvb3RWaWV3VGFnIG9mIHRoaXMucm9vdFZpZXdUYWdzKSB7XG4gICAgICAgIGNvbnN0IHJvb3RWaWV3ID0gdGhpcy52aWV3UmVnaXN0cnkuZ2V0KHJvb3RWaWV3VGFnKTtcblxuICAgICAgICBpbnZhcmlhbnQocm9vdFZpZXcsIFwiUm9vdCB2aWV3IG11c3QgZXhpc3RcIik7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICByb290VmlldyBpbnN0YW5jZW9mIFJDVFJvb3RWaWV3LFxuICAgICAgICAgIFwiVmlldyBtdXN0IGJlIGFuIFJDVFJvb3RWaWV3XCJcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5hZGRVSUJsb2NrKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnNldEF2YWlsYWJsZVNpemUoeyB3aWR0aCwgaGVpZ2h0IH0sIHNjYWxlLCByb290Vmlldyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlcXVlc3RUaWNrKCk7XG4gICAgfTtcblxuICAgIGdldCBhbGxvY2F0ZVJvb3RUYWcoKTogbnVtYmVyIHtcbiAgICAgIGNvbnN0IHRhZyA9IHJvb3RUYWdDb3VudGVyO1xuICAgICAgcm9vdFRhZ0NvdW50ZXIrKztcbiAgICAgIHJldHVybiB0YWcgKiAxMCArIDE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSByb290IHZpZXcgd2l0aCB0aGUgUkNUVUlNYW5hZ2VyLlxuICAgICAqL1xuICAgIHJlZ2lzdGVyUm9vdFZpZXcocm9vdFZpZXc6IFJDVFJvb3RWaWV3KSB7XG4gICAgICBjb25zdCByZWFjdFRhZyA9IHJvb3RWaWV3LnJlYWN0VGFnO1xuICAgICAgY29uc3QgYXZhaWxhYmxlU2l6ZSA9IHJvb3RWaWV3LmF2YWlsYWJsZVNpemU7XG5cbiAgICAgIC8vIHJlZ2lzdGVyIHZpZXdcbiAgICAgIHRoaXMudmlld1JlZ2lzdHJ5LnNldChyZWFjdFRhZywgcm9vdFZpZXcpO1xuXG4gICAgICAvLyByZWdpc3RlciBzaGFkb3cgdmlld1xuICAgICAgY29uc3Qgc2hhZG93VmlldyA9IG5ldyBSQ1RSb290U2hhZG93VmlldygpO1xuICAgICAgc2hhZG93Vmlldy5hdmFpbGFibGVTaXplID0gYXZhaWxhYmxlU2l6ZTtcbiAgICAgIHNoYWRvd1ZpZXcucmVhY3RUYWcgPSByZWFjdFRhZztcbiAgICAgIHNoYWRvd1ZpZXcudmlld05hbWUgPSByb290Vmlldy5jb25zdHJ1Y3Rvci5uYW1lO1xuXG4gICAgICBjb25zdCBwaXhlbFJhdGlvID0gdGhpcy5icmlkZ2UuZGV2aWNlSW5mby5nZXREZXZpY2VQaXhlbFJhdGlvKCk7XG4gICAgICBzaGFkb3dWaWV3LnVwZGF0ZVBvaW50U2NhbGVGYWN0b3IocGl4ZWxSYXRpbyk7XG5cbiAgICAgIHRoaXMuc2hhZG93Vmlld1JlZ2lzdHJ5LnNldChyZWFjdFRhZywgc2hhZG93Vmlldyk7XG4gICAgICB0aGlzLnJvb3RWaWV3VGFncy5hZGQocmVhY3RUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgYXZhaWxhYmxlIHNpemUgKGBhdmFpbGFibGVTaXplYCBwcm9wZXJ0eSkgZm9yIGEgcm9vdCB2aWV3LlxuICAgICAqIFRoaXMgbWlnaHQgYmUgdXNlZCBpbiByZXNwb25zZSB0byBjaGFuZ2VzIGluIGV4dGVybmFsIGxheW91dCBjb25zdHJhaW50cy5cbiAgICAgKiBUaGlzIHZhbHVlIHdpbGwgYmUgZGlyZWN0bHkgdHJhc21pdHRlZCB0byBsYXlvdXQgZW5naW5lIGFuZCBkZWZpbmVzIGhvdyBiaWcgdmlld3BvcnQgaXM7XG4gICAgICogdGhpcyB2YWx1ZSBkb2VzIG5vdCBhZmZlY3Qgcm9vdCBub2RlIHNpemUgc3R5bGUgcHJvcGVydGllcy5cbiAgICAgKiBDYW4gYmUgY29uc2lkZXJlZCBhcyBzb21ldGhpbmcgc2ltaWxhciB0byBgc2V0U2l6ZTpmb3JWaWV3OmAgYnV0IGFwcGxpY2FibGUgb25seSBmb3Igcm9vdCB2aWV3LlxuICAgICAqL1xuICAgIHNldEF2YWlsYWJsZVNpemUoc2l6ZTogU2l6ZSwgc2NhbGU6IG51bWJlciwgcm9vdFZpZXc6IFJDVFJvb3RWaWV3KTogdm9pZCB7XG4gICAgICB0aGlzLnBlbmRpbmdVSUJsb2Nrcy5wdXNoKCgpID0+IHtcbiAgICAgICAgY29uc3QgcmVhY3RUYWcgPSByb290Vmlldy5yZWFjdFRhZztcbiAgICAgICAgY29uc3Qgcm9vdFNoYWRvd1ZpZXcgPSB0aGlzLnNoYWRvd1ZpZXdSZWdpc3RyeS5nZXQocmVhY3RUYWcpO1xuICAgICAgICBpZiAocm9vdFNoYWRvd1ZpZXcgJiYgcm9vdFNoYWRvd1ZpZXcgaW5zdGFuY2VvZiBSQ1RSb290U2hhZG93VmlldylcbiAgICAgICAgICByb290U2hhZG93Vmlldy51cGRhdGVBdmFpbGFibGVTaXplKHNpemUpICYmXG4gICAgICAgICAgICByb290U2hhZG93Vmlldy51cGRhdGVQb2ludFNjYWxlRmFjdG9yKHNjYWxlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldExvY2FsRGF0YUZvclZpZXcobG9jYWxEYXRhOiBhbnksIHZpZXc6IFVJVmlldykge1xuICAgICAgY29uc3QgdGFnID0gdmlldy5yZWFjdFRhZztcbiAgICAgIGNvbnN0IHNoYWRvd1ZpZXcgPSB0aGlzLnNoYWRvd1ZpZXdSZWdpc3RyeS5nZXQodGFnKTtcbiAgICAgIGlmIChzaGFkb3dWaWV3ID09IG51bGwpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBDb3VsZCBub3QgbG9jYXRlIHNoYWRvdyB2aWV3IHdpdGggdGFnICR7dGFnfSwgdGhpcyBpcyBwcm9iYWJseSBjYXVzZWQgYnkgYSB0ZW1wb3JhcnkgaW5jb25zaXN0ZW5jeSBiZXR3ZWVuIG5hdGl2ZSB2aWV3cyBhbmQgc2hhZG93IHZpZXdzLmBcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2hhZG93Vmlldy5sb2NhbERhdGEgPSBsb2NhbERhdGE7XG4gICAgICB0aGlzLnJlcXVlc3RUaWNrKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSByZWFjdFRhZyBmcm9tIGEgY29tcG9uZW50LCBmaW5kIGl0cyByb290IHZpZXcsIGlmIHBvc3NpYmxlLlxuICAgICAqIE90aGVyd2lzZSwgdGhpcyB3aWxsIGdpdmUgYmFjayBuaWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVhY3RUYWcgdGhlIGNvbXBvbmVudCB0YWdcbiAgICAgKiBAcGFyYW0gY29tcGxldGlvbiB0aGUgY29tcGxldGlvbiBibG9jayB0aGF0IHdpbGwgaGFuZCBvdmVyIHRoZSByb290VmlldywgaWYgYW55LlxuICAgICAqXG4gICAgICovXG4gICAgcm9vdFZpZXdGb3JSZWFjdFRhZyhyZWFjdFRhZzogbnVtYmVyLCBjb21wbGV0aW9uOiBGdW5jdGlvbikge31cblxuICAgIHZpZXdOYW1lRm9yUmVhY3RUYWcocmVhY3RUYWc6IG51bWJlcik6IHN0cmluZyB7XG4gICAgICBjb25zdCBzaGFkb3dWaWV3ID0gdGhpcy5zaGFkb3dWaWV3UmVnaXN0cnkuZ2V0KHJlYWN0VGFnKTtcbiAgICAgIGludmFyaWFudChzaGFkb3dWaWV3LCBgTm8gc3VjaCBzaGFkb3dWaWV3IHdpdGggaWQgJHtyZWFjdFRhZ31gKTtcbiAgICAgIHJldHVybiBzaGFkb3dWaWV3LnZpZXdOYW1lO1xuICAgIH1cblxuICAgIHB1cmdlVmlldyhyZWFjdFRhZzogbnVtYmVyKSB7XG4gICAgICBjb25zdCBzaGFkb3dWaWV3ID0gdGhpcy5zaGFkb3dWaWV3UmVnaXN0cnkuZ2V0KHJlYWN0VGFnKTtcbiAgICAgIGlmIChzaGFkb3dWaWV3KSB7XG4gICAgICAgIHRoaXMuc2hhZG93Vmlld1JlZ2lzdHJ5LmRlbGV0ZShyZWFjdFRhZyk7XG4gICAgICAgIHNoYWRvd1ZpZXcucHVyZ2UoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubGF5b3V0QW5pbWF0aW9uTWFuYWdlci5pc1BlbmRpbmcoKSkge1xuICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy52aWV3UmVnaXN0cnkuZ2V0KHJlYWN0VGFnKTtcbiAgICAgICAgaWYgKHZpZXcgJiYgdmlldy5yZWFjdFN1cGVydmlldykge1xuICAgICAgICAgIHZpZXcucmVhY3RTdXBlcnZpZXcucmVtb3ZlUmVhY3RTdWJ2aWV3KHZpZXcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGF5b3V0QW5pbWF0aW9uTWFuYWdlci5xdWV1ZVJlbW92ZWROb2RlKHJlYWN0VGFnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYWRkVUlCbG9jaygodWlNYW5hZ2VyLCB2aWV3UmVnaXN0cnkpID0+IHtcbiAgICAgICAgICBjb25zdCB2aWV3ID0gdmlld1JlZ2lzdHJ5LmdldChyZWFjdFRhZyk7XG4gICAgICAgICAgdmlld1JlZ2lzdHJ5LmRlbGV0ZShyZWFjdFRhZyk7XG4gICAgICAgICAgaWYgKHZpZXcpIHtcbiAgICAgICAgICAgIHZpZXcucHVyZ2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGZyYW1lKCkge1xuICAgICAgdGhpcy5vYnNlcnZlckNvb3JkaW5hdG9yLnVpTWFuYWdlcldpbGxQZXJmb3JtTGF5b3V0KHRoaXMpO1xuXG4gICAgICB0aGlzLnJvb3RWaWV3VGFncy5mb3JFYWNoKChyb290VGFnKSA9PiB7XG4gICAgICAgIGNvbnN0IHJvb3RTaGFkb3dWaWV3ID0gdGhpcy5zaGFkb3dWaWV3UmVnaXN0cnkuZ2V0KHJvb3RUYWcpO1xuICAgICAgICBpZiAocm9vdFNoYWRvd1ZpZXcgIT0gbnVsbCAmJiByb290U2hhZG93Vmlldy5pc0RpcnR5KSB7XG4gICAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgICAgcm9vdFNoYWRvd1ZpZXcgaW5zdGFuY2VvZiBSQ1RSb290U2hhZG93VmlldyxcbiAgICAgICAgICAgIFwiYXR0ZW1wdGluZyB0byByZWNhbGN1bGF0ZSBmcm9tIHNoYWRvd1ZpZXcgdGhhdCBpc24ndCByb290XCJcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgY29uc3QgbGF5b3V0Q2hhbmdlcyA9IGluc3RydW1lbnQoXCLimpvvuI8gTGF5b3V0XCIsICgpID0+XG4gICAgICAgICAgICByb290U2hhZG93Vmlldy5yZWNhbGN1bGF0ZUxheW91dCgpXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGlmICh0aGlzLmxheW91dEFuaW1hdGlvbk1hbmFnZXIuaXNQZW5kaW5nKCkpIHtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0QW5pbWF0aW9uTWFuYWdlci5hZGRMYXlvdXRDaGFuZ2VzKGxheW91dENoYW5nZXMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5TGF5b3V0Q2hhbmdlcyhsYXlvdXRDaGFuZ2VzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLm9ic2VydmVyQ29vcmRpbmF0b3IudWlNYW5hZ2VyRGlkUGVyZm9ybUxheW91dCh0aGlzKTtcblxuICAgICAgaWYgKHRoaXMubGF5b3V0QW5pbWF0aW9uTWFuYWdlci5pc1BlbmRpbmcoKSkge1xuICAgICAgICBpbnN0cnVtZW50KFwi4pqb77iPIExheW91dEFuaW1hdGlvbiBDb25zdHJ1Y3Rpb25cIiwgKCkgPT4ge1xuICAgICAgICAgIHRoaXMubGF5b3V0QW5pbWF0aW9uTWFuYWdlci5hcHBseUxheW91dENoYW5nZXMoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMub2JzZXJ2ZXJDb29yZGluYXRvci51aU1hbmFnZXJXaWxsRmx1c2hCbG9ja3ModGhpcyk7XG5cbiAgICAgIGluc3RydW1lbnQoXCLimpvvuI8gU3R5bGVcIiwgKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5wZW5kaW5nVUlCbG9ja3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IHVpQmxvY2tzID0gWy4uLnRoaXMucGVuZGluZ1VJQmxvY2tzXTtcbiAgICAgICAgICB0aGlzLnBlbmRpbmdVSUJsb2NrcyA9IFtdO1xuXG4gICAgICAgICAgdWlCbG9ja3MuZm9yRWFjaCgoYmxvY2spID0+IHtcbiAgICAgICAgICAgIGJsb2NrLmNhbGwobnVsbCwgdGhpcywgdGhpcy52aWV3UmVnaXN0cnkpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdGhpcy5yZXF1ZXN0VGljaygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzaG91bGRDb250aW51ZSgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLnBlbmRpbmdVSUJsb2Nrcy5sZW5ndGggIT09IDA7XG4gICAgfVxuXG4gICAgcmVxdWVzdFRpY2soKSB7XG4gICAgICB0aGlzLnJvb3RWaWV3VGFncy5mb3JFYWNoKChyb290Vmlld1RhZykgPT4ge1xuICAgICAgICBjb25zdCByb290VmlldyA9IHRoaXMudmlld1JlZ2lzdHJ5LmdldChyb290Vmlld1RhZyk7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICByb290VmlldyAmJiByb290VmlldyBpbnN0YW5jZW9mIFJDVFJvb3RWaWV3LFxuICAgICAgICAgIGBSb290VmlldyAod2l0aCBJRCAke3Jvb3RWaWV3VGFnfSkgZG9lcyBub3QgZXhpc3RgXG4gICAgICAgICk7XG4gICAgICAgIHJvb3RWaWV3LnJlcXVlc3RUaWNrKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBhcHBseUxheW91dENoYW5nZXMobGF5b3V0Q2hhbmdlczogTGF5b3V0Q2hhbmdlW10pIHtcbiAgICAgIGxheW91dENoYW5nZXMuZm9yRWFjaCgobGF5b3V0Q2hhbmdlKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgcmVhY3RUYWcsIGxheW91dCB9ID0gbGF5b3V0Q2hhbmdlO1xuICAgICAgICB0aGlzLmFkZFVJQmxvY2soKHVpTWFuYWdlciwgdmlld1JlZ2lzdHJ5KSA9PiB7XG4gICAgICAgICAgY29uc3QgdmlldyA9IHZpZXdSZWdpc3RyeS5nZXQocmVhY3RUYWcpO1xuICAgICAgICAgIGludmFyaWFudCh2aWV3LCBgVmlldyB3aXRoIHJlYWN0VGFnICR7cmVhY3RUYWd9IGRvZXMgbm90IGV4aXN0YCk7XG4gICAgICAgICAgdmlldy5mcmFtZSA9IGxheW91dDtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBAUkNUX0VYUE9SVF9NRVRIT0QoUkNURnVuY3Rpb25UeXBlTm9ybWFsKVxuICAgIG1lYXN1cmUocmVhY3RUYWc6IG51bWJlciwgY2FsbGJhY2tJZDogP251bWJlcikge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdGhpcy5hZGRVSUJsb2NrKCgpID0+IHtcbiAgICAgICAgICBsZXQgc2hhZG93VmlldyA9IHRoaXMuc2hhZG93Vmlld1JlZ2lzdHJ5LmdldChyZWFjdFRhZyk7XG4gICAgICAgICAgbGV0IHZpZXcgPSB0aGlzLnZpZXdSZWdpc3RyeS5nZXQocmVhY3RUYWcpO1xuXG4gICAgICAgICAgaWYgKCFzaGFkb3dWaWV3IHx8ICFzaGFkb3dWaWV3Lm1lYXN1cmVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgeyBnbG9iYWxYLCBnbG9iYWxZIH0gPSBzaGFkb3dWaWV3Lm1lYXN1cmVHbG9iYWwoKTtcblxuICAgICAgICAgIGludmFyaWFudChcbiAgICAgICAgICAgIHNoYWRvd1ZpZXcucHJldmlvdXNMYXlvdXQsXG4gICAgICAgICAgICBcIlNoYWRvdyB2aWV3IGhhcyBubyBwcmV2aW91cyBsYXlvdXRcIlxuICAgICAgICAgICk7XG4gICAgICAgICAgbGV0IHsgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0IH0gPSBzaGFkb3dWaWV3LnByZXZpb3VzTGF5b3V0O1xuXG4gICAgICAgICAgaWYgKGNhbGxiYWNrSWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5icmlkZ2UuY2FsbGJhY2tGcm9tSWQoY2FsbGJhY2tJZCkoXG4gICAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgIGhlaWdodCxcbiAgICAgICAgICAgICAgZ2xvYmFsWCxcbiAgICAgICAgICAgICAgZ2xvYmFsWVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgIGhlaWdodCxcbiAgICAgICAgICAgICAgZ2xvYmFsWCxcbiAgICAgICAgICAgICAgZ2xvYmFsWVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIEBSQ1RfRVhQT1JUX01FVEhPRChSQ1RGdW5jdGlvblR5cGVOb3JtYWwpXG4gICAgYXN5bmMgbWVhc3VyZUluV2luZG93KHJlYWN0VGFnOiBudW1iZXIsIGNhbGxiYWNrSWQ6IG51bWJlcikge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5tZWFzdXJlKHJlYWN0VGFnKTtcbiAgICAgIGludmFyaWFudChyZXN1bHQsIGBObyBtZWFzdXJlbWVudCBhdmFpbGFibGUgZm9yIHZpZXcgJHtyZWFjdFRhZ31gKTtcbiAgICAgIGNvbnN0IHsgZ2xvYmFsWCwgZ2xvYmFsWSwgd2lkdGgsIGhlaWdodCB9ID0gcmVzdWx0O1xuICAgICAgdGhpcy5icmlkZ2UuY2FsbGJhY2tGcm9tSWQoY2FsbGJhY2tJZCkoZ2xvYmFsWCwgZ2xvYmFsWSwgd2lkdGgsIGhlaWdodCk7XG4gICAgfVxuXG4gICAgQFJDVF9FWFBPUlRfTUVUSE9EKFJDVEZ1bmN0aW9uVHlwZU5vcm1hbClcbiAgICBzZXRKU1Jlc3BvbmRlcihyZWFjdFRhZzogbnVtYmVyKSB7XG4gICAgICAvLyB0aGlzLmFkZFVJQmxvY2soKCkgPT4ge1xuICAgICAgdGhpcy5qc1Jlc3BvbmRlciA9IHRoaXMudmlld1JlZ2lzdHJ5LmdldChyZWFjdFRhZyk7XG4gICAgICBpZiAoIXRoaXMuanNSZXNwb25kZXIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICBgSW52YWxpZCB2aWV3IHNldCB0byBiZSB0aGUgSlMgcmVzcG9uZGVyIC0gdGFnICR7cmVhY3RUYWd9YFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgLy8gfSk7XG4gICAgfVxuXG4gICAgQFJDVF9FWFBPUlRfTUVUSE9EKFJDVEZ1bmN0aW9uVHlwZU5vcm1hbClcbiAgICBjbGVhckpTUmVzcG9uZGVyKCkge1xuICAgICAgdGhpcy5qc1Jlc3BvbmRlciA9IG51bGw7XG4gICAgfVxuXG4gICAgQFJDVF9FWFBPUlRfTUVUSE9EKFJDVEZ1bmN0aW9uVHlwZU5vcm1hbClcbiAgICBjb25maWd1cmVOZXh0TGF5b3V0QW5pbWF0aW9uKFxuICAgICAgY29uZmlnOiBMYXlvdXRBbmltYXRpb25Db25maWcsXG4gICAgICBvbkFuaW1hdGlvbkRpZEVuZDogbnVtYmVyXG4gICAgKSB7XG4gICAgICBpZiAoXG4gICAgICAgICFDYW5Vc2UubWF0Y2hNZWRpYSB8fFxuICAgICAgICAhd2luZG93Lm1hdGNoTWVkaWEoXCIocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKVwiKS5tYXRjaGVzXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5sYXlvdXRBbmltYXRpb25NYW5hZ2VyLmNvbmZpZ3VyZU5leHQoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIHRoaXMuYnJpZGdlLmNhbGxiYWNrRnJvbUlkKG9uQW5pbWF0aW9uRGlkRW5kKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFkZFVJQmxvY2soYmxvY2s6ID9VSUJsb2NrKSB7XG4gICAgICBpZiAoYmxvY2sgPT0gbnVsbCB8fCB0aGlzLnZpZXdSZWdpc3RyeSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIGJsb2NrLmNhbGwobnVsbCwgdGhpcywgdGhpcy52aWV3UmVnaXN0cnkpO1xuICAgICAgdGhpcy5wZW5kaW5nVUlCbG9ja3MucHVzaChibG9jayk7XG4gICAgfVxuXG4gICAgcHJlcGVuZFVJQmxvY2soYmxvY2s6ID9VSUJsb2NrKSB7XG4gICAgICBpZiAoIWJsb2NrKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMucGVuZGluZ1VJQmxvY2tzLnVuc2hpZnQoYmxvY2spO1xuICAgIH1cblxuICAgIEBSQ1RfRVhQT1JUX01FVEhPRChSQ1RGdW5jdGlvblR5cGVOb3JtYWwpXG4gICAgc2V0Q2hpbGRyZW4oY29udGFpbmVyVGFnOiBudW1iZXIsIHJlYWN0VGFnczogQXJyYXk8bnVtYmVyPikge1xuICAgICAgUkNUVUlNYW5hZ2VyLlJDVFNldENoaWxkcmVuKFxuICAgICAgICBjb250YWluZXJUYWcsXG4gICAgICAgIHJlYWN0VGFncyxcbiAgICAgICAgdGhpcy5zaGFkb3dWaWV3UmVnaXN0cnlcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuYWRkVUlCbG9jayhcbiAgICAgICAgKHVpTWFuYWdlcjogUkNUVUlNYW5hZ2VyLCB2aWV3UmVnaXN0cnk6IE1hcDxudW1iZXIsIFVJVmlldz4pID0+IHtcbiAgICAgICAgICBSQ1RVSU1hbmFnZXIuUkNUU2V0Q2hpbGRyZW4oY29udGFpbmVyVGFnLCByZWFjdFRhZ3MsIHZpZXdSZWdpc3RyeSk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgc3RhdGljIFJDVFNldENoaWxkcmVuKFxuICAgICAgY29udGFpbmVyVGFnOiBudW1iZXIsXG4gICAgICByZWFjdFRhZ3M6IEFycmF5PG51bWJlcj4sXG4gICAgICByZWdpc3RyeTogTWFwPG51bWJlciwgJFN1YnR5cGU8UkNUQ29tcG9uZW50Pj5cbiAgICApIHtcbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHJlZ2lzdHJ5LmdldChjb250YWluZXJUYWcpO1xuICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgIHJlYWN0VGFncy5mb3JFYWNoKChyZWFjdFRhZykgPT4ge1xuICAgICAgICBjb25zdCB2aWV3ID0gcmVnaXN0cnkuZ2V0KHJlYWN0VGFnKTtcbiAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBgTm8gY29udGFpbmVyIHZpZXcgZm91bmQgd2l0aCBpZDogJHtjb250YWluZXJUYWd9YFxuICAgICAgICApO1xuICAgICAgICBpbnZhcmlhbnQodmlldywgYE5vIHZpZXcgZm91bmQgd2l0aCBpZDogJHtyZWFjdFRhZ31gKTtcbiAgICAgICAgY29udGFpbmVyLmluc2VydFJlYWN0U3Vidmlld0F0SW5kZXgodmlldywgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBAUkNUX0VYUE9SVF9NRVRIT0QoUkNURnVuY3Rpb25UeXBlTm9ybWFsKVxuICAgIGNyZWF0ZVZpZXcoXG4gICAgICByZWFjdFRhZzogbnVtYmVyLFxuICAgICAgdmlld05hbWU6IHN0cmluZyxcbiAgICAgIHJvb3RUYWc6IG51bWJlcixcbiAgICAgIHByb3BzOiBPYmplY3RcbiAgICApIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudERhdGEgPSB0aGlzLmNvbXBvbmVudERhdGFCeU5hbWUuZ2V0KHZpZXdOYW1lKTtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgY29tcG9uZW50RGF0YSxcbiAgICAgICAgYE5vIGNvbXBvbmVudCBmb3VuZCBmb3IgdmlldyB3aXRoIG5hbWUgJHt2aWV3TmFtZX1gXG4gICAgICApO1xuXG4gICAgICAvLyByZWdpc3RlciBzaGFkb3cgdmlld1xuICAgICAgY29uc3Qgc2hhZG93VmlldyA9IGNvbXBvbmVudERhdGEuY3JlYXRlU2hhZG93VmlldyhyZWFjdFRhZyk7XG4gICAgICBpZiAoc2hhZG93VmlldyAhPSBudWxsKSB7XG4gICAgICAgIHNoYWRvd1ZpZXcudmlld05hbWUgPSB2aWV3TmFtZTtcbiAgICAgICAgY29tcG9uZW50RGF0YS5zZXRQcm9wc0ZvclNoYWRvd1ZpZXcocHJvcHMsIHNoYWRvd1ZpZXcpO1xuICAgICAgICB0aGlzLnNoYWRvd1ZpZXdSZWdpc3RyeS5zZXQocmVhY3RUYWcsIHNoYWRvd1ZpZXcpO1xuICAgICAgfVxuXG4gICAgICAvLyBTaGFkb3cgdmlldyBpcyB0aGUgc291cmNlIG9mIHRydXRoIGZvciBiYWNrZ3JvdW5kIGNvbG9yIHRoaXMgaXMgYSBsaXR0bGVcbiAgICAgIC8vIGJpdCBjb3VudGVyLWludHVpdGl2ZSBpZiBwZW9wbGUgdHJ5IHRvIHNldCBiYWNrZ3JvdW5kIGNvbG9yIHdoZW4gc2V0dGluZyB1cFxuICAgICAgLy8gdGhlIHZpZXcsIGJ1dCBpdCdzIHRoZSBvbmx5IHdheSB0aGF0IG1ha2VzIHNlbnNlIGdpdmVuIG91ciB0aHJlYWRpbmcgbW9kZWxcbiAgICAgIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IHNoYWRvd1ZpZXcuYmFja2dyb3VuZENvbG9yO1xuXG4gICAgICAvLyBEaXNwYXRjaCB2aWV3IGNyZWF0aW9uIGRpcmVjdGx5IHRvIHRoZSBtYWluIHRocmVhZCBpbnN0ZWFkIG9mIGFkZGluZyB0b1xuICAgICAgLy8gVUlCbG9ja3MgYXJyYXkuIFRoaXMgd2F5LCBpdCBkb2Vzbid0IGdldCBkZWZlcnJlZCB1bnRpbCBhZnRlciBsYXlvdXQuXG4gICAgICBjb25zdCB2aWV3ID0gY29tcG9uZW50RGF0YS5jcmVhdGVWaWV3KHJlYWN0VGFnKTtcbiAgICAgIGlmICh2aWV3ICE9IG51bGwpIHtcbiAgICAgICAgY29tcG9uZW50RGF0YS5zZXRQcm9wc0ZvclZpZXcocHJvcHMsIHZpZXcpO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygdmlldy5zZXRCYWNrZ3JvdW5kQ29sb3IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHZpZXcuc2V0QmFja2dyb3VuZENvbG9yKGJhY2tncm91bmRDb2xvcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPOiBpbnZlc3RpZ2F0ZSB1c2FnZSBvZiByZWFjdEJyaWRnZURpZEZpbmlzaFRyYW5zYWN0aW9uXG5cbiAgICAgICAgdGhpcy52aWV3UmVnaXN0cnkuc2V0KHJlYWN0VGFnLCB2aWV3KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBAUkNUX0VYUE9SVF9NRVRIT0QoUkNURnVuY3Rpb25UeXBlTm9ybWFsKVxuICAgIHVwZGF0ZVZpZXcocmVhY3RUYWc6IG51bWJlciwgdmlld05hbWU6IHN0cmluZywgdXBkYXRlZFByb3BzOiBPYmplY3QpIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudERhdGEgPSB0aGlzLmNvbXBvbmVudERhdGFCeU5hbWUuZ2V0KHZpZXdOYW1lKTtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgY29tcG9uZW50RGF0YSxcbiAgICAgICAgYE5vIGNvbXBvbmVudCBmb3VuZCBmb3IgdmlldyB3aXRoIG5hbWUgJHt2aWV3TmFtZX1gXG4gICAgICApO1xuXG4gICAgICBjb25zdCBzaGFkb3dWaWV3ID0gdGhpcy5zaGFkb3dWaWV3UmVnaXN0cnkuZ2V0KHJlYWN0VGFnKTtcbiAgICAgIGlmIChzaGFkb3dWaWV3KSB7XG4gICAgICAgIGNvbXBvbmVudERhdGEuc2V0UHJvcHNGb3JTaGFkb3dWaWV3KHVwZGF0ZWRQcm9wcywgc2hhZG93Vmlldyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLnZpZXdSZWdpc3RyeS5nZXQocmVhY3RUYWcpO1xuICAgICAgaWYgKHZpZXcpIHtcbiAgICAgICAgY29tcG9uZW50RGF0YS5zZXRQcm9wc0ZvclZpZXcodXBkYXRlZFByb3BzLCB2aWV3KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzeW5jaHJvbm91c2x5VXBkYXRlVmlldyhyZWFjdFRhZzogbnVtYmVyLCB2aWV3TmFtZTogc3RyaW5nLCBwcm9wczogT2JqZWN0KSB7XG4gICAgICBjb25zdCBjb21wb25lbnREYXRhID0gdGhpcy5jb21wb25lbnREYXRhQnlOYW1lLmdldCh2aWV3TmFtZSk7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGNvbXBvbmVudERhdGEsXG4gICAgICAgIGBObyBjb21wb25lbnQgZm91bmQgZm9yIHZpZXcgd2l0aCBuYW1lICR7dmlld05hbWV9YFxuICAgICAgKTtcblxuICAgICAgY29uc3QgdmlldyA9IHRoaXMudmlld1JlZ2lzdHJ5LmdldChyZWFjdFRhZyk7XG4gICAgICBpZiAodmlldykge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImFuaW1hdGluZyB2aWV3XCIsIHZpZXcsIHByb3BzKTtcbiAgICAgICAgY29tcG9uZW50RGF0YS5zZXRQcm9wc0ZvclZpZXcocHJvcHMsIHZpZXcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIEBSQ1RfRVhQT1JUX01FVEhPRChSQ1RGdW5jdGlvblR5cGVOb3JtYWwpXG4gICAgcmVwbGFjZUV4aXN0aW5nTm9uUm9vdFZpZXcocmVhY3RUYWc6IG51bWJlciwgbmV3UmVhY3RUYWc6IG51bWJlcikge1xuICAgICAgY29uc3Qgc2hhZG93VmlldyA9IHRoaXMuc2hhZG93Vmlld1JlZ2lzdHJ5LmdldChyZWFjdFRhZyk7XG4gICAgICBpbnZhcmlhbnQoc2hhZG93VmlldywgYHNoYWRvd1ZpZXcgKGZvciBJRCAke3JlYWN0VGFnfSkgbm90IGZvdW5kYCk7XG5cbiAgICAgIGNvbnN0IHN1cGVyU2hhZG93VmlldyA9IHNoYWRvd1ZpZXcucmVhY3RTdXBlcnZpZXc7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIHN1cGVyU2hhZG93VmlldyxcbiAgICAgICAgYHNoYWRvd1ZpZXcgc3VwZXIgKG9mIElEICR7cmVhY3RUYWd9KSBub3QgZm91bmRgXG4gICAgICApO1xuXG4gICAgICBjb25zdCBpbmRleE9mVmlldyA9IHN1cGVyU2hhZG93Vmlldy5yZWFjdFN1YnZpZXdzLmluZGV4T2Yoc2hhZG93Vmlldyk7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGluZGV4T2ZWaWV3ICE9PSAtMSxcbiAgICAgICAgXCJWaWV3J3Mgc3VwZXJ2aWV3IGRvZXMndCBjbGFpbSBpdCBhcyBzdWJ2aWV3XCJcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHJlbW92ZUF0SW5kaWNlcyA9IFtpbmRleE9mVmlld107XG4gICAgICBjb25zdCBhZGRUYWdzID0gW25ld1JlYWN0VGFnXTtcblxuICAgICAgdGhpcy5tYW5hZ2VDaGlsZHJlbihcbiAgICAgICAgc3VwZXJTaGFkb3dWaWV3LnJlYWN0VGFnLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBhZGRUYWdzLFxuICAgICAgICByZW1vdmVBdEluZGljZXMsXG4gICAgICAgIHJlbW92ZUF0SW5kaWNlc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBAUkNUX0VYUE9SVF9NRVRIT0QoUkNURnVuY3Rpb25UeXBlTm9ybWFsKVxuICAgIGFzeW5jIGZpbmRTdWJ2aWV3SW4oXG4gICAgICByZWFjdFRhZzogbnVtYmVyLFxuICAgICAgYXRQb2ludDogW251bWJlciwgbnVtYmVyXSxcbiAgICAgIGNhbGxiYWNrSWQ6IG51bWJlclxuICAgICkge1xuICAgICAgY29uc3QgW3gsIHldID0gYXRQb2ludDtcbiAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLnZpZXdSZWdpc3RyeS5nZXQocmVhY3RUYWcpO1xuXG4gICAgICBpbnZhcmlhbnQodmlldywgYE5vIHN1Y2ggdmlldyB3aXRoIHRhZyAke3JlYWN0VGFnfWApO1xuXG4gICAgICBjb25zdCB0YXJnZXQgPSByZWFjdFZpZXdGcm9tUG9pbnQodmlldywgeCwgeSk7XG5cbiAgICAgIGlmICghdGFyZ2V0IHx8ICEodGFyZ2V0IGluc3RhbmNlb2YgVUlWaWV3KSkgcmV0dXJuO1xuXG4gICAgICBjb25zdCBtZWFzdXJlbWVudCA9IGF3YWl0IHRoaXMubWVhc3VyZSh0YXJnZXQucmVhY3RUYWcpO1xuXG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIG1lYXN1cmVtZW50LFxuICAgICAgICBgVmlldyB3aXRoIHRhZyAke3RhcmdldC5yZWFjdFRhZ30gaGFzIG5vIG1lYXN1cmVtZW50YFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHsgZ2xvYmFsWCwgZ2xvYmFsWSwgd2lkdGgsIGhlaWdodCB9ID0gbWVhc3VyZW1lbnQ7XG5cbiAgICAgIHRoaXMuYnJpZGdlLmNhbGxiYWNrRnJvbUlkKGNhbGxiYWNrSWQpKFxuICAgICAgICB0YXJnZXQucmVhY3RUYWcsXG4gICAgICAgIGdsb2JhbFgsXG4gICAgICAgIGdsb2JhbFksXG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgQFJDVF9FWFBPUlRfTUVUSE9EKFJDVEZ1bmN0aW9uVHlwZU5vcm1hbClcbiAgICBtYW5hZ2VDaGlsZHJlbihcbiAgICAgIHRhZzogbnVtYmVyLFxuICAgICAgbW92ZUZyb206ID9BcnJheTxudW1iZXI+LFxuICAgICAgbW92ZVRvOiA/QXJyYXk8bnVtYmVyPixcbiAgICAgIGFkZENoaWxkVGFnczogQXJyYXk8bnVtYmVyPixcbiAgICAgIGFkZEF0SW5kaWNlczogQXJyYXk8bnVtYmVyPixcbiAgICAgIHJlbW92ZUZyb206IEFycmF5PG51bWJlcj5cbiAgICApIHtcbiAgICAgIGNvbnN0IHZpZXdUb01hbmFnZSA9IHRoaXMudmlld1JlZ2lzdHJ5LmdldCh0YWcpO1xuICAgICAgY29uc3Qgc2hhZG93Vmlld1RvTWFuYWdlID0gdGhpcy5zaGFkb3dWaWV3UmVnaXN0cnkuZ2V0KHRhZyk7XG5cbiAgICAgIGlmICghdmlld1RvTWFuYWdlIHx8ICFzaGFkb3dWaWV3VG9NYW5hZ2UpIHJldHVybjtcblxuICAgICAgLy8gZGV0ZXJtaW5lIGNvdW50cyB3aXRoIGNoZWNrcyBmb3IgbnVsbFxuICAgICAgY29uc3QgbnVtVG9Nb3ZlID0gIW1vdmVGcm9tID8gMCA6IG1vdmVGcm9tLmxlbmd0aDtcblxuICAgICAgLy8gV2UgdHJlYXQgbW92ZXMgYXMgYW4gYWRkIGFuZCBhIGRlbGV0ZVxuICAgICAgY29uc3Qgdmlld3NUb0FkZCA9IFtdO1xuICAgICAgY29uc3QgaW5kaWNlc1RvUmVtb3ZlID0gW107XG4gICAgICBjb25zdCB0YWdzVG9SZW1vdmUgPSBbXTtcbiAgICAgIGNvbnN0IHRhZ3NUb0RlbGV0ZSA9IFtdO1xuXG4gICAgICAvLyBtb3ZlcyBhcmUgYmFzZWQgb24gYSBzZXJpZXMgb2YgYWRkcyBhZnRlciByZW1vdmVzXG4gICAgICBpZiAobW92ZUZyb20gJiYgbW92ZVRvKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW92ZUZyb20ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBtb3ZlRnJvbUluZGV4ID0gbW92ZUZyb21baV07XG4gICAgICAgICAgY29uc3QgdGFnVG9Nb3ZlID0gdmlld1RvTWFuYWdlLnJlYWN0U3Vidmlld3NbbW92ZUZyb21JbmRleF0ucmVhY3RUYWc7XG4gICAgICAgICAgdmlld3NUb0FkZFtpXSA9IHtcbiAgICAgICAgICAgIHRhZzogdGFnVG9Nb3ZlLFxuICAgICAgICAgICAgaW5kZXg6IG1vdmVUb1tpXVxuICAgICAgICAgIH07XG4gICAgICAgICAgaW5kaWNlc1RvUmVtb3ZlW2ldID0gbW92ZUZyb21JbmRleDtcbiAgICAgICAgICB0YWdzVG9SZW1vdmVbaV0gPSB0YWdUb01vdmU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gYWRkIHRoZSByZXN0IG9mIHRoZSBhZGRzXG4gICAgICBpZiAoYWRkQ2hpbGRUYWdzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkQ2hpbGRUYWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3Qgdmlld1RhZ1RvQWRkID0gYWRkQ2hpbGRUYWdzW2ldO1xuICAgICAgICAgIGNvbnN0IGluZGV4VG9BZGRBdCA9IGFkZEF0SW5kaWNlc1tpXTtcbiAgICAgICAgICB2aWV3c1RvQWRkW251bVRvTW92ZSArIGldID0ge1xuICAgICAgICAgICAgdGFnOiB2aWV3VGFnVG9BZGQsXG4gICAgICAgICAgICBpbmRleDogaW5kZXhUb0FkZEF0XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBub3cgYWRkIHRoZSByZXF1aXJlZCByZW1vdmVzXG4gICAgICBpZiAocmVtb3ZlRnJvbSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbW92ZUZyb20ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBpbmRleFRvUmVtb3ZlID0gcmVtb3ZlRnJvbVtpXTtcbiAgICAgICAgICBpZiAodmlld1RvTWFuYWdlLnJlYWN0U3Vidmlld3NbaW5kZXhUb1JlbW92ZV0pIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZ1RvUmVtb3ZlID1cbiAgICAgICAgICAgICAgdmlld1RvTWFuYWdlLnJlYWN0U3Vidmlld3NbaW5kZXhUb1JlbW92ZV0ucmVhY3RUYWc7XG4gICAgICAgICAgICBpbmRpY2VzVG9SZW1vdmVbbnVtVG9Nb3ZlICsgaV0gPSBpbmRleFRvUmVtb3ZlO1xuICAgICAgICAgICAgdGFnc1RvUmVtb3ZlW251bVRvTW92ZSArIGldID0gdGFnVG9SZW1vdmU7XG4gICAgICAgICAgICB0YWdzVG9EZWxldGVbaV0gPSB0YWdUb1JlbW92ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gTkI6IG1vdmVGcm9tIGFuZCByZW1vdmVGcm9tIGFyZSBib3RoIHJlbGF0aXZlIHRvIHRoZSBzdGFydGluZyBzdGF0ZSBvZiB0aGUgVmlldydzIGNoaWxkcmVuLlxuICAgICAgLy8gbW92ZVRvIGFuZCBhZGRBdCBhcmUgYm90aCByZWxhdGl2ZSB0byB0aGUgZmluYWwgc3RhdGUgb2YgdGhlIFZpZXcncyBjaGlsZHJlbi5cbiAgICAgIC8vXG4gICAgICAvLyAxKSBTb3J0IHRoZSB2aWV3cyB0byBhZGQgYW5kIGluZGljZXMgdG8gcmVtb3ZlIGJ5IGluZGV4XG4gICAgICAvLyAyKSBJdGVyYXRlIHRoZSBpbmRpY2VzIGJlaW5nIHJlbW92ZWQgZnJvbSBoaWdoIHRvIGxvdyBhbmQgcmVtb3ZlIHRoZW0uIEdvaW5nIGhpZ2ggdG8gbG93XG4gICAgICAvLyAgICBtYWtlcyBzdXJlIHdlIHJlbW92ZSB0aGUgY29ycmVjdCBpbmRleCB3aGVuIHRoZXJlIGFyZSBtdWx0aXBsZSB0byByZW1vdmUuXG4gICAgICAvLyAzKSBJdGVyYXRlIHRoZSB2aWV3cyBiZWluZyBhZGRlZCBieSBpbmRleCBsb3cgdG8gaGlnaCBhbmQgYWRkIHRoZW0uIExpa2UgdGhlIHZpZXcgcmVtb3ZhbCxcbiAgICAgIC8vICAgIGl0ZXJhdGlvbiBkaXJlY3Rpb24gaXMgaW1wb3J0YW50IHRvIHByZXNlcnZlIHRoZSBjb3JyZWN0IGluZGV4LlxuXG4gICAgICB2aWV3c1RvQWRkLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICByZXR1cm4gYS5pbmRleCAtIGIuaW5kZXg7XG4gICAgICB9KTtcbiAgICAgIGluZGljZXNUb1JlbW92ZS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEFwcGx5IGNoYW5nZXMgdG8gbm9kZSBoaWVyYXJjaHlcbiAgICAgIC8vIHJlbW92aW5nIGluIHRoZSBvcmRlciBsYXN0IGluZGV4IHRvIGZpcnN0IGluZGV4XG4gICAgICBmb3IgKGxldCBpID0gaW5kaWNlc1RvUmVtb3ZlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkSW5kZXggPSBpbmRpY2VzVG9SZW1vdmVbaV07XG5cbiAgICAgICAgbGV0IHNoYWRvd1N1YlZpZXcgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChzaGFkb3dWaWV3VG9NYW5hZ2UgaW5zdGFuY2VvZiBSQ1RTaGFkb3dUZXh0KSB7XG4gICAgICAgICAgc2hhZG93U3ViVmlldyA9IHNoYWRvd1ZpZXdUb01hbmFnZS50ZXh0Q2hpbGRyZW5bY2hpbGRJbmRleF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2hhZG93U3ViVmlldyA9IHNoYWRvd1ZpZXdUb01hbmFnZS5yZWFjdFN1YnZpZXdzW2NoaWxkSW5kZXhdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYWRvd1N1YlZpZXcpIHNoYWRvd1ZpZXdUb01hbmFnZS5yZW1vdmVSZWFjdFN1YnZpZXcoc2hhZG93U3ViVmlldyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmxheW91dEFuaW1hdGlvbk1hbmFnZXIuaXNQZW5kaW5nKCkpIHtcbiAgICAgICAgICB0aGlzLmFkZFVJQmxvY2soKHVpTWFuYWdlciwgdmlld1JlZ2lzdHJ5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdWJWaWV3ID0gdmlld1RvTWFuYWdlLnJlYWN0U3Vidmlld3NbY2hpbGRJbmRleF07XG4gICAgICAgICAgICB2aWV3VG9NYW5hZ2UucmVtb3ZlUmVhY3RTdWJ2aWV3KHN1YlZpZXcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGFkZCB0aGUgbmV3IGNoaWxkcmVuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZpZXdzVG9BZGQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgeyB0YWc6IHRhZ1RvQWRkLCBpbmRleDogaW5kZXhUb0FkZCB9ID0gdmlld3NUb0FkZFtpXTtcblxuICAgICAgICBjb25zdCBzaGFkb3dTdWJWaWV3ID0gdGhpcy5zaGFkb3dWaWV3UmVnaXN0cnkuZ2V0KHRhZ1RvQWRkKTtcbiAgICAgICAgaWYgKHNoYWRvd1N1YlZpZXcpIHtcbiAgICAgICAgICBzaGFkb3dWaWV3VG9NYW5hZ2UuaW5zZXJ0UmVhY3RTdWJ2aWV3QXRJbmRleChcbiAgICAgICAgICAgIHNoYWRvd1N1YlZpZXcsXG4gICAgICAgICAgICBpbmRleFRvQWRkXG4gICAgICAgICAgKTtcbiAgICAgICAgICBzaGFkb3dTdWJWaWV3Lm1ha2VEaXJ0eSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hZGRVSUJsb2NrKCh1aU1hbmFnZXIsIHZpZXdSZWdpc3RyeSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN1YlZpZXcgPSB2aWV3UmVnaXN0cnkuZ2V0KHRhZ1RvQWRkKTtcbiAgICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgICBzdWJWaWV3LFxuICAgICAgICAgICAgYEF0dGVtcHRlZCB0byBpbnNlcnQgc3VidmlldyB3aXRoIHRhZyAke3RhZ1RvQWRkfSB0aGF0IGRvZXMgbm90IGV4aXN0YFxuICAgICAgICAgICk7XG4gICAgICAgICAgdmlld1RvTWFuYWdlLmluc2VydFJlYWN0U3Vidmlld0F0SW5kZXgoc3ViVmlldywgaW5kZXhUb0FkZCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRhZ3NUb0RlbGV0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLnB1cmdlVmlldyh0YWdzVG9EZWxldGVbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIEBSQ1RfRVhQT1JUX01FVEhPRChSQ1RGdW5jdGlvblR5cGVOb3JtYWwpXG4gICAgZm9jdXMocmVhY3RUYWc6IG51bWJlcikge31cblxuICAgIEBSQ1RfRVhQT1JUX01FVEhPRChSQ1RGdW5jdGlvblR5cGVOb3JtYWwpXG4gICAgYmx1cihyZWFjdFRhZzogbnVtYmVyKSB7fVxuXG4gICAgY29uc3RhbnRzVG9FeHBvcnQoKSB7XG4gICAgICBjb25zdCBjb25zdGFudHMgPSB7fTtcbiAgICAgIGNvbnN0IGJ1YmJsaW5nRXZlbnRzID0ge307XG4gICAgICBjb25zdCBkaXJlY3RFdmVudHMgPSB7fTtcblxuICAgICAgZm9yIChjb25zdCBbbmFtZSwgY29tcG9uZW50RGF0YV0gb2YgdGhpcy5jb21wb25lbnREYXRhQnlOYW1lKSB7XG4gICAgICAgIGNvbnN0IG1vZHVsZUNvbnN0YW50cyA9IHt9O1xuXG4gICAgICAgIC8vIFJlZ2lzdGVyIHdoaWNoIGV2ZW50LXR5cGVzIHRoaXMgdmlldyBkaXNwYXRjaGVzLlxuICAgICAgICAvLyBSZWFjdCBuZWVkcyB0aGlzIGZvciB0aGUgZXZlbnQgcGx1Z2luLlxuICAgICAgICBjb25zdCBidWJibGluZ0V2ZW50VHlwZXMgPSB7fTtcbiAgICAgICAgY29uc3QgZGlyZWN0RXZlbnRUeXBlcyA9IHt9O1xuXG4gICAgICAgIC8vIEFkZCBtYW5hZ2VyIGNsYXNzXG4gICAgICAgIG1vZHVsZUNvbnN0YW50cy5NYW5hZ2VyID0gYnJpZGdlTW9kdWxlTmFtZUZvckNsYXNzKFxuICAgICAgICAgIGNvbXBvbmVudERhdGEubWFuYWdlckNsYXNzXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gQWRkIG5hdGl2ZSBwcm9wc1xuICAgICAgICBjb25zdCB2aWV3Q29uZmlnID0gY29tcG9uZW50RGF0YS52aWV3Q29uZmlnO1xuICAgICAgICBtb2R1bGVDb25zdGFudHMuTmF0aXZlUHJvcHMgPSB2aWV3Q29uZmlnLnByb3BUeXBlcztcbiAgICAgICAgbW9kdWxlQ29uc3RhbnRzLmJhc2VNb2R1bGVOYW1lID0gdmlld0NvbmZpZy5iYXNlTW9kdWxlTmFtZTtcblxuICAgICAgICAvLyBBZGQgZGlyZWN0IGV2ZW50c1xuICAgICAgICBmb3IgKGxldCBldmVudE5hbWUgb2Ygdmlld0NvbmZpZy5kaXJlY3RFdmVudHMpIHtcbiAgICAgICAgICBpZiAoIWRpcmVjdEV2ZW50c1tldmVudE5hbWVdKSB7XG4gICAgICAgICAgICBkaXJlY3RFdmVudHNbZXZlbnROYW1lXSA9IHtcbiAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogYG9uJHtldmVudE5hbWUuc3Vic3RyaW5nKDMpfWBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIGRpcmVjdEV2ZW50VHlwZXNbZXZlbnROYW1lXSA9IGRpcmVjdEV2ZW50c1tldmVudE5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIG1vZHVsZUNvbnN0YW50cy5kaXJlY3RFdmVudFR5cGVzID0gZGlyZWN0RXZlbnRUeXBlcztcblxuICAgICAgICAvLyBBZGQgYnViYmxpbmcgZXZlbnRzXG4gICAgICAgIGZvciAobGV0IGV2ZW50TmFtZSBvZiB2aWV3Q29uZmlnLmJ1YmJsaW5nRXZlbnRzKSB7XG4gICAgICAgICAgaWYgKCFidWJibGluZ0V2ZW50c1tldmVudE5hbWVdKSB7XG4gICAgICAgICAgICBjb25zdCBidWJibGVOYW1lID0gYG9uJHtldmVudE5hbWUuc3Vic3RyaW5nKDMpfWA7XG4gICAgICAgICAgICBidWJibGluZ0V2ZW50c1tldmVudE5hbWVdID0ge1xuICAgICAgICAgICAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgICAgICAgIGJ1YmJsZWQ6IGJ1YmJsZU5hbWUsXG4gICAgICAgICAgICAgICAgY2FwdHVyZWQ6IGAke2J1YmJsZU5hbWV9Q2FwdHVyZWBcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnViYmxpbmdFdmVudFR5cGVzW2V2ZW50TmFtZV0gPSBidWJibGluZ0V2ZW50c1tldmVudE5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIG1vZHVsZUNvbnN0YW50cy5idWJibGluZ0V2ZW50VHlwZXMgPSBidWJibGluZ0V2ZW50VHlwZXM7XG5cbiAgICAgICAgY29uc3RhbnRzW25hbWVdID0gbW9kdWxlQ29uc3RhbnRzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29uc3RhbnRzO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBSQ1RVSU1hbmFnZXI7XG59KSgpO1xuIl19