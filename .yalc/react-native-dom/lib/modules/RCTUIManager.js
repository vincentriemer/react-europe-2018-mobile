var _slicedToArray2=require("babel-runtime/helpers/slicedToArray");var _slicedToArray3=_interopRequireDefault(_slicedToArray2);var _regenerator=require("babel-runtime/regenerator");var _regenerator2=_interopRequireDefault(_regenerator);var _toConsumableArray2=require("babel-runtime/helpers/toConsumableArray");var _toConsumableArray3=_interopRequireDefault(_toConsumableArray2);var _classCallCheck2=require("babel-runtime/helpers/classCallCheck");var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require("babel-runtime/helpers/createClass");var _createClass3=_interopRequireDefault(_createClass2);var _this8=this;var _Invariant=require("./../utils/Invariant");var _Invariant2=_interopRequireDefault(_Invariant);var _RCTBridge=require("./../bridge/RCTBridge");var _RCTBridge2=_interopRequireDefault(_RCTBridge);var _UIView=require("./../base/UIView");var _UIView2=_interopRequireDefault(_UIView);var _RCTView=require("./../views/RCTView");var _RCTView2=_interopRequireDefault(_RCTView);var _RCTRootView=require("./../bridge/RCTRootView");var _RCTRootView2=_interopRequireDefault(_RCTRootView);var _RCTDeviceInfo=require("./RCTDeviceInfo");var _RCTDeviceInfo2=_interopRequireDefault(_RCTDeviceInfo);var _RCTLayoutAnimationManager=require("./LayoutAnimation/RCTLayoutAnimationManager");var _RCTLayoutAnimationManager2=_interopRequireDefault(_RCTLayoutAnimationManager);var _RCTUIManagerObserver=require("./RCTUIManagerObserver");var _RCTUIManagerObserver2=_interopRequireDefault(_RCTUIManagerObserver);var _RCTComponentData=require("./../views/RCTComponentData");var _RCTComponentData2=_interopRequireDefault(_RCTComponentData);var _CanUse=require("./../utils/CanUse");var _CanUse2=_interopRequireDefault(_CanUse);var _Instrument=require("./../utils/Instrument");var _Instrument2=_interopRequireDefault(_Instrument);var _RCTShadowView2=require("./../views/RCTShadowView");var _RCTShadowView3=_interopRequireDefault(_RCTShadowView2);var _RCTRootShadowView2=require("./../views/RCTRootShadowView");var _RCTRootShadowView3=_interopRequireDefault(_RCTRootShadowView2);var _RCTShadowText2=require("./../views/Text/RCTShadowText");var _RCTShadowText3=_interopRequireDefault(_RCTShadowText2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _applyDecoratedDescriptor(target,property,decorators,descriptor,context){var desc={};Object['ke'+'ys'](descriptor).forEach(function(key){desc[key]=descriptor[key];});desc.enumerable=!!desc.enumerable;desc.configurable=!!desc.configurable;if('value'in desc||desc.initializer){desc.writable=true;}desc=decorators.slice().reverse().reduce(function(desc,decorator){return decorator(target,property,desc)||desc;},desc);if(context&&desc.initializer!==void 0){desc.value=desc.initializer?desc.initializer.call(context):void 0;desc.initializer=undefined;}if(desc.initializer===void 0){Object['define'+'Property'](target,property,desc);desc=null;}return desc;}var rootTagCounter=0;function byPosition(a,b){if(a===b)return 0;if(!a.compareDocumentPosition){return b.sourceIndex-a.sourceIndex;}if(a.compareDocumentPosition(b)&2){return-1;}return 1;}function reactViewFromPoint(topView,x,y){var element,elements=[];var old_visibility=[];while(true){element=document.elementFromPoint(x,y);if(!element||element===document.documentElement){break;}elements.push(element);old_visibility.push(element.style.visibility);element.style.visibility="hidden";}for(var k=0;k<elements.length;k++){elements[k].style.visibility=old_visibility[k];}elements=elements.filter(function(elem){return topView.contains(elem)&&elem instanceof _UIView2.default;});elements.sort(byPosition);return elements[0];}module.exports=function _callee(){var _dec,_dec2,_dec3,_dec4,_dec5,_dec6,_dec7,_dec8,_dec9,_dec10,_dec11,_dec12,_dec13,_dec14,_class,_desc,_value,_class2;var RCTShadowView,RCTRootShadowView,RCTShadowText,RCTUIManager;return _regenerator2.default.async(function _callee$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return _regenerator2.default.awrap(_RCTShadowView3.default);case 2:RCTShadowView=_context4.sent;_context4.next=5;return _regenerator2.default.awrap(_RCTRootShadowView3.default);case 5:RCTRootShadowView=_context4.sent;_context4.next=8;return _regenerator2.default.awrap(_RCTShadowText3.default);case 8:RCTShadowText=_context4.sent;RCTUIManager=(_dec=(0,_RCTBridge.RCT_EXPORT_MODULE)("RCTUIManager"),_dec2=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec3=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec4=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec5=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec6=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec7=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec8=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec9=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec10=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec11=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec12=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec13=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec14=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec(_class=(_class2=function(){function RCTUIManager(bridge){var _this=this;(0,_classCallCheck3.default)(this,RCTUIManager);this.pendingUIBlocks=[];this.didUpdateDimensions=function(_ref){var _ref$window=_ref.window,width=_ref$window.width,height=_ref$window.height,scale=_ref$window.scale;var _loop=function _loop(rootViewTag){var rootView=_this.viewRegistry.get(rootViewTag);(0,_Invariant2.default)(rootView,"Root view must exist");(0,_Invariant2.default)(rootView instanceof _RCTRootView2.default,"View must be an RCTRootView");_this.addUIBlock(function(){_this.setAvailableSize({width:width,height:height},scale,rootView);});};for(var _iterator=_this.rootViewTags,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[typeof Symbol==="function"?typeof Symbol==="function"?typeof Symbol==="function"?Symbol.iterator:"@@iterator":"@@iterator":"@@iterator"]();;){var _ref2;if(_isArray){if(_i>=_iterator.length)break;_ref2=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref2=_i.value;}var rootViewTag=_ref2;_loop(rootViewTag);}_this.requestTick();};this.bridge=bridge;this.shadowViewRegistry=new Map();this.viewRegistry=new Map();this.rootViewTags=new Set();this.componentDataByName=new Map();this.bridge.moduleClasses.forEach(function(moduleClass){if(moduleClass.__isViewManager){var componentData=new _RCTComponentData2.default(moduleClass,_this.bridge);_this.componentDataByName.set(componentData.name,componentData);}});this.layoutAnimationManager=new _RCTLayoutAnimationManager2.default(this);this.observerCoordinator=new _RCTUIManagerObserver2.default();(0,_Invariant2.default)(this.bridge,"Bridge must be set");var deviceInfoModule=this.bridge.modulesByName["DeviceInfo"];deviceInfoModule.addListener("didUpdateDimensions",this.didUpdateDimensions);}(0,_createClass3.default)(RCTUIManager,[{key:"registerRootView",value:function registerRootView(rootView){var reactTag=rootView.reactTag;var availableSize=rootView.availableSize;this.viewRegistry.set(reactTag,rootView);var shadowView=new RCTRootShadowView();shadowView.availableSize=availableSize;shadowView.reactTag=reactTag;shadowView.viewName=rootView.constructor.name;var pixelRatio=this.bridge.deviceInfo.getDevicePixelRatio();shadowView.updatePointScaleFactor(pixelRatio);this.shadowViewRegistry.set(reactTag,shadowView);this.rootViewTags.add(reactTag);}},{key:"setAvailableSize",value:function setAvailableSize(size,scale,rootView){var _this2=this;this.pendingUIBlocks.push(function(){var reactTag=rootView.reactTag;var rootShadowView=_this2.shadowViewRegistry.get(reactTag);if(rootShadowView&&rootShadowView instanceof RCTRootShadowView)rootShadowView.updateAvailableSize(size)&&rootShadowView.updatePointScaleFactor(scale);});}},{key:"setLocalDataForView",value:function setLocalDataForView(localData,view){var tag=view.reactTag;var shadowView=this.shadowViewRegistry.get(tag);if(shadowView==null){console.warn("Could not locate shadow view with tag "+tag+", this is probably caused by a temporary inconsistency between native views and shadow views.");return;}shadowView.localData=localData;this.requestTick();}},{key:"rootViewForReactTag",value:function rootViewForReactTag(reactTag,completion){}},{key:"viewNameForReactTag",value:function viewNameForReactTag(reactTag){var shadowView=this.shadowViewRegistry.get(reactTag);(0,_Invariant2.default)(shadowView,"No such shadowView with id "+reactTag);return shadowView.viewName;}},{key:"purgeView",value:function purgeView(reactTag){var shadowView=this.shadowViewRegistry.get(reactTag);if(shadowView){this.shadowViewRegistry.delete(reactTag);shadowView.purge();}if(this.layoutAnimationManager.isPending()){var view=this.viewRegistry.get(reactTag);if(view&&view.reactSuperview){view.reactSuperview.removeReactSubview(view);}this.layoutAnimationManager.queueRemovedNode(reactTag);}else{this.addUIBlock(function(uiManager,viewRegistry){var view=viewRegistry.get(reactTag);viewRegistry.delete(reactTag);if(view){view.purge();}});}}},{key:"frame",value:function frame(){var _this3=this;return _regenerator2.default.async(function frame$(_context){while(1){switch(_context.prev=_context.next){case 0:this.observerCoordinator.uiManagerWillPerformLayout(this);this.rootViewTags.forEach(function(rootTag){var rootShadowView=_this3.shadowViewRegistry.get(rootTag);if(rootShadowView!=null&&rootShadowView.isDirty){(0,_Invariant2.default)(rootShadowView instanceof RCTRootShadowView,"attempting to recalculate from shadowView that isn't root");var layoutChanges=(0,_Instrument2.default)("⚛️ Layout",function(){return rootShadowView.recalculateLayout();});if(_this3.layoutAnimationManager.isPending()){_this3.layoutAnimationManager.addLayoutChanges(layoutChanges);}else{_this3.applyLayoutChanges(layoutChanges);}}});this.observerCoordinator.uiManagerDidPerformLayout(this);if(this.layoutAnimationManager.isPending()){(0,_Instrument2.default)("⚛️ LayoutAnimation Construction",function(){_this3.layoutAnimationManager.applyLayoutChanges();});}this.observerCoordinator.uiManagerWillFlushBlocks(this);(0,_Instrument2.default)("⚛️ Style",function(){if(_this3.pendingUIBlocks.length>0){var uiBlocks=[].concat((0,_toConsumableArray3.default)(_this3.pendingUIBlocks));_this3.pendingUIBlocks=[];uiBlocks.forEach(function(block){block.call(null,_this3,_this3.viewRegistry);});_this3.requestTick();}});case 6:case"end":return _context.stop();}}},null,this);}},{key:"shouldContinue",value:function shouldContinue(){return this.pendingUIBlocks.length!==0;}},{key:"requestTick",value:function requestTick(){var _this4=this;this.rootViewTags.forEach(function(rootViewTag){var rootView=_this4.viewRegistry.get(rootViewTag);(0,_Invariant2.default)(rootView&&rootView instanceof _RCTRootView2.default,"RootView (with ID "+rootViewTag+") does not exist");rootView.requestTick();});}},{key:"applyLayoutChanges",value:function applyLayoutChanges(layoutChanges){var _this5=this;layoutChanges.forEach(function(layoutChange){var reactTag=layoutChange.reactTag,layout=layoutChange.layout;_this5.addUIBlock(function(uiManager,viewRegistry){var view=viewRegistry.get(reactTag);(0,_Invariant2.default)(view,"View with reactTag "+reactTag+" does not exist");view.frame=layout;});});}},{key:"measure",value:function measure(reactTag,callbackId){var _this6=this;return new Promise(function(resolve,reject){_this6.addUIBlock(function(){var shadowView=_this6.shadowViewRegistry.get(reactTag);var view=_this6.viewRegistry.get(reactTag);if(!shadowView||!shadowView.measurement){return;}var _shadowView$measureGl=shadowView.measureGlobal(),globalX=_shadowView$measureGl.globalX,globalY=_shadowView$measureGl.globalY;(0,_Invariant2.default)(shadowView.previousLayout,"Shadow view has no previous layout");var _shadowView$previousL=shadowView.previousLayout,left=_shadowView$previousL.left,top=_shadowView$previousL.top,width=_shadowView$previousL.width,height=_shadowView$previousL.height;if(callbackId!=null){_this6.bridge.callbackFromId(callbackId)(left,top,width,height,globalX,globalY);}else{resolve({left:left,top:top,width:width,height:height,globalX:globalX,globalY:globalY});}});});}},{key:"measureInWindow",value:function measureInWindow(reactTag,callbackId){var result,globalX,globalY,width,height;return _regenerator2.default.async(function measureInWindow$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regenerator2.default.awrap(this.measure(reactTag));case 2:result=_context2.sent;(0,_Invariant2.default)(result,"No measurement available for view "+reactTag);globalX=result.globalX,globalY=result.globalY,width=result.width,height=result.height;this.bridge.callbackFromId(callbackId)(globalX,globalY,width,height);case 6:case"end":return _context2.stop();}}},null,this);}},{key:"setJSResponder",value:function setJSResponder(reactTag){this.jsResponder=this.viewRegistry.get(reactTag);console.log(this.jsResponder);if(!this.jsResponder){console.error("Invalid view set to be the JS responder - tag "+reactTag);}}},{key:"clearJSResponder",value:function clearJSResponder(){this.jsResponder=null;}},{key:"configureNextLayoutAnimation",value:function configureNextLayoutAnimation(config,onAnimationDidEnd){if(!_CanUse2.default.matchMedia||!window.matchMedia("(prefers-reduced-motion: reduce)").matches){this.layoutAnimationManager.configureNext(config,this.bridge.callbackFromId(onAnimationDidEnd));}}},{key:"addUIBlock",value:function addUIBlock(block){if(block==null||this.viewRegistry==null){return;}this.pendingUIBlocks.push(block);}},{key:"prependUIBlock",value:function prependUIBlock(block){if(!block){return;}this.pendingUIBlocks.unshift(block);}},{key:"setChildren",value:function setChildren(containerTag,reactTags){RCTUIManager.RCTSetChildren(containerTag,reactTags,this.shadowViewRegistry);this.addUIBlock(function(uiManager,viewRegistry){RCTUIManager.RCTSetChildren(containerTag,reactTags,viewRegistry);});}},{key:"createView",value:function createView(reactTag,viewName,rootTag,props){var componentData=this.componentDataByName.get(viewName);(0,_Invariant2.default)(componentData,"No component found for view with name "+viewName);var shadowView=componentData.createShadowView(reactTag);if(shadowView!=null){shadowView.viewName=viewName;componentData.setPropsForShadowView(props,shadowView);this.shadowViewRegistry.set(reactTag,shadowView);}var backgroundColor=shadowView.backgroundColor;var view=componentData.createView(reactTag);if(view!=null){componentData.setPropsForView(props,view);if(typeof view.setBackgroundColor==="function"){view.setBackgroundColor(backgroundColor);}this.viewRegistry.set(reactTag,view);}}},{key:"updateView",value:function updateView(reactTag,viewName,updatedProps){var componentData=this.componentDataByName.get(viewName);(0,_Invariant2.default)(componentData,"No component found for view with name "+viewName);var shadowView=this.shadowViewRegistry.get(reactTag);if(shadowView){componentData.setPropsForShadowView(updatedProps,shadowView);}var view=this.viewRegistry.get(reactTag);if(view){componentData.setPropsForView(updatedProps,view);}}},{key:"synchronouslyUpdateView",value:function synchronouslyUpdateView(reactTag,viewName,props){var componentData=this.componentDataByName.get(viewName);(0,_Invariant2.default)(componentData,"No component found for view with name "+viewName);var view=this.viewRegistry.get(reactTag);if(view){componentData.setPropsForView(props,view);}}},{key:"replaceExistingNonRootView",value:function replaceExistingNonRootView(reactTag,newReactTag){var shadowView=this.shadowViewRegistry.get(reactTag);(0,_Invariant2.default)(shadowView,"shadowView (for ID "+reactTag+") not found");var superShadowView=shadowView.reactSuperview;(0,_Invariant2.default)(superShadowView,"shadowView super (of ID "+reactTag+") not found");var indexOfView=superShadowView.reactSubviews.indexOf(shadowView);(0,_Invariant2.default)(indexOfView!==-1,"View's superview does't claim it as subview");var removeAtIndices=[indexOfView];var addTags=[newReactTag];this.manageChildren(superShadowView.reactTag,null,null,addTags,removeAtIndices,removeAtIndices);}},{key:"findSubviewIn",value:function findSubviewIn(reactTag,atPoint,callbackId){var _atPoint,x,y,view,target,measurement,globalX,globalY,width,height;return _regenerator2.default.async(function findSubviewIn$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_atPoint=(0,_slicedToArray3.default)(atPoint,2),x=_atPoint[0],y=_atPoint[1];view=this.viewRegistry.get(reactTag);(0,_Invariant2.default)(view,"No such view with tag "+reactTag);target=reactViewFromPoint(view,x,y);if(!(!target||!(target instanceof _UIView2.default))){_context3.next=6;break;}return _context3.abrupt("return");case 6:_context3.next=8;return _regenerator2.default.awrap(this.measure(target.reactTag));case 8:measurement=_context3.sent;(0,_Invariant2.default)(measurement,"View with tag "+target.reactTag+" has no measurement");globalX=measurement.globalX,globalY=measurement.globalY,width=measurement.width,height=measurement.height;this.bridge.callbackFromId(callbackId)(target.reactTag,globalX,globalY,width,height);case 12:case"end":return _context3.stop();}}},null,this);}},{key:"manageChildren",value:function manageChildren(tag,moveFrom,moveTo,addChildTags,addAtIndices,removeFrom){var _this7=this;var viewToManage=this.viewRegistry.get(tag);var shadowViewToManage=this.shadowViewRegistry.get(tag);if(!viewToManage||!shadowViewToManage)return;var numToMove=!moveFrom?0:moveFrom.length;var viewsToAdd=[];var indicesToRemove=[];var tagsToRemove=[];var tagsToDelete=[];if(moveFrom&&moveTo){for(var i=0;i<moveFrom.length;i++){var moveFromIndex=moveFrom[i];var tagToMove=viewToManage.reactSubviews[moveFromIndex].reactTag;viewsToAdd[i]={tag:tagToMove,index:moveTo[i]};indicesToRemove[i]=moveFromIndex;tagsToRemove[i]=tagToMove;}}if(addChildTags){for(var _i2=0;_i2<addChildTags.length;_i2++){var viewTagToAdd=addChildTags[_i2];var indexToAddAt=addAtIndices[_i2];viewsToAdd[numToMove+_i2]={tag:viewTagToAdd,index:indexToAddAt};}}if(removeFrom){for(var _i3=0;_i3<removeFrom.length;_i3++){var indexToRemove=removeFrom[_i3];if(viewToManage.reactSubviews[indexToRemove]){var tagToRemove=viewToManage.reactSubviews[indexToRemove].reactTag;indicesToRemove[numToMove+_i3]=indexToRemove;tagsToRemove[numToMove+_i3]=tagToRemove;tagsToDelete[_i3]=tagToRemove;}}}viewsToAdd.sort(function(a,b){return a.index-b.index;});indicesToRemove.sort(function(a,b){return a-b;});var _loop2=function _loop2(_i4){var childIndex=indicesToRemove[_i4];var shadowSubView=undefined;if(shadowViewToManage instanceof RCTShadowText){shadowSubView=shadowViewToManage.textChildren[childIndex];}else{shadowSubView=shadowViewToManage.reactSubviews[childIndex];}if(shadowSubView)shadowViewToManage.removeReactSubview(shadowSubView);if(!_this7.layoutAnimationManager.isPending()){_this7.addUIBlock(function(uiManager,viewRegistry){var subView=viewToManage.reactSubviews[childIndex];viewToManage.removeReactSubview(subView);});}};for(var _i4=indicesToRemove.length-1;_i4>=0;_i4--){_loop2(_i4);}var _loop3=function _loop3(_i5){var _viewsToAdd$_i=viewsToAdd[_i5],tagToAdd=_viewsToAdd$_i.tag,indexToAdd=_viewsToAdd$_i.index;var shadowSubView=_this7.shadowViewRegistry.get(tagToAdd);if(shadowSubView){shadowViewToManage.insertReactSubviewAtIndex(shadowSubView,indexToAdd);shadowSubView.makeDirty();}_this7.addUIBlock(function(uiManager,viewRegistry){var subView=viewRegistry.get(tagToAdd);(0,_Invariant2.default)(subView,"Attempted to insert subview with tag "+tagToAdd+" that does not exist");viewToManage.insertReactSubviewAtIndex(subView,indexToAdd);});};for(var _i5=0;_i5<viewsToAdd.length;_i5++){_loop3(_i5);}for(var _i6=0;_i6<tagsToDelete.length;_i6++){this.purgeView(tagsToDelete[_i6]);}}},{key:"focus",value:function focus(reactTag){}},{key:"blur",value:function blur(reactTag){}},{key:"constantsToExport",value:function constantsToExport(){var constants={};var bubblingEvents={};var directEvents={};for(var _iterator2=this.componentDataByName,_isArray2=Array.isArray(_iterator2),_i7=0,_iterator2=_isArray2?_iterator2:_iterator2[typeof Symbol==="function"?typeof Symbol==="function"?Symbol.iterator:"@@iterator":"@@iterator"]();;){var _ref5;if(_isArray2){if(_i7>=_iterator2.length)break;_ref5=_iterator2[_i7++];}else{_i7=_iterator2.next();if(_i7.done)break;_ref5=_i7.value;}var _ref3=_ref5;var _ref4=(0,_slicedToArray3.default)(_ref3,2);var name=_ref4[0];var componentData=_ref4[1];var moduleConstants={};var bubblingEventTypes={};var directEventTypes={};moduleConstants.Manager=(0,_RCTBridge.bridgeModuleNameForClass)(componentData.managerClass);var viewConfig=componentData.viewConfig;moduleConstants.NativeProps=viewConfig.propTypes;moduleConstants.baseModuleName=viewConfig.baseModuleName;for(var _iterator3=viewConfig.directEvents,_isArray3=Array.isArray(_iterator3),_i8=0,_iterator3=_isArray3?_iterator3:_iterator3[typeof Symbol==="function"?typeof Symbol==="function"?Symbol.iterator:"@@iterator":"@@iterator"]();;){var _ref6;if(_isArray3){if(_i8>=_iterator3.length)break;_ref6=_iterator3[_i8++];}else{_i8=_iterator3.next();if(_i8.done)break;_ref6=_i8.value;}var eventName=_ref6;if(!directEvents[eventName]){directEvents[eventName]={registrationName:"on"+eventName.substring(3)};}directEventTypes[eventName]=directEvents[eventName];}moduleConstants.directEventTypes=directEventTypes;for(var _iterator4=viewConfig.bubblingEvents,_isArray4=Array.isArray(_iterator4),_i9=0,_iterator4=_isArray4?_iterator4:_iterator4[typeof Symbol==="function"?typeof Symbol==="function"?Symbol.iterator:"@@iterator":"@@iterator"]();;){var _ref7;if(_isArray4){if(_i9>=_iterator4.length)break;_ref7=_iterator4[_i9++];}else{_i9=_iterator4.next();if(_i9.done)break;_ref7=_i9.value;}var _eventName=_ref7;if(!bubblingEvents[_eventName]){var bubbleName="on"+_eventName.substring(3);bubblingEvents[_eventName]={phasedRegistrationNames:{bubbled:bubbleName,captured:bubbleName+"Capture"}};}bubblingEventTypes[_eventName]=bubblingEvents[_eventName];}moduleConstants.bubblingEventTypes=bubblingEventTypes;constants[name]=moduleConstants;}return constants;}},{key:"allocateRootTag",get:function get(){var tag=rootTagCounter;rootTagCounter++;return tag*10+1;}}],[{key:"RCTSetChildren",value:function RCTSetChildren(containerTag,reactTags,registry){var container=registry.get(containerTag);var index=0;reactTags.forEach(function(reactTag){var view=registry.get(reactTag);(0,_Invariant2.default)(container,"No container view found with id: "+containerTag);(0,_Invariant2.default)(view,"No view found with id: "+reactTag);container.insertReactSubviewAtIndex(view,index++);});}}]);return RCTUIManager;}(),(_applyDecoratedDescriptor(_class2.prototype,"measure",[_dec2],Object.getOwnPropertyDescriptor(_class2.prototype,"measure"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"measureInWindow",[_dec3],Object.getOwnPropertyDescriptor(_class2.prototype,"measureInWindow"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"setJSResponder",[_dec4],Object.getOwnPropertyDescriptor(_class2.prototype,"setJSResponder"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"clearJSResponder",[_dec5],Object.getOwnPropertyDescriptor(_class2.prototype,"clearJSResponder"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"configureNextLayoutAnimation",[_dec6],Object.getOwnPropertyDescriptor(_class2.prototype,"configureNextLayoutAnimation"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"setChildren",[_dec7],Object.getOwnPropertyDescriptor(_class2.prototype,"setChildren"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"createView",[_dec8],Object.getOwnPropertyDescriptor(_class2.prototype,"createView"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"updateView",[_dec9],Object.getOwnPropertyDescriptor(_class2.prototype,"updateView"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"replaceExistingNonRootView",[_dec10],Object.getOwnPropertyDescriptor(_class2.prototype,"replaceExistingNonRootView"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"findSubviewIn",[_dec11],Object.getOwnPropertyDescriptor(_class2.prototype,"findSubviewIn"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"manageChildren",[_dec12],Object.getOwnPropertyDescriptor(_class2.prototype,"manageChildren"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"focus",[_dec13],Object.getOwnPropertyDescriptor(_class2.prototype,"focus"),_class2.prototype),_applyDecoratedDescriptor(_class2.prototype,"blur",[_dec14],Object.getOwnPropertyDescriptor(_class2.prototype,"blur"),_class2.prototype)),_class2))||_class);return _context4.abrupt("return",RCTUIManager);case 11:case"end":return _context4.stop();}}},null,_this8);}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL1JlYWN0RG9tL21vZHVsZXMvUkNUVUlNYW5hZ2VyLmpzIl0sIm5hbWVzIjpbInJvb3RUYWdDb3VudGVyIiwiYnlQb3NpdGlvbiIsImEiLCJiIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJzb3VyY2VJbmRleCIsInJlYWN0Vmlld0Zyb21Qb2ludCIsInRvcFZpZXciLCJ4IiwieSIsImVsZW1lbnQiLCJlbGVtZW50cyIsIm9sZF92aXNpYmlsaXR5IiwiZG9jdW1lbnQiLCJlbGVtZW50RnJvbVBvaW50IiwiZG9jdW1lbnRFbGVtZW50IiwicHVzaCIsInN0eWxlIiwidmlzaWJpbGl0eSIsImsiLCJsZW5ndGgiLCJmaWx0ZXIiLCJlbGVtIiwiY29udGFpbnMiLCJzb3J0IiwibW9kdWxlIiwiZXhwb3J0cyIsIlJDVFNoYWRvd1ZpZXciLCJSQ1RSb290U2hhZG93VmlldyIsIlJDVFNoYWRvd1RleHQiLCJSQ1RVSU1hbmFnZXIiLCJicmlkZ2UiLCJwZW5kaW5nVUlCbG9ja3MiLCJkaWRVcGRhdGVEaW1lbnNpb25zIiwid2luZG93Iiwid2lkdGgiLCJoZWlnaHQiLCJzY2FsZSIsInJvb3RWaWV3VGFnIiwicm9vdFZpZXciLCJ2aWV3UmVnaXN0cnkiLCJnZXQiLCJhZGRVSUJsb2NrIiwic2V0QXZhaWxhYmxlU2l6ZSIsInJvb3RWaWV3VGFncyIsInJlcXVlc3RUaWNrIiwic2hhZG93Vmlld1JlZ2lzdHJ5IiwiTWFwIiwiU2V0IiwiY29tcG9uZW50RGF0YUJ5TmFtZSIsIm1vZHVsZUNsYXNzZXMiLCJmb3JFYWNoIiwibW9kdWxlQ2xhc3MiLCJfX2lzVmlld01hbmFnZXIiLCJjb21wb25lbnREYXRhIiwic2V0IiwibmFtZSIsImxheW91dEFuaW1hdGlvbk1hbmFnZXIiLCJvYnNlcnZlckNvb3JkaW5hdG9yIiwiZGV2aWNlSW5mb01vZHVsZSIsIm1vZHVsZXNCeU5hbWUiLCJhZGRMaXN0ZW5lciIsInJlYWN0VGFnIiwiYXZhaWxhYmxlU2l6ZSIsInNoYWRvd1ZpZXciLCJ2aWV3TmFtZSIsImNvbnN0cnVjdG9yIiwicGl4ZWxSYXRpbyIsImRldmljZUluZm8iLCJnZXREZXZpY2VQaXhlbFJhdGlvIiwidXBkYXRlUG9pbnRTY2FsZUZhY3RvciIsImFkZCIsInNpemUiLCJyb290U2hhZG93VmlldyIsInVwZGF0ZUF2YWlsYWJsZVNpemUiLCJsb2NhbERhdGEiLCJ2aWV3IiwidGFnIiwiY29uc29sZSIsIndhcm4iLCJjb21wbGV0aW9uIiwiZGVsZXRlIiwicHVyZ2UiLCJpc1BlbmRpbmciLCJyZWFjdFN1cGVydmlldyIsInJlbW92ZVJlYWN0U3VidmlldyIsInF1ZXVlUmVtb3ZlZE5vZGUiLCJ1aU1hbmFnZXIiLCJ1aU1hbmFnZXJXaWxsUGVyZm9ybUxheW91dCIsInJvb3RUYWciLCJpc0RpcnR5IiwibGF5b3V0Q2hhbmdlcyIsInJlY2FsY3VsYXRlTGF5b3V0IiwiYWRkTGF5b3V0Q2hhbmdlcyIsImFwcGx5TGF5b3V0Q2hhbmdlcyIsInVpTWFuYWdlckRpZFBlcmZvcm1MYXlvdXQiLCJ1aU1hbmFnZXJXaWxsRmx1c2hCbG9ja3MiLCJ1aUJsb2NrcyIsImJsb2NrIiwiY2FsbCIsImxheW91dENoYW5nZSIsImxheW91dCIsImZyYW1lIiwiY2FsbGJhY2tJZCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwibWVhc3VyZW1lbnQiLCJtZWFzdXJlR2xvYmFsIiwiZ2xvYmFsWCIsImdsb2JhbFkiLCJwcmV2aW91c0xheW91dCIsImxlZnQiLCJ0b3AiLCJjYWxsYmFja0Zyb21JZCIsIm1lYXN1cmUiLCJyZXN1bHQiLCJqc1Jlc3BvbmRlciIsImxvZyIsImVycm9yIiwiY29uZmlnIiwib25BbmltYXRpb25EaWRFbmQiLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsImNvbmZpZ3VyZU5leHQiLCJ1bnNoaWZ0IiwiY29udGFpbmVyVGFnIiwicmVhY3RUYWdzIiwiUkNUU2V0Q2hpbGRyZW4iLCJwcm9wcyIsImNyZWF0ZVNoYWRvd1ZpZXciLCJzZXRQcm9wc0ZvclNoYWRvd1ZpZXciLCJiYWNrZ3JvdW5kQ29sb3IiLCJjcmVhdGVWaWV3Iiwic2V0UHJvcHNGb3JWaWV3Iiwic2V0QmFja2dyb3VuZENvbG9yIiwidXBkYXRlZFByb3BzIiwibmV3UmVhY3RUYWciLCJzdXBlclNoYWRvd1ZpZXciLCJpbmRleE9mVmlldyIsInJlYWN0U3Vidmlld3MiLCJpbmRleE9mIiwicmVtb3ZlQXRJbmRpY2VzIiwiYWRkVGFncyIsIm1hbmFnZUNoaWxkcmVuIiwiYXRQb2ludCIsInRhcmdldCIsIm1vdmVGcm9tIiwibW92ZVRvIiwiYWRkQ2hpbGRUYWdzIiwiYWRkQXRJbmRpY2VzIiwicmVtb3ZlRnJvbSIsInZpZXdUb01hbmFnZSIsInNoYWRvd1ZpZXdUb01hbmFnZSIsIm51bVRvTW92ZSIsInZpZXdzVG9BZGQiLCJpbmRpY2VzVG9SZW1vdmUiLCJ0YWdzVG9SZW1vdmUiLCJ0YWdzVG9EZWxldGUiLCJpIiwibW92ZUZyb21JbmRleCIsInRhZ1RvTW92ZSIsImluZGV4Iiwidmlld1RhZ1RvQWRkIiwiaW5kZXhUb0FkZEF0IiwiaW5kZXhUb1JlbW92ZSIsInRhZ1RvUmVtb3ZlIiwiY2hpbGRJbmRleCIsInNoYWRvd1N1YlZpZXciLCJ1bmRlZmluZWQiLCJ0ZXh0Q2hpbGRyZW4iLCJzdWJWaWV3IiwidGFnVG9BZGQiLCJpbmRleFRvQWRkIiwiaW5zZXJ0UmVhY3RTdWJ2aWV3QXRJbmRleCIsIm1ha2VEaXJ0eSIsInB1cmdlVmlldyIsImNvbnN0YW50cyIsImJ1YmJsaW5nRXZlbnRzIiwiZGlyZWN0RXZlbnRzIiwibW9kdWxlQ29uc3RhbnRzIiwiYnViYmxpbmdFdmVudFR5cGVzIiwiZGlyZWN0RXZlbnRUeXBlcyIsIk1hbmFnZXIiLCJtYW5hZ2VyQ2xhc3MiLCJ2aWV3Q29uZmlnIiwiTmF0aXZlUHJvcHMiLCJwcm9wVHlwZXMiLCJiYXNlTW9kdWxlTmFtZSIsImV2ZW50TmFtZSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJzdWJzdHJpbmciLCJidWJibGVOYW1lIiwicGhhc2VkUmVnaXN0cmF0aW9u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TEFBaUQsbUpBQXhDVyxXQUF3QyxPQUMvQyxHQUFJLENBQUNYLGVBQWVXLFVBQWYsQ0FBTCxDQUFnQyxDQUM5QixHQUFNRyxpQkFBa0JILFdBQVVFLFNBQVYsQ0FBb0IsQ0FBcEIsQ0FBeEIsQ0FDQWIsZUFBZVcsVUFBZixFQUE0QixDQUMxQkksd0JBQXlCLENBQ3ZCQyxRQUFTRixVQURjLENBRXZCRyxTQUFhSCxVQUFiLFVBRnVCLENBREMsQ0FBNUIsQ0FNRCxDQUNEWCxtQkFBbUJRLFVBQW5CLEVBQWdDWCxlQUFlVyxVQUFmLENBQWhDLENBQ0QsQ0FDRFQsZ0JBQWdCQyxrQkFBaEIsQ0FBcUNBLGtCQUFyQyxDQUVBSixVQUFVekgsSUFBVixFQUFrQjRILGVBQWxCLENBQ0QsQ0FFRCxNQUFPSCxVQUFQLENBQ0QsQ0E1ckJhLDJDQXNFZ0IsQ0FDNUIsR0FBTXBHLEtBQU03RSxjQUFaLENBQ0FBLGlCQUNBLE1BQU82RSxLQUFNLEVBQU4sQ0FBVyxDQUFsQixDQUNELENBMUVhLHdEQXNXWmlELFlBdFdZLENBdVdaQyxTQXZXWSxDQXdXWnFFLFFBeFdZLENBeVdaLENBQ0EsR0FBTUMsV0FBWUQsU0FBUzNKLEdBQVQsQ0FBYXFGLFlBQWIsQ0FBbEIsQ0FDQSxHQUFJb0MsT0FBUSxDQUFaLENBQ0FuQyxVQUFVNUUsT0FBVixDQUFrQixTQUFDVyxRQUFELENBQWMsQ0FDOUIsR0FBTWMsTUFBT3dILFNBQVMzSixHQUFULENBQWFxQixRQUFiLENBQWIsQ0FDQSx3QkFDRXVJLFNBREYscUNBRXNDdkUsWUFGdEMsRUFJQSx3QkFBVWxELElBQVYsMkJBQTBDZCxRQUExQyxFQUNBdUksVUFBVXZCLHlCQUFWLENBQW9DbEcsSUFBcEMsQ0FBMENzRixPQUExQyxFQUNELENBUkQsRUFTRCxDQXJYYSxpakVBK3JCVHBJLFlBL3JCUyw4REFBRCxFQUFqQiIsImZpbGUiOiJSQ1RVSU1hbmFnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcm92aWRlc01vZHVsZSBSQ1RVSU1hbmFnZXJcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiSW52YXJpYW50XCI7XG5pbXBvcnQgUkNUQnJpZGdlLCB7XG4gIFJDVF9FWFBPUlRfTU9EVUxFLFxuICBSQ1RfRVhQT1JUX01FVEhPRCxcbiAgYnJpZGdlTW9kdWxlTmFtZUZvckNsYXNzLFxuICBSQ1RGdW5jdGlvblR5cGVOb3JtYWxcbn0gZnJvbSBcIlJDVEJyaWRnZVwiO1xuaW1wb3J0IFVJVmlldyBmcm9tIFwiVUlWaWV3XCI7XG5pbXBvcnQgUkNUVmlldyBmcm9tIFwiUkNUVmlld1wiO1xuaW1wb3J0IFJDVFJvb3RWaWV3IGZyb20gXCJSQ1RSb290Vmlld1wiO1xuaW1wb3J0IFJDVERldmljZUluZm8gZnJvbSBcIlJDVERldmljZUluZm9cIjtcbmltcG9ydCBSQ1RMYXlvdXRBbmltYXRpb25NYW5hZ2VyIGZyb20gXCJSQ1RMYXlvdXRBbmltYXRpb25NYW5hZ2VyXCI7XG5pbXBvcnQgUkNUVUlNYW5hZ2VyT2JzZXJ2ZXJDb29yZGluYXRvciBmcm9tIFwiUkNUVUlNYW5hZ2VyT2JzZXJ2ZXJDb29yZGluYXRvclwiO1xuaW1wb3J0IFJDVENvbXBvbmVudERhdGEgZnJvbSBcIlJDVENvbXBvbmVudERhdGFcIjtcbmltcG9ydCBDYW5Vc2UgZnJvbSBcIkNhblVzZVwiO1xuaW1wb3J0IGluc3RydW1lbnQgZnJvbSBcIkluc3RydW1lbnRcIjtcblxuaW1wb3J0IHR5cGUgeyBSQ1RDb21wb25lbnQgfSBmcm9tIFwiUkNUQ29tcG9uZW50XCI7XG5pbXBvcnQgdHlwZSB7IExheW91dENoYW5nZSB9IGZyb20gXCJSQ1RTaGFkb3dWaWV3XCI7XG5pbXBvcnQgdHlwZSB7IExheW91dEFuaW1hdGlvbkNvbmZpZyB9IGZyb20gXCJSQ1RMYXlvdXRBbmltYXRpb25NYW5hZ2VyXCI7XG5cbmltcG9ydCBfUkNUU2hhZG93VmlldyBmcm9tIFwiUkNUU2hhZG93Vmlld1wiO1xuaW1wb3J0IF9SQ1RSb290U2hhZG93VmlldyBmcm9tIFwiUkNUUm9vdFNoYWRvd1ZpZXdcIjtcbmltcG9ydCBfUkNUU2hhZG93VGV4dCBmcm9tIFwiUkNUU2hhZG93VGV4dFwiO1xuXG50eXBlIFNoYWRvd1ZpZXcgPSBhbnk7XG50eXBlIFNpemUgPSB7IHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyIH07XG5cbmxldCByb290VGFnQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGJ5UG9zaXRpb24oYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIDA7XG4gIGlmICghYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgIHJldHVybiBiLnNvdXJjZUluZGV4IC0gYS5zb3VyY2VJbmRleDtcbiAgfVxuICBpZiAoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSAmIDIpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgcmV0dXJuIDE7XG59XG5cbi8vIERvZXNuJ3QgZ2V0IG1vcmUgaGFja3kgdGhhbiB0aGlzIGZvbGtzXG5mdW5jdGlvbiByZWFjdFZpZXdGcm9tUG9pbnQodG9wVmlldzogVUlWaWV3LCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICB2YXIgZWxlbWVudCxcbiAgICBlbGVtZW50cyA9IFtdO1xuICB2YXIgb2xkX3Zpc2liaWxpdHkgPSBbXTtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBlbGVtZW50ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh4LCB5KTtcbiAgICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICBvbGRfdmlzaWJpbGl0eS5wdXNoKGVsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSk7XG4gICAgZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjsgLy8gVGVtcG9yYXJpbHkgaGlkZSB0aGUgZWxlbWVudCAod2l0aG91dCBjaGFuZ2luZyB0aGUgbGF5b3V0KVxuICB9XG4gIGZvciAodmFyIGsgPSAwOyBrIDwgZWxlbWVudHMubGVuZ3RoOyBrKyspIHtcbiAgICBlbGVtZW50c1trXS5zdHlsZS52aXNpYmlsaXR5ID0gb2xkX3Zpc2liaWxpdHlba107XG4gIH1cblxuICBlbGVtZW50cyA9IGVsZW1lbnRzLmZpbHRlcihcbiAgICAoZWxlbSkgPT4gdG9wVmlldy5jb250YWlucyhlbGVtKSAmJiBlbGVtIGluc3RhbmNlb2YgVUlWaWV3XG4gICk7XG4gIGVsZW1lbnRzLnNvcnQoYnlQb3NpdGlvbik7XG5cbiAgcmV0dXJuIGVsZW1lbnRzWzBdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IChhc3luYyAoKSA9PiB7XG4gIGNvbnN0IFJDVFNoYWRvd1ZpZXcgPSBhd2FpdCBfUkNUU2hhZG93VmlldztcbiAgY29uc3QgUkNUUm9vdFNoYWRvd1ZpZXcgPSBhd2FpdCBfUkNUUm9vdFNoYWRvd1ZpZXc7XG4gIGNvbnN0IFJDVFNoYWRvd1RleHQgPSBhd2FpdCBfUkNUU2hhZG93VGV4dDtcblxuICB0eXBlIFVJQmxvY2sgPSAoUkNUVUlNYW5hZ2VyLCBNYXA8bnVtYmVyLCBVSVZpZXc+KSA9PiB2b2lkO1xuXG4gIEBSQ1RfRVhQT1JUX01PRFVMRShcIlJDVFVJTWFuYWdlclwiKVxuICBjbGFzcyBSQ1RVSU1hbmFnZXIge1xuICAgIGJyaWRnZTogUkNUQnJpZGdlO1xuICAgIHJvb3RWaWV3VGFnczogU2V0PG51bWJlcj47XG4gICAgc2hhZG93Vmlld1JlZ2lzdHJ5OiBNYXA8bnVtYmVyLCBSQ1RTaGFkb3dWaWV3PjtcbiAgICB2aWV3UmVnaXN0cnk6IE1hcDxudW1iZXIsIFVJVmlldz47XG4gICAgY29tcG9uZW50RGF0YUJ5TmFtZTogTWFwPHN0cmluZywgUkNUQ29tcG9uZW50RGF0YT47XG4gICAganNSZXNwb25kZXI6ID9VSVZpZXc7XG4gICAgbGF5b3V0QW5pbWF0aW9uTWFuYWdlcjogUkNUTGF5b3V0QW5pbWF0aW9uTWFuYWdlcjtcbiAgICBvYnNlcnZlckNvb3JkaW5hdG9yOiBSQ1RVSU1hbmFnZXJPYnNlcnZlckNvb3JkaW5hdG9yO1xuXG4gICAgcGVuZGluZ1VJQmxvY2tzOiBBcnJheTxVSUJsb2NrPiA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IoYnJpZGdlOiBSQ1RCcmlkZ2UpIHtcbiAgICAgIHRoaXMuYnJpZGdlID0gYnJpZGdlO1xuXG4gICAgICB0aGlzLnNoYWRvd1ZpZXdSZWdpc3RyeSA9IG5ldyBNYXAoKTtcbiAgICAgIHRoaXMudmlld1JlZ2lzdHJ5ID0gbmV3IE1hcCgpO1xuXG4gICAgICAvLyBJbnRlcm5hbCByZXNvdXJjZXNcbiAgICAgIHRoaXMucm9vdFZpZXdUYWdzID0gbmV3IFNldCgpO1xuXG4gICAgICAvLyBHZXQgdmlldyBtYW5hZ2VycyBmcm9tIGJyaWRnZVxuICAgICAgdGhpcy5jb21wb25lbnREYXRhQnlOYW1lID0gbmV3IE1hcCgpO1xuICAgICAgdGhpcy5icmlkZ2UubW9kdWxlQ2xhc3Nlcy5mb3JFYWNoKChtb2R1bGVDbGFzczogYW55KSA9PiB7XG4gICAgICAgIGlmIChtb2R1bGVDbGFzcy5fX2lzVmlld01hbmFnZXIpIHtcbiAgICAgICAgICBjb25zdCBjb21wb25lbnREYXRhID0gbmV3IFJDVENvbXBvbmVudERhdGEobW9kdWxlQ2xhc3MsIHRoaXMuYnJpZGdlKTtcbiAgICAgICAgICB0aGlzLmNvbXBvbmVudERhdGFCeU5hbWUuc2V0KGNvbXBvbmVudERhdGEubmFtZSwgY29tcG9uZW50RGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLmxheW91dEFuaW1hdGlvbk1hbmFnZXIgPSBuZXcgUkNUTGF5b3V0QW5pbWF0aW9uTWFuYWdlcih0aGlzKTtcbiAgICAgIHRoaXMub2JzZXJ2ZXJDb29yZGluYXRvciA9IG5ldyBSQ1RVSU1hbmFnZXJPYnNlcnZlckNvb3JkaW5hdG9yKCk7XG5cbiAgICAgIGludmFyaWFudCh0aGlzLmJyaWRnZSwgXCJCcmlkZ2UgbXVzdCBiZSBzZXRcIik7XG4gICAgICBjb25zdCBkZXZpY2VJbmZvTW9kdWxlOiBSQ1REZXZpY2VJbmZvID0gKHRoaXMuYnJpZGdlLm1vZHVsZXNCeU5hbWVbXG4gICAgICAgIFwiRGV2aWNlSW5mb1wiXG4gICAgICBdOiBhbnkpO1xuICAgICAgZGV2aWNlSW5mb01vZHVsZS5hZGRMaXN0ZW5lcihcbiAgICAgICAgXCJkaWRVcGRhdGVEaW1lbnNpb25zXCIsXG4gICAgICAgIHRoaXMuZGlkVXBkYXRlRGltZW5zaW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBkaWRVcGRhdGVEaW1lbnNpb25zID0gKHsgd2luZG93OiB7IHdpZHRoLCBoZWlnaHQsIHNjYWxlIH0gfTogYW55KSA9PiB7XG4gICAgICAvLyB0aGlzLmJyaWRnZS5HbG9iYWxZb2dhQ29uZmlnLnNldFBvaW50U2NhbGVGYWN0b3Ioc2NhbGUpO1xuXG4gICAgICBmb3IgKGxldCByb290Vmlld1RhZyBvZiB0aGlzLnJvb3RWaWV3VGFncykge1xuICAgICAgICBjb25zdCByb290VmlldyA9IHRoaXMudmlld1JlZ2lzdHJ5LmdldChyb290Vmlld1RhZyk7XG5cbiAgICAgICAgaW52YXJpYW50KHJvb3RWaWV3LCBcIlJvb3QgdmlldyBtdXN0IGV4aXN0XCIpO1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgcm9vdFZpZXcgaW5zdGFuY2VvZiBSQ1RSb290VmlldyxcbiAgICAgICAgICBcIlZpZXcgbXVzdCBiZSBhbiBSQ1RSb290Vmlld1wiXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYWRkVUlCbG9jaygoKSA9PiB7XG4gICAgICAgICAgdGhpcy5zZXRBdmFpbGFibGVTaXplKHsgd2lkdGgsIGhlaWdodCB9LCBzY2FsZSwgcm9vdFZpZXcpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZXF1ZXN0VGljaygpO1xuICAgIH07XG5cbiAgICBnZXQgYWxsb2NhdGVSb290VGFnKCk6IG51bWJlciB7XG4gICAgICBjb25zdCB0YWcgPSByb290VGFnQ291bnRlcjtcbiAgICAgIHJvb3RUYWdDb3VudGVyKys7XG4gICAgICByZXR1cm4gdGFnICogMTAgKyAxO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgcm9vdCB2aWV3IHdpdGggdGhlIFJDVFVJTWFuYWdlci5cbiAgICAgKi9cbiAgICByZWdpc3RlclJvb3RWaWV3KHJvb3RWaWV3OiBSQ1RSb290Vmlldykge1xuICAgICAgY29uc3QgcmVhY3RUYWcgPSByb290Vmlldy5yZWFjdFRhZztcbiAgICAgIGNvbnN0IGF2YWlsYWJsZVNpemUgPSByb290Vmlldy5hdmFpbGFibGVTaXplO1xuXG4gICAgICAvLyByZWdpc3RlciB2aWV3XG4gICAgICB0aGlzLnZpZXdSZWdpc3RyeS5zZXQocmVhY3RUYWcsIHJvb3RWaWV3KTtcblxuICAgICAgLy8gcmVnaXN0ZXIgc2hhZG93IHZpZXdcbiAgICAgIGNvbnN0IHNoYWRvd1ZpZXcgPSBuZXcgUkNUUm9vdFNoYWRvd1ZpZXcoKTtcbiAgICAgIHNoYWRvd1ZpZXcuYXZhaWxhYmxlU2l6ZSA9IGF2YWlsYWJsZVNpemU7XG4gICAgICBzaGFkb3dWaWV3LnJlYWN0VGFnID0gcmVhY3RUYWc7XG4gICAgICBzaGFkb3dWaWV3LnZpZXdOYW1lID0gcm9vdFZpZXcuY29uc3RydWN0b3IubmFtZTtcblxuICAgICAgY29uc3QgcGl4ZWxSYXRpbyA9IHRoaXMuYnJpZGdlLmRldmljZUluZm8uZ2V0RGV2aWNlUGl4ZWxSYXRpbygpO1xuICAgICAgc2hhZG93Vmlldy51cGRhdGVQb2ludFNjYWxlRmFjdG9yKHBpeGVsUmF0aW8pO1xuXG4gICAgICB0aGlzLnNoYWRvd1ZpZXdSZWdpc3RyeS5zZXQocmVhY3RUYWcsIHNoYWRvd1ZpZXcpO1xuICAgICAgdGhpcy5yb290Vmlld1RhZ3MuYWRkKHJlYWN0VGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGF2YWlsYWJsZSBzaXplIChgYXZhaWxhYmxlU2l6ZWAgcHJvcGVydHkpIGZvciBhIHJvb3Qgdmlldy5cbiAgICAgKiBUaGlzIG1pZ2h0IGJlIHVzZWQgaW4gcmVzcG9uc2UgdG8gY2hhbmdlcyBpbiBleHRlcm5hbCBsYXlvdXQgY29uc3RyYWludHMuXG4gICAgICogVGhpcyB2YWx1ZSB3aWxsIGJlIGRpcmVjdGx5IHRyYXNtaXR0ZWQgdG8gbGF5b3V0IGVuZ2luZSBhbmQgZGVmaW5lcyBob3cgYmlnIHZpZXdwb3J0IGlzO1xuICAgICAqIHRoaXMgdmFsdWUgZG9lcyBub3QgYWZmZWN0IHJvb3Qgbm9kZSBzaXplIHN0eWxlIHByb3BlcnRpZXMuXG4gICAgICogQ2FuIGJlIGNvbnNpZGVyZWQgYXMgc29tZXRoaW5nIHNpbWlsYXIgdG8gYHNldFNpemU6Zm9yVmlldzpgIGJ1dCBhcHBsaWNhYmxlIG9ubHkgZm9yIHJvb3Qgdmlldy5cbiAgICAgKi9cbiAgICBzZXRBdmFpbGFibGVTaXplKHNpemU6IFNpemUsIHNjYWxlOiBudW1iZXIsIHJvb3RWaWV3OiBSQ1RSb290Vmlldyk6IHZvaWQge1xuICAgICAgdGhpcy5wZW5kaW5nVUlCbG9ja3MucHVzaCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlYWN0VGFnID0gcm9vdFZpZXcucmVhY3RUYWc7XG4gICAgICAgIGNvbnN0IHJvb3RTaGFkb3dWaWV3ID0gdGhpcy5zaGFkb3dWaWV3UmVnaXN0cnkuZ2V0KHJlYWN0VGFnKTtcbiAgICAgICAgaWYgKHJvb3RTaGFkb3dWaWV3ICYmIHJvb3RTaGFkb3dWaWV3IGluc3RhbmNlb2YgUkNUUm9vdFNoYWRvd1ZpZXcpXG4gICAgICAgICAgcm9vdFNoYWRvd1ZpZXcudXBkYXRlQXZhaWxhYmxlU2l6ZShzaXplKSAmJlxuICAgICAgICAgICAgcm9vdFNoYWRvd1ZpZXcudXBkYXRlUG9pbnRTY2FsZUZhY3RvcihzY2FsZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXRMb2NhbERhdGFGb3JWaWV3KGxvY2FsRGF0YTogYW55LCB2aWV3OiBVSVZpZXcpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHZpZXcucmVhY3RUYWc7XG4gICAgICBjb25zdCBzaGFkb3dWaWV3ID0gdGhpcy5zaGFkb3dWaWV3UmVnaXN0cnkuZ2V0KHRhZyk7XG4gICAgICBpZiAoc2hhZG93VmlldyA9PSBudWxsKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgQ291bGQgbm90IGxvY2F0ZSBzaGFkb3cgdmlldyB3aXRoIHRhZyAke3RhZ30sIHRoaXMgaXMgcHJvYmFibHkgY2F1c2VkIGJ5IGEgdGVtcG9yYXJ5IGluY29uc2lzdGVuY3kgYmV0d2VlbiBuYXRpdmUgdmlld3MgYW5kIHNoYWRvdyB2aWV3cy5gXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNoYWRvd1ZpZXcubG9jYWxEYXRhID0gbG9jYWxEYXRhO1xuICAgICAgdGhpcy5yZXF1ZXN0VGljaygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgcmVhY3RUYWcgZnJvbSBhIGNvbXBvbmVudCwgZmluZCBpdHMgcm9vdCB2aWV3LCBpZiBwb3NzaWJsZS5cbiAgICAgKiBPdGhlcndpc2UsIHRoaXMgd2lsbCBnaXZlIGJhY2sgbmlsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHJlYWN0VGFnIHRoZSBjb21wb25lbnQgdGFnXG4gICAgICogQHBhcmFtIGNvbXBsZXRpb24gdGhlIGNvbXBsZXRpb24gYmxvY2sgdGhhdCB3aWxsIGhhbmQgb3ZlciB0aGUgcm9vdFZpZXcsIGlmIGFueS5cbiAgICAgKlxuICAgICAqL1xuICAgIHJvb3RWaWV3Rm9yUmVhY3RUYWcocmVhY3RUYWc6IG51bWJlciwgY29tcGxldGlvbjogRnVuY3Rpb24pIHt9XG5cbiAgICB2aWV3TmFtZUZvclJlYWN0VGFnKHJlYWN0VGFnOiBudW1iZXIpOiBzdHJpbmcge1xuICAgICAgY29uc3Qgc2hhZG93VmlldyA9IHRoaXMuc2hhZG93Vmlld1JlZ2lzdHJ5LmdldChyZWFjdFRhZyk7XG4gICAgICBpbnZhcmlhbnQoc2hhZG93VmlldywgYE5vIHN1Y2ggc2hhZG93VmlldyB3aXRoIGlkICR7cmVhY3RUYWd9YCk7XG4gICAgICByZXR1cm4gc2hhZG93Vmlldy52aWV3TmFtZTtcbiAgICB9XG5cbiAgICBwdXJnZVZpZXcocmVhY3RUYWc6IG51bWJlcikge1xuICAgICAgY29uc3Qgc2hhZG93VmlldyA9IHRoaXMuc2hhZG93Vmlld1JlZ2lzdHJ5LmdldChyZWFjdFRhZyk7XG4gICAgICBpZiAoc2hhZG93Vmlldykge1xuICAgICAgICB0aGlzLnNoYWRvd1ZpZXdSZWdpc3RyeS5kZWxldGUocmVhY3RUYWcpO1xuICAgICAgICBzaGFkb3dWaWV3LnB1cmdlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmxheW91dEFuaW1hdGlvbk1hbmFnZXIuaXNQZW5kaW5nKCkpIHtcbiAgICAgICAgY29uc3QgdmlldyA9IHRoaXMudmlld1JlZ2lzdHJ5LmdldChyZWFjdFRhZyk7XG4gICAgICAgIGlmICh2aWV3ICYmIHZpZXcucmVhY3RTdXBlcnZpZXcpIHtcbiAgICAgICAgICB2aWV3LnJlYWN0U3VwZXJ2aWV3LnJlbW92ZVJlYWN0U3Vidmlldyh2aWV3KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxheW91dEFuaW1hdGlvbk1hbmFnZXIucXVldWVSZW1vdmVkTm9kZShyZWFjdFRhZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFkZFVJQmxvY2soKHVpTWFuYWdlciwgdmlld1JlZ2lzdHJ5KSA9PiB7XG4gICAgICAgICAgY29uc3QgdmlldyA9IHZpZXdSZWdpc3RyeS5nZXQocmVhY3RUYWcpO1xuICAgICAgICAgIHZpZXdSZWdpc3RyeS5kZWxldGUocmVhY3RUYWcpO1xuICAgICAgICAgIGlmICh2aWV3KSB7XG4gICAgICAgICAgICB2aWV3LnB1cmdlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBmcmFtZSgpIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXJDb29yZGluYXRvci51aU1hbmFnZXJXaWxsUGVyZm9ybUxheW91dCh0aGlzKTtcblxuICAgICAgdGhpcy5yb290Vmlld1RhZ3MuZm9yRWFjaCgocm9vdFRhZykgPT4ge1xuICAgICAgICBjb25zdCByb290U2hhZG93VmlldyA9IHRoaXMuc2hhZG93Vmlld1JlZ2lzdHJ5LmdldChyb290VGFnKTtcbiAgICAgICAgaWYgKHJvb3RTaGFkb3dWaWV3ICE9IG51bGwgJiYgcm9vdFNoYWRvd1ZpZXcuaXNEaXJ0eSkge1xuICAgICAgICAgIGludmFyaWFudChcbiAgICAgICAgICAgIHJvb3RTaGFkb3dWaWV3IGluc3RhbmNlb2YgUkNUUm9vdFNoYWRvd1ZpZXcsXG4gICAgICAgICAgICBcImF0dGVtcHRpbmcgdG8gcmVjYWxjdWxhdGUgZnJvbSBzaGFkb3dWaWV3IHRoYXQgaXNuJ3Qgcm9vdFwiXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGNvbnN0IGxheW91dENoYW5nZXMgPSBpbnN0cnVtZW50KFwi4pqb77iPIExheW91dFwiLCAoKSA9PlxuICAgICAgICAgICAgcm9vdFNoYWRvd1ZpZXcucmVjYWxjdWxhdGVMYXlvdXQoKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAodGhpcy5sYXlvdXRBbmltYXRpb25NYW5hZ2VyLmlzUGVuZGluZygpKSB7XG4gICAgICAgICAgICB0aGlzLmxheW91dEFuaW1hdGlvbk1hbmFnZXIuYWRkTGF5b3V0Q2hhbmdlcyhsYXlvdXRDaGFuZ2VzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hcHBseUxheW91dENoYW5nZXMobGF5b3V0Q2hhbmdlcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5vYnNlcnZlckNvb3JkaW5hdG9yLnVpTWFuYWdlckRpZFBlcmZvcm1MYXlvdXQodGhpcyk7XG5cbiAgICAgIGlmICh0aGlzLmxheW91dEFuaW1hdGlvbk1hbmFnZXIuaXNQZW5kaW5nKCkpIHtcbiAgICAgICAgaW5zdHJ1bWVudChcIuKam++4jyBMYXlvdXRBbmltYXRpb24gQ29uc3RydWN0aW9uXCIsICgpID0+IHtcbiAgICAgICAgICB0aGlzLmxheW91dEFuaW1hdGlvbk1hbmFnZXIuYXBwbHlMYXlvdXRDaGFuZ2VzKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm9ic2VydmVyQ29vcmRpbmF0b3IudWlNYW5hZ2VyV2lsbEZsdXNoQmxvY2tzKHRoaXMpO1xuXG4gICAgICBpbnN0cnVtZW50KFwi4pqb77iPIFN0eWxlXCIsICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMucGVuZGluZ1VJQmxvY2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCB1aUJsb2NrcyA9IFsuLi50aGlzLnBlbmRpbmdVSUJsb2Nrc107XG4gICAgICAgICAgdGhpcy5wZW5kaW5nVUlCbG9ja3MgPSBbXTtcblxuICAgICAgICAgIHVpQmxvY2tzLmZvckVhY2goKGJsb2NrKSA9PiB7XG4gICAgICAgICAgICBibG9jay5jYWxsKG51bGwsIHRoaXMsIHRoaXMudmlld1JlZ2lzdHJ5KTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHRoaXMucmVxdWVzdFRpY2soKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2hvdWxkQ29udGludWUoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gdGhpcy5wZW5kaW5nVUlCbG9ja3MubGVuZ3RoICE9PSAwO1xuICAgIH1cblxuICAgIHJlcXVlc3RUaWNrKCkge1xuICAgICAgdGhpcy5yb290Vmlld1RhZ3MuZm9yRWFjaCgocm9vdFZpZXdUYWcpID0+IHtcbiAgICAgICAgY29uc3Qgcm9vdFZpZXcgPSB0aGlzLnZpZXdSZWdpc3RyeS5nZXQocm9vdFZpZXdUYWcpO1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgcm9vdFZpZXcgJiYgcm9vdFZpZXcgaW5zdGFuY2VvZiBSQ1RSb290VmlldyxcbiAgICAgICAgICBgUm9vdFZpZXcgKHdpdGggSUQgJHtyb290Vmlld1RhZ30pIGRvZXMgbm90IGV4aXN0YFxuICAgICAgICApO1xuICAgICAgICByb290Vmlldy5yZXF1ZXN0VGljaygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXBwbHlMYXlvdXRDaGFuZ2VzKGxheW91dENoYW5nZXM6IExheW91dENoYW5nZVtdKSB7XG4gICAgICBsYXlvdXRDaGFuZ2VzLmZvckVhY2goKGxheW91dENoYW5nZSkgPT4ge1xuICAgICAgICBjb25zdCB7IHJlYWN0VGFnLCBsYXlvdXQgfSA9IGxheW91dENoYW5nZTtcbiAgICAgICAgdGhpcy5hZGRVSUJsb2NrKCh1aU1hbmFnZXIsIHZpZXdSZWdpc3RyeSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHZpZXcgPSB2aWV3UmVnaXN0cnkuZ2V0KHJlYWN0VGFnKTtcbiAgICAgICAgICBpbnZhcmlhbnQodmlldywgYFZpZXcgd2l0aCByZWFjdFRhZyAke3JlYWN0VGFnfSBkb2VzIG5vdCBleGlzdGApO1xuICAgICAgICAgIHZpZXcuZnJhbWUgPSBsYXlvdXQ7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgQFJDVF9FWFBPUlRfTUVUSE9EKFJDVEZ1bmN0aW9uVHlwZU5vcm1hbClcbiAgICBtZWFzdXJlKHJlYWN0VGFnOiBudW1iZXIsIGNhbGxiYWNrSWQ6ID9udW1iZXIpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHRoaXMuYWRkVUlCbG9jaygoKSA9PiB7XG4gICAgICAgICAgbGV0IHNoYWRvd1ZpZXcgPSB0aGlzLnNoYWRvd1ZpZXdSZWdpc3RyeS5nZXQocmVhY3RUYWcpO1xuICAgICAgICAgIGxldCB2aWV3ID0gdGhpcy52aWV3UmVnaXN0cnkuZ2V0KHJlYWN0VGFnKTtcblxuICAgICAgICAgIGlmICghc2hhZG93VmlldyB8fCAhc2hhZG93Vmlldy5tZWFzdXJlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHsgZ2xvYmFsWCwgZ2xvYmFsWSB9ID0gc2hhZG93Vmlldy5tZWFzdXJlR2xvYmFsKCk7XG5cbiAgICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgICBzaGFkb3dWaWV3LnByZXZpb3VzTGF5b3V0LFxuICAgICAgICAgICAgXCJTaGFkb3cgdmlldyBoYXMgbm8gcHJldmlvdXMgbGF5b3V0XCJcbiAgICAgICAgICApO1xuICAgICAgICAgIGxldCB7IGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCB9ID0gc2hhZG93Vmlldy5wcmV2aW91c0xheW91dDtcblxuICAgICAgICAgIGlmIChjYWxsYmFja0lkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuYnJpZGdlLmNhbGxiYWNrRnJvbUlkKGNhbGxiYWNrSWQpKFxuICAgICAgICAgICAgICBsZWZ0LFxuICAgICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICAgIGdsb2JhbFgsXG4gICAgICAgICAgICAgIGdsb2JhbFlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICBsZWZ0LFxuICAgICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICAgIGdsb2JhbFgsXG4gICAgICAgICAgICAgIGdsb2JhbFlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBAUkNUX0VYUE9SVF9NRVRIT0QoUkNURnVuY3Rpb25UeXBlTm9ybWFsKVxuICAgIGFzeW5jIG1lYXN1cmVJbldpbmRvdyhyZWFjdFRhZzogbnVtYmVyLCBjYWxsYmFja0lkOiBudW1iZXIpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubWVhc3VyZShyZWFjdFRhZyk7XG4gICAgICBpbnZhcmlhbnQocmVzdWx0LCBgTm8gbWVhc3VyZW1lbnQgYXZhaWxhYmxlIGZvciB2aWV3ICR7cmVhY3RUYWd9YCk7XG4gICAgICBjb25zdCB7IGdsb2JhbFgsIGdsb2JhbFksIHdpZHRoLCBoZWlnaHQgfSA9IHJlc3VsdDtcbiAgICAgIHRoaXMuYnJpZGdlLmNhbGxiYWNrRnJvbUlkKGNhbGxiYWNrSWQpKGdsb2JhbFgsIGdsb2JhbFksIHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cblxuICAgIEBSQ1RfRVhQT1JUX01FVEhPRChSQ1RGdW5jdGlvblR5cGVOb3JtYWwpXG4gICAgc2V0SlNSZXNwb25kZXIocmVhY3RUYWc6IG51bWJlcikge1xuICAgICAgLy8gdGhpcy5hZGRVSUJsb2NrKCgpID0+IHtcblxuICAgICAgdGhpcy5qc1Jlc3BvbmRlciA9IHRoaXMudmlld1JlZ2lzdHJ5LmdldChyZWFjdFRhZyk7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLmpzUmVzcG9uZGVyKTtcbiAgICAgIGlmICghdGhpcy5qc1Jlc3BvbmRlcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgIGBJbnZhbGlkIHZpZXcgc2V0IHRvIGJlIHRoZSBKUyByZXNwb25kZXIgLSB0YWcgJHtyZWFjdFRhZ31gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICAvLyB9KTtcbiAgICB9XG5cbiAgICBAUkNUX0VYUE9SVF9NRVRIT0QoUkNURnVuY3Rpb25UeXBlTm9ybWFsKVxuICAgIGNsZWFySlNSZXNwb25kZXIoKSB7XG4gICAgICB0aGlzLmpzUmVzcG9uZGVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBAUkNUX0VYUE9SVF9NRVRIT0QoUkNURnVuY3Rpb25UeXBlTm9ybWFsKVxuICAgIGNvbmZpZ3VyZU5leHRMYXlvdXRBbmltYXRpb24oXG4gICAgICBjb25maWc6IExheW91dEFuaW1hdGlvbkNvbmZpZyxcbiAgICAgIG9uQW5pbWF0aW9uRGlkRW5kOiBudW1iZXJcbiAgICApIHtcbiAgICAgIGlmIChcbiAgICAgICAgIUNhblVzZS5tYXRjaE1lZGlhIHx8XG4gICAgICAgICF3aW5kb3cubWF0Y2hNZWRpYShcIihwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpXCIpLm1hdGNoZXNcbiAgICAgICkge1xuICAgICAgICB0aGlzLmxheW91dEFuaW1hdGlvbk1hbmFnZXIuY29uZmlndXJlTmV4dChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgdGhpcy5icmlkZ2UuY2FsbGJhY2tGcm9tSWQob25BbmltYXRpb25EaWRFbmQpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYWRkVUlCbG9jayhibG9jazogP1VJQmxvY2spIHtcbiAgICAgIGlmIChibG9jayA9PSBudWxsIHx8IHRoaXMudmlld1JlZ2lzdHJ5ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gYmxvY2suY2FsbChudWxsLCB0aGlzLCB0aGlzLnZpZXdSZWdpc3RyeSk7XG4gICAgICB0aGlzLnBlbmRpbmdVSUJsb2Nrcy5wdXNoKGJsb2NrKTtcbiAgICB9XG5cbiAgICBwcmVwZW5kVUlCbG9jayhibG9jazogP1VJQmxvY2spIHtcbiAgICAgIGlmICghYmxvY2spIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5wZW5kaW5nVUlCbG9ja3MudW5zaGlmdChibG9jayk7XG4gICAgfVxuXG4gICAgQFJDVF9FWFBPUlRfTUVUSE9EKFJDVEZ1bmN0aW9uVHlwZU5vcm1hbClcbiAgICBzZXRDaGlsZHJlbihjb250YWluZXJUYWc6IG51bWJlciwgcmVhY3RUYWdzOiBBcnJheTxudW1iZXI+KSB7XG4gICAgICBSQ1RVSU1hbmFnZXIuUkNUU2V0Q2hpbGRyZW4oXG4gICAgICAgIGNvbnRhaW5lclRhZyxcbiAgICAgICAgcmVhY3RUYWdzLFxuICAgICAgICB0aGlzLnNoYWRvd1ZpZXdSZWdpc3RyeVxuICAgICAgKTtcblxuICAgICAgdGhpcy5hZGRVSUJsb2NrKFxuICAgICAgICAodWlNYW5hZ2VyOiBSQ1RVSU1hbmFnZXIsIHZpZXdSZWdpc3RyeTogTWFwPG51bWJlciwgVUlWaWV3PikgPT4ge1xuICAgICAgICAgIFJDVFVJTWFuYWdlci5SQ1RTZXRDaGlsZHJlbihjb250YWluZXJUYWcsIHJlYWN0VGFncywgdmlld1JlZ2lzdHJ5KTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgUkNUU2V0Q2hpbGRyZW4oXG4gICAgICBjb250YWluZXJUYWc6IG51bWJlcixcbiAgICAgIHJlYWN0VGFnczogQXJyYXk8bnVtYmVyPixcbiAgICAgIHJlZ2lzdHJ5OiBNYXA8bnVtYmVyLCAkU3VidHlwZTxSQ1RDb21wb25lbnQ+PlxuICAgICkge1xuICAgICAgY29uc3QgY29udGFpbmVyID0gcmVnaXN0cnkuZ2V0KGNvbnRhaW5lclRhZyk7XG4gICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgcmVhY3RUYWdzLmZvckVhY2goKHJlYWN0VGFnKSA9PiB7XG4gICAgICAgIGNvbnN0IHZpZXcgPSByZWdpc3RyeS5nZXQocmVhY3RUYWcpO1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGBObyBjb250YWluZXIgdmlldyBmb3VuZCB3aXRoIGlkOiAke2NvbnRhaW5lclRhZ31gXG4gICAgICAgICk7XG4gICAgICAgIGludmFyaWFudCh2aWV3LCBgTm8gdmlldyBmb3VuZCB3aXRoIGlkOiAke3JlYWN0VGFnfWApO1xuICAgICAgICBjb250YWluZXIuaW5zZXJ0UmVhY3RTdWJ2aWV3QXRJbmRleCh2aWV3LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIEBSQ1RfRVhQT1JUX01FVEhPRChSQ1RGdW5jdGlvblR5cGVOb3JtYWwpXG4gICAgY3JlYXRlVmlldyhcbiAgICAgIHJlYWN0VGFnOiBudW1iZXIsXG4gICAgICB2aWV3TmFtZTogc3RyaW5nLFxuICAgICAgcm9vdFRhZzogbnVtYmVyLFxuICAgICAgcHJvcHM6IE9iamVjdFxuICAgICkge1xuICAgICAgY29uc3QgY29tcG9uZW50RGF0YSA9IHRoaXMuY29tcG9uZW50RGF0YUJ5TmFtZS5nZXQodmlld05hbWUpO1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBjb21wb25lbnREYXRhLFxuICAgICAgICBgTm8gY29tcG9uZW50IGZvdW5kIGZvciB2aWV3IHdpdGggbmFtZSAke3ZpZXdOYW1lfWBcbiAgICAgICk7XG5cbiAgICAgIC8vIHJlZ2lzdGVyIHNoYWRvdyB2aWV3XG4gICAgICBjb25zdCBzaGFkb3dWaWV3ID0gY29tcG9uZW50RGF0YS5jcmVhdGVTaGFkb3dWaWV3KHJlYWN0VGFnKTtcbiAgICAgIGlmIChzaGFkb3dWaWV3ICE9IG51bGwpIHtcbiAgICAgICAgc2hhZG93Vmlldy52aWV3TmFtZSA9IHZpZXdOYW1lO1xuICAgICAgICBjb21wb25lbnREYXRhLnNldFByb3BzRm9yU2hhZG93Vmlldyhwcm9wcywgc2hhZG93Vmlldyk7XG4gICAgICAgIHRoaXMuc2hhZG93Vmlld1JlZ2lzdHJ5LnNldChyZWFjdFRhZywgc2hhZG93Vmlldyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNoYWRvdyB2aWV3IGlzIHRoZSBzb3VyY2Ugb2YgdHJ1dGggZm9yIGJhY2tncm91bmQgY29sb3IgdGhpcyBpcyBhIGxpdHRsZVxuICAgICAgLy8gYml0IGNvdW50ZXItaW50dWl0aXZlIGlmIHBlb3BsZSB0cnkgdG8gc2V0IGJhY2tncm91bmQgY29sb3Igd2hlbiBzZXR0aW5nIHVwXG4gICAgICAvLyB0aGUgdmlldywgYnV0IGl0J3MgdGhlIG9ubHkgd2F5IHRoYXQgbWFrZXMgc2Vuc2UgZ2l2ZW4gb3VyIHRocmVhZGluZyBtb2RlbFxuICAgICAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gc2hhZG93Vmlldy5iYWNrZ3JvdW5kQ29sb3I7XG5cbiAgICAgIC8vIERpc3BhdGNoIHZpZXcgY3JlYXRpb24gZGlyZWN0bHkgdG8gdGhlIG1haW4gdGhyZWFkIGluc3RlYWQgb2YgYWRkaW5nIHRvXG4gICAgICAvLyBVSUJsb2NrcyBhcnJheS4gVGhpcyB3YXksIGl0IGRvZXNuJ3QgZ2V0IGRlZmVycmVkIHVudGlsIGFmdGVyIGxheW91dC5cbiAgICAgIGNvbnN0IHZpZXcgPSBjb21wb25lbnREYXRhLmNyZWF0ZVZpZXcocmVhY3RUYWcpO1xuICAgICAgaWYgKHZpZXcgIT0gbnVsbCkge1xuICAgICAgICBjb21wb25lbnREYXRhLnNldFByb3BzRm9yVmlldyhwcm9wcywgdmlldyk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2aWV3LnNldEJhY2tncm91bmRDb2xvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdmlldy5zZXRCYWNrZ3JvdW5kQ29sb3IoYmFja2dyb3VuZENvbG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRPRE86IGludmVzdGlnYXRlIHVzYWdlIG9mIHJlYWN0QnJpZGdlRGlkRmluaXNoVHJhbnNhY3Rpb25cblxuICAgICAgICB0aGlzLnZpZXdSZWdpc3RyeS5zZXQocmVhY3RUYWcsIHZpZXcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIEBSQ1RfRVhQT1JUX01FVEhPRChSQ1RGdW5jdGlvblR5cGVOb3JtYWwpXG4gICAgdXBkYXRlVmlldyhyZWFjdFRhZzogbnVtYmVyLCB2aWV3TmFtZTogc3RyaW5nLCB1cGRhdGVkUHJvcHM6IE9iamVjdCkge1xuICAgICAgY29uc3QgY29tcG9uZW50RGF0YSA9IHRoaXMuY29tcG9uZW50RGF0YUJ5TmFtZS5nZXQodmlld05hbWUpO1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBjb21wb25lbnREYXRhLFxuICAgICAgICBgTm8gY29tcG9uZW50IGZvdW5kIGZvciB2aWV3IHdpdGggbmFtZSAke3ZpZXdOYW1lfWBcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHNoYWRvd1ZpZXcgPSB0aGlzLnNoYWRvd1ZpZXdSZWdpc3RyeS5nZXQocmVhY3RUYWcpO1xuICAgICAgaWYgKHNoYWRvd1ZpZXcpIHtcbiAgICAgICAgY29tcG9uZW50RGF0YS5zZXRQcm9wc0ZvclNoYWRvd1ZpZXcodXBkYXRlZFByb3BzLCBzaGFkb3dWaWV3KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdmlldyA9IHRoaXMudmlld1JlZ2lzdHJ5LmdldChyZWFjdFRhZyk7XG4gICAgICBpZiAodmlldykge1xuICAgICAgICBjb21wb25lbnREYXRhLnNldFByb3BzRm9yVmlldyh1cGRhdGVkUHJvcHMsIHZpZXcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmNocm9ub3VzbHlVcGRhdGVWaWV3KHJlYWN0VGFnOiBudW1iZXIsIHZpZXdOYW1lOiBzdHJpbmcsIHByb3BzOiBPYmplY3QpIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudERhdGEgPSB0aGlzLmNvbXBvbmVudERhdGFCeU5hbWUuZ2V0KHZpZXdOYW1lKTtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgY29tcG9uZW50RGF0YSxcbiAgICAgICAgYE5vIGNvbXBvbmVudCBmb3VuZCBmb3IgdmlldyB3aXRoIG5hbWUgJHt2aWV3TmFtZX1gXG4gICAgICApO1xuXG4gICAgICBjb25zdCB2aWV3ID0gdGhpcy52aWV3UmVnaXN0cnkuZ2V0KHJlYWN0VGFnKTtcbiAgICAgIGlmICh2aWV3KSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiYW5pbWF0aW5nIHZpZXdcIiwgdmlldywgcHJvcHMpO1xuICAgICAgICBjb21wb25lbnREYXRhLnNldFByb3BzRm9yVmlldyhwcm9wcywgdmlldyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQFJDVF9FWFBPUlRfTUVUSE9EKFJDVEZ1bmN0aW9uVHlwZU5vcm1hbClcbiAgICByZXBsYWNlRXhpc3RpbmdOb25Sb290VmlldyhyZWFjdFRhZzogbnVtYmVyLCBuZXdSZWFjdFRhZzogbnVtYmVyKSB7XG4gICAgICBjb25zdCBzaGFkb3dWaWV3ID0gdGhpcy5zaGFkb3dWaWV3UmVnaXN0cnkuZ2V0KHJlYWN0VGFnKTtcbiAgICAgIGludmFyaWFudChzaGFkb3dWaWV3LCBgc2hhZG93VmlldyAoZm9yIElEICR7cmVhY3RUYWd9KSBub3QgZm91bmRgKTtcblxuICAgICAgY29uc3Qgc3VwZXJTaGFkb3dWaWV3ID0gc2hhZG93Vmlldy5yZWFjdFN1cGVydmlldztcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgc3VwZXJTaGFkb3dWaWV3LFxuICAgICAgICBgc2hhZG93VmlldyBzdXBlciAob2YgSUQgJHtyZWFjdFRhZ30pIG5vdCBmb3VuZGBcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGluZGV4T2ZWaWV3ID0gc3VwZXJTaGFkb3dWaWV3LnJlYWN0U3Vidmlld3MuaW5kZXhPZihzaGFkb3dWaWV3KTtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgaW5kZXhPZlZpZXcgIT09IC0xLFxuICAgICAgICBcIlZpZXcncyBzdXBlcnZpZXcgZG9lcyd0IGNsYWltIGl0IGFzIHN1YnZpZXdcIlxuICAgICAgKTtcblxuICAgICAgY29uc3QgcmVtb3ZlQXRJbmRpY2VzID0gW2luZGV4T2ZWaWV3XTtcbiAgICAgIGNvbnN0IGFkZFRhZ3MgPSBbbmV3UmVhY3RUYWddO1xuXG4gICAgICB0aGlzLm1hbmFnZUNoaWxkcmVuKFxuICAgICAgICBzdXBlclNoYWRvd1ZpZXcucmVhY3RUYWcsXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICAgIGFkZFRhZ3MsXG4gICAgICAgIHJlbW92ZUF0SW5kaWNlcyxcbiAgICAgICAgcmVtb3ZlQXRJbmRpY2VzXG4gICAgICApO1xuICAgIH1cblxuICAgIEBSQ1RfRVhQT1JUX01FVEhPRChSQ1RGdW5jdGlvblR5cGVOb3JtYWwpXG4gICAgYXN5bmMgZmluZFN1YnZpZXdJbihcbiAgICAgIHJlYWN0VGFnOiBudW1iZXIsXG4gICAgICBhdFBvaW50OiBbbnVtYmVyLCBudW1iZXJdLFxuICAgICAgY2FsbGJhY2tJZDogbnVtYmVyXG4gICAgKSB7XG4gICAgICBjb25zdCBbeCwgeV0gPSBhdFBvaW50O1xuICAgICAgY29uc3QgdmlldyA9IHRoaXMudmlld1JlZ2lzdHJ5LmdldChyZWFjdFRhZyk7XG5cbiAgICAgIGludmFyaWFudCh2aWV3LCBgTm8gc3VjaCB2aWV3IHdpdGggdGFnICR7cmVhY3RUYWd9YCk7XG5cbiAgICAgIGNvbnN0IHRhcmdldCA9IHJlYWN0Vmlld0Zyb21Qb2ludCh2aWV3LCB4LCB5KTtcblxuICAgICAgaWYgKCF0YXJnZXQgfHwgISh0YXJnZXQgaW5zdGFuY2VvZiBVSVZpZXcpKSByZXR1cm47XG5cbiAgICAgIGNvbnN0IG1lYXN1cmVtZW50ID0gYXdhaXQgdGhpcy5tZWFzdXJlKHRhcmdldC5yZWFjdFRhZyk7XG5cbiAgICAgIGludmFyaWFudChcbiAgICAgICAgbWVhc3VyZW1lbnQsXG4gICAgICAgIGBWaWV3IHdpdGggdGFnICR7dGFyZ2V0LnJlYWN0VGFnfSBoYXMgbm8gbWVhc3VyZW1lbnRgXG4gICAgICApO1xuICAgICAgY29uc3QgeyBnbG9iYWxYLCBnbG9iYWxZLCB3aWR0aCwgaGVpZ2h0IH0gPSBtZWFzdXJlbWVudDtcblxuICAgICAgdGhpcy5icmlkZ2UuY2FsbGJhY2tGcm9tSWQoY2FsbGJhY2tJZCkoXG4gICAgICAgIHRhcmdldC5yZWFjdFRhZyxcbiAgICAgICAgZ2xvYmFsWCxcbiAgICAgICAgZ2xvYmFsWSxcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBAUkNUX0VYUE9SVF9NRVRIT0QoUkNURnVuY3Rpb25UeXBlTm9ybWFsKVxuICAgIG1hbmFnZUNoaWxkcmVuKFxuICAgICAgdGFnOiBudW1iZXIsXG4gICAgICBtb3ZlRnJvbTogP0FycmF5PG51bWJlcj4sXG4gICAgICBtb3ZlVG86ID9BcnJheTxudW1iZXI+LFxuICAgICAgYWRkQ2hpbGRUYWdzOiBBcnJheTxudW1iZXI+LFxuICAgICAgYWRkQXRJbmRpY2VzOiBBcnJheTxudW1iZXI+LFxuICAgICAgcmVtb3ZlRnJvbTogQXJyYXk8bnVtYmVyPlxuICAgICkge1xuICAgICAgY29uc3Qgdmlld1RvTWFuYWdlID0gdGhpcy52aWV3UmVnaXN0cnkuZ2V0KHRhZyk7XG4gICAgICBjb25zdCBzaGFkb3dWaWV3VG9NYW5hZ2UgPSB0aGlzLnNoYWRvd1ZpZXdSZWdpc3RyeS5nZXQodGFnKTtcblxuICAgICAgaWYgKCF2aWV3VG9NYW5hZ2UgfHwgIXNoYWRvd1ZpZXdUb01hbmFnZSkgcmV0dXJuO1xuXG4gICAgICAvLyBkZXRlcm1pbmUgY291bnRzIHdpdGggY2hlY2tzIGZvciBudWxsXG4gICAgICBjb25zdCBudW1Ub01vdmUgPSAhbW92ZUZyb20gPyAwIDogbW92ZUZyb20ubGVuZ3RoO1xuXG4gICAgICAvLyBXZSB0cmVhdCBtb3ZlcyBhcyBhbiBhZGQgYW5kIGEgZGVsZXRlXG4gICAgICBjb25zdCB2aWV3c1RvQWRkID0gW107XG4gICAgICBjb25zdCBpbmRpY2VzVG9SZW1vdmUgPSBbXTtcbiAgICAgIGNvbnN0IHRhZ3NUb1JlbW92ZSA9IFtdO1xuICAgICAgY29uc3QgdGFnc1RvRGVsZXRlID0gW107XG5cbiAgICAgIC8vIG1vdmVzIGFyZSBiYXNlZCBvbiBhIHNlcmllcyBvZiBhZGRzIGFmdGVyIHJlbW92ZXNcbiAgICAgIGlmIChtb3ZlRnJvbSAmJiBtb3ZlVG8pIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb3ZlRnJvbS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IG1vdmVGcm9tSW5kZXggPSBtb3ZlRnJvbVtpXTtcbiAgICAgICAgICBjb25zdCB0YWdUb01vdmUgPSB2aWV3VG9NYW5hZ2UucmVhY3RTdWJ2aWV3c1ttb3ZlRnJvbUluZGV4XS5yZWFjdFRhZztcbiAgICAgICAgICB2aWV3c1RvQWRkW2ldID0ge1xuICAgICAgICAgICAgdGFnOiB0YWdUb01vdmUsXG4gICAgICAgICAgICBpbmRleDogbW92ZVRvW2ldXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpbmRpY2VzVG9SZW1vdmVbaV0gPSBtb3ZlRnJvbUluZGV4O1xuICAgICAgICAgIHRhZ3NUb1JlbW92ZVtpXSA9IHRhZ1RvTW92ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBhZGQgdGhlIHJlc3Qgb2YgdGhlIGFkZHNcbiAgICAgIGlmIChhZGRDaGlsZFRhZ3MpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhZGRDaGlsZFRhZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCB2aWV3VGFnVG9BZGQgPSBhZGRDaGlsZFRhZ3NbaV07XG4gICAgICAgICAgY29uc3QgaW5kZXhUb0FkZEF0ID0gYWRkQXRJbmRpY2VzW2ldO1xuICAgICAgICAgIHZpZXdzVG9BZGRbbnVtVG9Nb3ZlICsgaV0gPSB7XG4gICAgICAgICAgICB0YWc6IHZpZXdUYWdUb0FkZCxcbiAgICAgICAgICAgIGluZGV4OiBpbmRleFRvQWRkQXRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIG5vdyBhZGQgdGhlIHJlcXVpcmVkIHJlbW92ZXNcbiAgICAgIGlmIChyZW1vdmVGcm9tKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVtb3ZlRnJvbS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGluZGV4VG9SZW1vdmUgPSByZW1vdmVGcm9tW2ldO1xuICAgICAgICAgIGlmICh2aWV3VG9NYW5hZ2UucmVhY3RTdWJ2aWV3c1tpbmRleFRvUmVtb3ZlXSkge1xuICAgICAgICAgICAgY29uc3QgdGFnVG9SZW1vdmUgPVxuICAgICAgICAgICAgICB2aWV3VG9NYW5hZ2UucmVhY3RTdWJ2aWV3c1tpbmRleFRvUmVtb3ZlXS5yZWFjdFRhZztcbiAgICAgICAgICAgIGluZGljZXNUb1JlbW92ZVtudW1Ub01vdmUgKyBpXSA9IGluZGV4VG9SZW1vdmU7XG4gICAgICAgICAgICB0YWdzVG9SZW1vdmVbbnVtVG9Nb3ZlICsgaV0gPSB0YWdUb1JlbW92ZTtcbiAgICAgICAgICAgIHRhZ3NUb0RlbGV0ZVtpXSA9IHRhZ1RvUmVtb3ZlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBOQjogbW92ZUZyb20gYW5kIHJlbW92ZUZyb20gYXJlIGJvdGggcmVsYXRpdmUgdG8gdGhlIHN0YXJ0aW5nIHN0YXRlIG9mIHRoZSBWaWV3J3MgY2hpbGRyZW4uXG4gICAgICAvLyBtb3ZlVG8gYW5kIGFkZEF0IGFyZSBib3RoIHJlbGF0aXZlIHRvIHRoZSBmaW5hbCBzdGF0ZSBvZiB0aGUgVmlldydzIGNoaWxkcmVuLlxuICAgICAgLy9cbiAgICAgIC8vIDEpIFNvcnQgdGhlIHZpZXdzIHRvIGFkZCBhbmQgaW5kaWNlcyB0byByZW1vdmUgYnkgaW5kZXhcbiAgICAgIC8vIDIpIEl0ZXJhdGUgdGhlIGluZGljZXMgYmVpbmcgcmVtb3ZlZCBmcm9tIGhpZ2ggdG8gbG93IGFuZCByZW1vdmUgdGhlbS4gR29pbmcgaGlnaCB0byBsb3dcbiAgICAgIC8vICAgIG1ha2VzIHN1cmUgd2UgcmVtb3ZlIHRoZSBjb3JyZWN0IGluZGV4IHdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIHRvIHJlbW92ZS5cbiAgICAgIC8vIDMpIEl0ZXJhdGUgdGhlIHZpZXdzIGJlaW5nIGFkZGVkIGJ5IGluZGV4IGxvdyB0byBoaWdoIGFuZCBhZGQgdGhlbS4gTGlrZSB0aGUgdmlldyByZW1vdmFsLFxuICAgICAgLy8gICAgaXRlcmF0aW9uIGRpcmVjdGlvbiBpcyBpbXBvcnRhbnQgdG8gcHJlc2VydmUgdGhlIGNvcnJlY3QgaW5kZXguXG5cbiAgICAgIHZpZXdzVG9BZGQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBhLmluZGV4IC0gYi5pbmRleDtcbiAgICAgIH0pO1xuICAgICAgaW5kaWNlc1RvUmVtb3ZlLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICByZXR1cm4gYSAtIGI7XG4gICAgICB9KTtcblxuICAgICAgLy8gQXBwbHkgY2hhbmdlcyB0byBub2RlIGhpZXJhcmNoeVxuICAgICAgLy8gcmVtb3ZpbmcgaW4gdGhlIG9yZGVyIGxhc3QgaW5kZXggdG8gZmlyc3QgaW5kZXhcbiAgICAgIGZvciAobGV0IGkgPSBpbmRpY2VzVG9SZW1vdmUubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgY2hpbGRJbmRleCA9IGluZGljZXNUb1JlbW92ZVtpXTtcblxuICAgICAgICBsZXQgc2hhZG93U3ViVmlldyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHNoYWRvd1ZpZXdUb01hbmFnZSBpbnN0YW5jZW9mIFJDVFNoYWRvd1RleHQpIHtcbiAgICAgICAgICBzaGFkb3dTdWJWaWV3ID0gc2hhZG93Vmlld1RvTWFuYWdlLnRleHRDaGlsZHJlbltjaGlsZEluZGV4XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaGFkb3dTdWJWaWV3ID0gc2hhZG93Vmlld1RvTWFuYWdlLnJlYWN0U3Vidmlld3NbY2hpbGRJbmRleF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhZG93U3ViVmlldykgc2hhZG93Vmlld1RvTWFuYWdlLnJlbW92ZVJlYWN0U3VidmlldyhzaGFkb3dTdWJWaWV3KTtcblxuICAgICAgICBpZiAoIXRoaXMubGF5b3V0QW5pbWF0aW9uTWFuYWdlci5pc1BlbmRpbmcoKSkge1xuICAgICAgICAgIHRoaXMuYWRkVUlCbG9jaygodWlNYW5hZ2VyLCB2aWV3UmVnaXN0cnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN1YlZpZXcgPSB2aWV3VG9NYW5hZ2UucmVhY3RTdWJ2aWV3c1tjaGlsZEluZGV4XTtcbiAgICAgICAgICAgIHZpZXdUb01hbmFnZS5yZW1vdmVSZWFjdFN1YnZpZXcoc3ViVmlldyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gYWRkIHRoZSBuZXcgY2hpbGRyZW5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmlld3NUb0FkZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB7IHRhZzogdGFnVG9BZGQsIGluZGV4OiBpbmRleFRvQWRkIH0gPSB2aWV3c1RvQWRkW2ldO1xuXG4gICAgICAgIGNvbnN0IHNoYWRvd1N1YlZpZXcgPSB0aGlzLnNoYWRvd1ZpZXdSZWdpc3RyeS5nZXQodGFnVG9BZGQpO1xuICAgICAgICBpZiAoc2hhZG93U3ViVmlldykge1xuICAgICAgICAgIHNoYWRvd1ZpZXdUb01hbmFnZS5pbnNlcnRSZWFjdFN1YnZpZXdBdEluZGV4KFxuICAgICAgICAgICAgc2hhZG93U3ViVmlldyxcbiAgICAgICAgICAgIGluZGV4VG9BZGRcbiAgICAgICAgICApO1xuICAgICAgICAgIHNoYWRvd1N1YlZpZXcubWFrZURpcnR5KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFkZFVJQmxvY2soKHVpTWFuYWdlciwgdmlld1JlZ2lzdHJ5KSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3ViVmlldyA9IHZpZXdSZWdpc3RyeS5nZXQodGFnVG9BZGQpO1xuICAgICAgICAgIGludmFyaWFudChcbiAgICAgICAgICAgIHN1YlZpZXcsXG4gICAgICAgICAgICBgQXR0ZW1wdGVkIHRvIGluc2VydCBzdWJ2aWV3IHdpdGggdGFnICR7dGFnVG9BZGR9IHRoYXQgZG9lcyBub3QgZXhpc3RgXG4gICAgICAgICAgKTtcbiAgICAgICAgICB2aWV3VG9NYW5hZ2UuaW5zZXJ0UmVhY3RTdWJ2aWV3QXRJbmRleChzdWJWaWV3LCBpbmRleFRvQWRkKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFnc1RvRGVsZXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMucHVyZ2VWaWV3KHRhZ3NUb0RlbGV0ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQFJDVF9FWFBPUlRfTUVUSE9EKFJDVEZ1bmN0aW9uVHlwZU5vcm1hbClcbiAgICBmb2N1cyhyZWFjdFRhZzogbnVtYmVyKSB7fVxuXG4gICAgQFJDVF9FWFBPUlRfTUVUSE9EKFJDVEZ1bmN0aW9uVHlwZU5vcm1hbClcbiAgICBibHVyKHJlYWN0VGFnOiBudW1iZXIpIHt9XG5cbiAgICBjb25zdGFudHNUb0V4cG9ydCgpIHtcbiAgICAgIGNvbnN0IGNvbnN0YW50cyA9IHt9O1xuICAgICAgY29uc3QgYnViYmxpbmdFdmVudHMgPSB7fTtcbiAgICAgIGNvbnN0IGRpcmVjdEV2ZW50cyA9IHt9O1xuXG4gICAgICBmb3IgKGNvbnN0IFtuYW1lLCBjb21wb25lbnREYXRhXSBvZiB0aGlzLmNvbXBvbmVudERhdGFCeU5hbWUpIHtcbiAgICAgICAgY29uc3QgbW9kdWxlQ29uc3RhbnRzID0ge307XG5cbiAgICAgICAgLy8gUmVnaXN0ZXIgd2hpY2ggZXZlbnQtdHlwZXMgdGhpcyB2aWV3IGRpc3BhdGNoZXMuXG4gICAgICAgIC8vIFJlYWN0IG5lZWRzIHRoaXMgZm9yIHRoZSBldmVudCBwbHVnaW4uXG4gICAgICAgIGNvbnN0IGJ1YmJsaW5nRXZlbnRUeXBlcyA9IHt9O1xuICAgICAgICBjb25zdCBkaXJlY3RFdmVudFR5cGVzID0ge307XG5cbiAgICAgICAgLy8gQWRkIG1hbmFnZXIgY2xhc3NcbiAgICAgICAgbW9kdWxlQ29uc3RhbnRzLk1hbmFnZXIgPSBicmlkZ2VNb2R1bGVOYW1lRm9yQ2xhc3MoXG4gICAgICAgICAgY29tcG9uZW50RGF0YS5tYW5hZ2VyQ2xhc3NcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBBZGQgbmF0aXZlIHByb3BzXG4gICAgICAgIGNvbnN0IHZpZXdDb25maWcgPSBjb21wb25lbnREYXRhLnZpZXdDb25maWc7XG4gICAgICAgIG1vZHVsZUNvbnN0YW50cy5OYXRpdmVQcm9wcyA9IHZpZXdDb25maWcucHJvcFR5cGVzO1xuICAgICAgICBtb2R1bGVDb25zdGFudHMuYmFzZU1vZHVsZU5hbWUgPSB2aWV3Q29uZmlnLmJhc2VNb2R1bGVOYW1lO1xuXG4gICAgICAgIC8vIEFkZCBkaXJlY3QgZXZlbnRzXG4gICAgICAgIGZvciAobGV0IGV2ZW50TmFtZSBvZiB2aWV3Q29uZmlnLmRpcmVjdEV2ZW50cykge1xuICAgICAgICAgIGlmICghZGlyZWN0RXZlbnRzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgICAgIGRpcmVjdEV2ZW50c1tldmVudE5hbWVdID0ge1xuICAgICAgICAgICAgICByZWdpc3RyYXRpb25OYW1lOiBgb24ke2V2ZW50TmFtZS5zdWJzdHJpbmcoMyl9YFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGlyZWN0RXZlbnRUeXBlc1tldmVudE5hbWVdID0gZGlyZWN0RXZlbnRzW2V2ZW50TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgbW9kdWxlQ29uc3RhbnRzLmRpcmVjdEV2ZW50VHlwZXMgPSBkaXJlY3RFdmVudFR5cGVzO1xuXG4gICAgICAgIC8vIEFkZCBidWJibGluZyBldmVudHNcbiAgICAgICAgZm9yIChsZXQgZXZlbnROYW1lIG9mIHZpZXdDb25maWcuYnViYmxpbmdFdmVudHMpIHtcbiAgICAgICAgICBpZiAoIWJ1YmJsaW5nRXZlbnRzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgICAgIGNvbnN0IGJ1YmJsZU5hbWUgPSBgb24ke2V2ZW50TmFtZS5zdWJzdHJpbmcoMyl9YDtcbiAgICAgICAgICAgIGJ1YmJsaW5nRXZlbnRzW2V2ZW50TmFtZV0gPSB7XG4gICAgICAgICAgICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgICAgICAgYnViYmxlZDogYnViYmxlTmFtZSxcbiAgICAgICAgICAgICAgICBjYXB0dXJlZDogYCR7YnViYmxlTmFtZX1DYXB0dXJlYFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBidWJibGluZ0V2ZW50VHlwZXNbZXZlbnROYW1lXSA9IGJ1YmJsaW5nRXZlbnRzW2V2ZW50TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgbW9kdWxlQ29uc3RhbnRzLmJ1YmJsaW5nRXZlbnRUeXBlcyA9IGJ1YmJsaW5nRXZlbnRUeXBlcztcblxuICAgICAgICBjb25zdGFudHNbbmFtZV0gPSBtb2R1bGVDb25zdGFudHM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb25zdGFudHM7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFJDVFVJTWFuYWdlcjtcbn0pKCk7XG4iXX0=