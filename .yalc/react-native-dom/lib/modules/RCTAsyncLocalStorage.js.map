{"version":3,"sources":["../../ReactDom/modules/RCTAsyncLocalStorage.js"],"names":["RCTAsyncLocalStorage","bridge","keys","callbackId","callback","callbackFromId","Promise","all","map","key","get","then","result","value","index","catch","err","kvPairs","prevValue","nextValue","set","delete"],"mappings":"kmBAKA,gD,mDAKA,qC,mDACA,oC,6xBAGMA,qB,OADL,iCAAkB,sBAAlB,C,OAQE,kE,OAiBA,kE,OAmBA,kE,OAaA,kE,OAaA,kE,iCAlED,8BAAYC,MAAZ,CAA+B,yDAC7B,KAAKA,MAAL,CAAcA,MAAd,CACD,C,wFAGQC,I,CAAgBC,U,CAAoB,CAC3C,GAAMC,UAAW,KAAKH,MAAL,CAAYI,cAAZ,CAA2BF,UAA3B,CAAjB,CAEAG,QAAQC,GAAR,CACEL,KAAKM,GAAL,CAAS,SAACC,GAAD,CAAS,CAChB,MAAO,qBAAUC,GAAV,CAAcD,GAAd,CAAP,CACD,CAFD,CADF,EAKGE,IALH,CAKQ,SAACC,MAAD,CAAY,CAChBR,SAAS,IAAT,CAAeQ,OAAOJ,GAAP,CAAW,SAACK,KAAD,CAAQC,KAAR,QAAkB,CAACZ,KAAKY,KAAL,CAAD,CAAcD,KAAd,CAAlB,EAAX,CAAf,EACD,CAPH,EAQGE,KARH,CAQS,SAACC,GAAD,CAAS,CACdZ,SAASY,GAAT,EACD,CAVH,EAWD,C,8CAGUC,O,CAA0Bd,U,CAAoB,CACvD,GAAMC,UAAW,KAAKH,MAAL,CAAYI,cAAZ,CAA2BF,UAA3B,CAAjB,CAEAG,QAAQC,GAAR,CACEU,QAAQT,GAAR,CAAY,cAAsB,+CAApBC,GAAoB,UAAfS,SAAe,UAChC,MAAO,qBAAUR,GAAV,CAAcD,GAAd,EAAmBE,IAAnB,CAAwB,SAACQ,SAAD,CAAe,CAC5C,GAAIA,WAAa,IAAb,EAAqB,MAAOA,UAAP,GAAqB,QAA9C,CAAwD,CACtD,MAAO,qBAAUC,GAAV,CAAcX,GAAd,CAAmBS,SAAnB,CAAP,CACD,CAFD,IAEO,CACL,MAAO,qBAAUE,GAAV,CAAcX,GAAd,CAAmB,wBAAUS,SAAV,CAAqBC,SAArB,CAAnB,CAAP,CACD,CACF,CANM,CAAP,CAOD,CARD,CADF,EAUER,IAVF,CAUO,UAAM,CACXP,WACD,CAZD,EAaD,C,0CAGQa,O,CAA0Bd,U,CAAoB,CACrD,GAAMC,UAAW,KAAKH,MAAL,CAAYI,cAAZ,CAA2BF,UAA3B,CAAjB,CAEAG,QAAQC,GAAR,CACEU,QAAQT,GAAR,CAAY,eAAkB,gDAAhBC,GAAgB,UAAXI,KAAW,UAC5B,MAAO,qBAAUO,GAAV,CAAcX,GAAd,CAAmBI,KAAnB,CAAP,CACD,CAFD,CADF,EAIEF,IAJF,CAIO,UAAM,CACXP,WACD,CAND,EAOD,C,gDAGWF,I,CAAgBC,U,CAAoB,CAC9C,GAAMC,UAAW,KAAKH,MAAL,CAAYI,cAAZ,CAA2BF,UAA3B,CAAjB,CAEAG,QAAQC,GAAR,CACEL,KAAKM,GAAL,CAAS,SAACC,GAAD,CAAS,CAChB,MAAO,qBAAUY,MAAV,CAAiBZ,GAAjB,CAAP,CACD,CAFD,CADF,EAIEE,IAJF,CAIO,UAAM,CACXP,WACD,CAND,EAOD,C,8CAGgBD,U,0IACTC,Q,CAAW,KAAKH,MAAL,CAAYI,cAAZ,CAA2BF,UAA3B,C,oEAEI,oBAAUD,IAAV,E,SAAbA,I,eACNE,SAAS,IAAT,CAAeF,IAAf,E,+EAEAE,qBAAc,IAAd,E,w2BAKSJ,oB","file":"RCTAsyncLocalStorage.js","sourcesContent":["/**\n * @providesModule RCTAsyncLocalStorage\n * @flow\n */\n\nimport RCTBridge, {\n  RCT_EXPORT_MODULE,\n  RCT_EXPORT_METHOD,\n  RCTFunctionTypeNormal\n} from \"RCTBridge\";\nimport idbKeyval from \"idb-keyval\";\nimport deepmerge from \"deepmerge\";\n\n@RCT_EXPORT_MODULE(\"RCTAsyncLocalStorage\")\nclass RCTAsyncLocalStorage {\n  bridge: RCTBridge;\n\n  constructor(bridge: RCTBridge) {\n    this.bridge = bridge;\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  multiGet(keys: string[], callbackId: number) {\n    const callback = this.bridge.callbackFromId(callbackId);\n\n    Promise.all(\n      keys.map((key) => {\n        return idbKeyval.get(key);\n      })\n    )\n      .then((result) => {\n        callback(null, result.map((value, index) => [keys[index], value]));\n      })\n      .catch((err) => {\n        callback(err);\n      });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  multiMerge(kvPairs: [string, any][], callbackId: number) {\n    const callback = this.bridge.callbackFromId(callbackId);\n\n    Promise.all(\n      kvPairs.map(([key, prevValue]) => {\n        return idbKeyval.get(key).then((nextValue) => {\n          if (nextValue == null || typeof nextValue !== \"object\") {\n            return idbKeyval.set(key, prevValue);\n          } else {\n            return idbKeyval.set(key, deepmerge(prevValue, nextValue));\n          }\n        });\n      })\n    ).then(() => {\n      callback();\n    });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  multiSet(kvPairs: [string, any][], callbackId: number) {\n    const callback = this.bridge.callbackFromId(callbackId);\n\n    Promise.all(\n      kvPairs.map(([key, value]) => {\n        return idbKeyval.set(key, value);\n      })\n    ).then(() => {\n      callback();\n    });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  multiRemove(keys: string[], callbackId: number) {\n    const callback = this.bridge.callbackFromId(callbackId);\n\n    Promise.all(\n      keys.map((key) => {\n        return idbKeyval.delete(key);\n      })\n    ).then(() => {\n      callback();\n    });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  async getAllKeys(callbackId: number) {\n    const callback = this.bridge.callbackFromId(callbackId);\n    try {\n      const keys = await idbKeyval.keys();\n      callback(null, keys);\n    } catch (err) {\n      callback(err, null);\n    }\n  }\n}\n\nexport default RCTAsyncLocalStorage;\n"]}