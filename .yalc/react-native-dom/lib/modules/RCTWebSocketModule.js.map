{"version":3,"sources":["../../ReactDom/modules/RCTWebSocketModule.js"],"names":["RCTWebSocketModule","bridge","sockets","url","protocols","options","socketId","socket","WebSocket","binaryType","String","onclose","event","payload","id","code","reason","enqueueJSCall","onerror","message","onmessage","data","ArrayBuffer","arr","Uint8Array","str","Array","byteLength","i","length","fromCharCode","btoa","join","type","onopen","Error","send","_send","chars","atob","array","charCodeAt","buffer","codeOrId","close"],"mappings":"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","file":"RCTWebSocketModule.js","sourcesContent":["/**\n * @providesModule RCTWebSocketModule\n * @flow\n */\n\nimport invariant from \"Invariant\";\nimport RCTBridge, {\n  RCT_EXPORT_MODULE,\n  RCT_EXPORT_METHOD,\n  RCTFunctionTypeNormal\n} from \"RCTBridge\";\nimport RCTEventEmitter from \"RCTNativeEventEmitter\";\n\n@RCT_EXPORT_MODULE(\"RCTWebSocketModule\")\nclass RCTWebSocketModule extends RCTEventEmitter {\n  bridge: RCTBridge;\n  sockets: { [id: string]: WebSocket };\n\n  constructor(bridge: RCTBridge) {\n    super(bridge);\n    this.sockets = {};\n  }\n\n  /**\n   * Establish a connection and associate with socketID. socketID is used for future\n   * communication with React\n   * @param url - string Url to connect to\n   * @param protocols - protocols for creating the WebSocket instance\n   * @param options - currently unused\n   * @param socketId - ID used to represent this connection in React\n   */\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  connect(\n    url: string,\n    protocols: string | Array<string>,\n    options: any,\n    socketId: number\n  ) {\n    const socket = protocols\n      ? new WebSocket(url, protocols)\n      : new WebSocket(url);\n    socket.binaryType = \"arraybuffer\";\n    this.sockets[String(socketId)] = socket;\n\n    // set the onclose, onerror and onmessage functions so that the\n    // React event can be dispatched\n    socket.onclose = (event) => {\n      const payload = {\n        id: socketId,\n        code: event.code,\n        reason: event.reason\n      };\n      this.bridge.enqueueJSCall(\"RCTDeviceEventEmitter\", \"emit\", [\n        \"websocketClosed\",\n        payload\n      ]);\n    };\n    socket.onerror = (event) => {\n      const payload = {\n        id: socketId,\n        message: \"Native WebSocket error\"\n      };\n      this.bridge.enqueueJSCall(\"RCTDeviceEventEmitter\", \"emit\", [\n        \"websocketFailed\",\n        payload\n      ]);\n    };\n    socket.onmessage = (event) => {\n      let data = event.data;\n      if (data instanceof ArrayBuffer) {\n        // Convert arraybuffer to string because the current bridge format is\n        // automatically stringified to account for metadata and to speed up\n        // older versions of Blink. We may be able to avoid this indirection\n        // later on.\n        const arr = new Uint8Array(data);\n        const str = new Array(arr.byteLength);\n        for (let i = 0; i < str.length; i++) {\n          str[i] = String.fromCharCode(arr[i]);\n        }\n        data = btoa(str.join(\"\"));\n      }\n      const payload = {\n        id: socketId,\n        type: typeof event.data === \"string\" ? \"string\" : \"binary\",\n        data: data\n      };\n      this.bridge.enqueueJSCall(\"RCTDeviceEventEmitter\", \"emit\", [\n        \"websocketMessage\",\n        payload\n      ]);\n    };\n    socket.onopen = (event) => {\n      const payload = {\n        id: socketId\n      };\n      this.bridge.enqueueJSCall(\"RCTDeviceEventEmitter\", \"emit\", [\n        \"websocketOpen\",\n        payload\n      ]);\n    };\n  }\n\n  /**\n   * internal function to send the data\n   * maps the React socketID to the instance of WebSocket\n   */\n  _send(data: string | ArrayBuffer, socketId: number) {\n    const socket = this.sockets[String(socketId)];\n    if (!socket) {\n      throw new Error(\"Error while sending data to WebSocket: no such socket\");\n    }\n    socket.send(data);\n  }\n\n  /**\n   * send\n   * function called by the React code through messages\n   * @param data - data from react\n   * @param socketId - React socket id\n   */\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  send(data: string, socketId: number) {\n    this._send(data, socketId);\n  }\n\n  /**\n   * sendBinary\n   * function called by the React code through messages\n   * @param data - data from react\n   * @param socketId - React socket id\n   */\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  sendBinary(data: string, socketId: number) {\n    const chars = atob(data);\n    const array = new Uint8Array(chars.length);\n    for (let i = 0; i < chars.length; i++) {\n      array[i] = chars.charCodeAt(i) & 255;\n    }\n    this._send(array.buffer, socketId);\n  }\n\n  /**\n   * ping\n   * Unsupported in WebVR due to\n   * \"Cannot send a ping. Browser WebSocket APIs are not capable of sending specific opcodes\"\n   * @param socketId - React socket id\n   */\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  ping(socketId: number) {\n    throw new Error(\n      \"Cannot send a ping. Browser WebSocket APIs are not capable of sending specific opcodes\"\n    );\n  }\n\n  /**\n   * close\n   * function called by the React code through messages\n   * @param codeOrId - if reason is undefined or sockedId is undefined this is id, otherwise\n   *                   it is the code to report to the websocket\n   * @param reason - reason distributed to WebSocket close, maybe undefined\n   * @param socketId - React socket id or maybe undefined in which codeorID contains the socket\n   */\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  close(codeOrId: number, reason: void | string, socketId: void | number) {\n    let id;\n    if (typeof reason !== \"undefined\" && typeof socketId !== \"undefined\") {\n      id = String(socketId);\n      const socket = this.sockets[id];\n      if (!socket) {\n        return;\n      }\n      socket.close(codeOrId, reason);\n    } else {\n      id = String(codeOrId);\n      const socket = this.sockets[id];\n      if (!socket) {\n        return;\n      }\n      socket.close();\n    }\n    delete this.sockets[id];\n  }\n}\n\nexport default RCTWebSocketModule;\n"]}