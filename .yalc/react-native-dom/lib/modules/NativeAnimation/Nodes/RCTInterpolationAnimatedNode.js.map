{"version":3,"sources":["../../../../ReactDom/modules/NativeAnimation/Nodes/RCTInterpolationAnimatedNode.js"],"names":["RCTInterpolationAnimatedNode","tag","config","inputRange","outputRange","value","push","extrapolateLeft","extrapolateRight","parent","parentNode","inputValue","outputValue","_value"],"mappings":"mzBAOA,6D,0EACA,yD,sFAEMA,6B,4GAOJ,sCAAYC,GAAZ,CAAyBC,MAAzB,CAAyC,gOACjCD,GADiC,CAC5BC,MAD4B,GAGvC,MAAKC,UAAL,2CAAsBD,OAAOC,UAA7B,GACA,MAAKC,WAAL,CAAmB,EAAnB,CACA,kBAAkBF,OAAOE,WAAzB,4IAAsC,uIAA7BC,MAA6B,MACpC,GAAI,MAAOA,MAAP,GAAiB,QAArB,CAA+B,CAC7B,MAAKD,WAAL,CAAiBE,IAAjB,CAAsBD,KAAtB,EACD,CACF,CACD,MAAKE,eAAL,CAAuBL,OAAOK,eAA9B,CACA,MAAKC,gBAAL,CAAwBN,OAAOM,gBAA/B,CAXuC,aAYxC,C,gHAEgBC,M,CAAyB,CACxC,qKAAuBA,MAAvB,EACA,GAAIA,gDAAJ,CAA4C,CAC1C,KAAKC,UAAL,CAAkBD,MAAlB,CACD,CACF,C,8DAEkBA,M,CAAyB,CAC1C,uKAAyBA,MAAzB,EACA,GAAI,KAAKC,UAAL,GAAoBD,MAAxB,CAAgC,CAC9B,KAAKC,UAAL,CAAkB,IAAlB,CACD,CACF,C,qDAEe,CACd,mKAEA,GAAMA,YAAa,KAAKA,UAAxB,CACA,GAAI,CAACA,UAAL,CAAiB,CACf,OACD,CAED,GAAMC,YAAaD,WAAWL,KAA9B,CAEA,GAAMO,aAAc,kDAClBD,UADkB,CAElB,KAAKR,UAFa,CAGlB,KAAKC,WAHa,CAIlB,KAAKG,eAJa,CAKlB,KAAKC,gBALa,CAApB,CAQA,KAAKK,MAAL,CAAcD,WAAd,CACD,C,0FAGYZ,4B","file":"RCTInterpolationAnimatedNode.js","sourcesContent":["/**\n * @providesModule RCTInterpolationAnimatedNode\n * @flow\n */\n\nimport type { Config } from \"RCTNativeAnimatedModule\";\nimport type RCTAnimatedNode from \"RCTAnimatedNode\";\nimport RCTValueAnimatedNode from \"RCTValueAnimatedNode\";\nimport { RCTInterpolateValueInRange } from \"RCTAnimationUtils\";\n\nclass RCTInterpolationAnimatedNode extends RCTValueAnimatedNode {\n  parentNode: ?RCTValueAnimatedNode;\n  inputRange: number[];\n  outputRange: number[];\n  extrapolateLeft: string;\n  extrapolateRight: string;\n\n  constructor(tag: number, config: Config) {\n    super(tag, config);\n\n    this.inputRange = [...config.inputRange];\n    this.outputRange = [];\n    for (let value of config.outputRange) {\n      if (typeof value === \"number\") {\n        this.outputRange.push(value);\n      }\n    }\n    this.extrapolateLeft = config.extrapolateLeft;\n    this.extrapolateRight = config.extrapolateRight;\n  }\n\n  onAttachedToNode(parent: RCTAnimatedNode) {\n    super.onAttachedToNode(parent);\n    if (parent instanceof RCTValueAnimatedNode) {\n      this.parentNode = parent;\n    }\n  }\n\n  onDetachedFromNode(parent: RCTAnimatedNode) {\n    super.onDetachedFromNode(parent);\n    if (this.parentNode === parent) {\n      this.parentNode = null;\n    }\n  }\n\n  performUpdate() {\n    super.performUpdate();\n\n    const parentNode = this.parentNode;\n    if (!parentNode) {\n      return;\n    }\n\n    const inputValue = parentNode.value;\n\n    const outputValue = RCTInterpolateValueInRange(\n      inputValue,\n      this.inputRange,\n      this.outputRange,\n      this.extrapolateLeft,\n      this.extrapolateRight\n    );\n\n    this._value = outputValue;\n  }\n}\n\nexport default RCTInterpolationAnimatedNode;\n"]}