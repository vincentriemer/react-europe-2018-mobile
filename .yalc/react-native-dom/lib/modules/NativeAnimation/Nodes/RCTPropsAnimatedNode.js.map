{"version":3,"sources":["../../../../ReactDom/modules/NativeAnimation/Nodes/RCTPropsAnimatedNode.js"],"names":["RCTPropsAnimatedNode","tag","config","propsDictionary","viewTag","viewName","uiManager","connectedViewTag","connectedViewName","Object","keys","key","length","synchronouslyUpdateView","parentNodes","entries","forEach","parentTag","parentNode","property","propertyNameForParentTag","parseInt","value","props","Error"],"mappings":"04BAMA,mD,gEACA,4D,yEACA,4D,+JAEMA,qB,0FAMJ,8BAAYC,GAAZ,CAAyBC,MAAzB,CAAyC,wMACjCD,GADiC,CAC5BC,MAD4B,GAEvC,MAAKC,eAAL,CAAuB,EAAvB,CAFuC,aAGxC,C,kGAEaC,O,CAAiBC,Q,CAAkBC,S,CAAc,CAC7D,KAAKC,gBAAL,CAAwBH,OAAxB,CACA,KAAKI,iBAAL,CAAyBH,QAAzB,CACA,KAAKC,SAAL,CAAiBA,SAAjB,CACD,C,8DAEkBF,O,CAAiB,CAElC,kBAAgBK,OAAOC,IAAP,CAAY,KAAKP,eAAjB,CAAhB,4IAAmD,uIAA1CQ,IAA0C,MACjD,KAAKR,eAAL,CAAqBQ,GAArB,EAA4B,IAA5B,CACD,CAED,GACEF,OAAOC,IAAP,CAAY,KAAKP,eAAjB,EAAkCS,MAAlC,EACA,KAAKL,gBADL,EAEA,KAAKC,iBAFL,EAGA,KAAKF,SAJP,CAKE,CACA,KAAKA,SAAL,CAAeO,uBAAf,CACE,KAAKN,gBADP,CAEE,KAAKC,iBAFP,CAGE,KAAKL,eAHP,EAKD,CAED,KAAKI,gBAAL,CAAwB,IAAxB,CACA,KAAKC,iBAAL,CAAyB,IAAzB,CACA,KAAKF,SAAL,CAAiB,IAAjB,CACD,C,qDAEe,iBACd,mJAEA,GAAMC,kBAAmB,KAAKA,gBAA9B,CACA,GAAI,CAACA,gBAAL,CAAuB,CACrB,OACD,CAED,KAAKO,WAAL,EACEL,OAAOM,OAAP,CAAe,KAAKD,WAApB,EAAiCE,OAAjC,CAAyC,eAA6B,gDAA3BC,SAA2B,UAAhBC,UAAgB,UACpE,GAAIA,oDAAJ,CAAgD,CAC9C,OAAKf,eAAL,0BACK,OAAKA,eADV,CAEKe,WAAWf,eAFhB,EAID,CALD,IAKO,IAAIe,oDAAJ,CAAgD,CACrD,GAAMC,UAAW,OAAKC,wBAAL,CACfC,SAASJ,SAAT,CAAoB,EAApB,CADe,CAAjB,CAGA,GAAMK,OAAQJ,WAAWI,KAAzB,CACA,OAAKnB,eAAL,CAAqBgB,QAArB,EAAiCG,KAAjC,CACD,CACF,CAbD,CADF,CAgBA,GAAIb,OAAOC,IAAP,CAAY,KAAKP,eAAjB,EAAkCS,MAAtC,CAA8C,CAC5C,GAAI,KAAKN,SAAL,EAAkB,KAAKE,iBAAvB,EAA4C,KAAKD,gBAArD,CAAuE,CACrE,KAAKD,SAAL,CAAeO,uBAAf,CACE,KAAKN,gBADP,CAEE,KAAKC,iBAFP,CAGE,KAAKL,eAHP,EAKD,CACF,CACF,C,0EAEwBc,S,CAA2B,CAClD,gBAA4B,MAAKf,MAAL,CAAYqB,KAAxC,CAA+C,mDAArCJ,SAAqC,aAA3BlB,IAA2B,UAC7C,GAAIA,MAAQgB,SAAZ,CAAuB,CACrB,MAAOE,SAAP,CACD,CACF,CACD,KAAM,IAAIK,MAAJ,CAAU,6CAAV,CAAN,CACD,C,6EAGYxB,oB","file":"RCTPropsAnimatedNode.js","sourcesContent":["/**\n * @providesModule RCTPropsAnimatedNode\n * @flow\n */\n\nimport type { Config } from \"RCTNativeAnimatedModule\";\nimport RCTAnimatedNode from \"RCTAnimatedNode\";\nimport RCTStyleAnimatedNode from \"RCTStyleAnimatedNode\";\nimport RCTValueAnimatedNode from \"RCTValueAnimatedNode\";\n\nclass RCTPropsAnimatedNode extends RCTAnimatedNode {\n  connectedViewTag: ?number;\n  connectedViewName: ?string;\n  uiManager: ?*;\n  propsDictionary: { [propName: string]: any };\n\n  constructor(tag: number, config: Config) {\n    super(tag, config);\n    this.propsDictionary = {};\n  }\n\n  connectToView(viewTag: number, viewName: string, uiManager: *) {\n    this.connectedViewTag = viewTag;\n    this.connectedViewName = viewName;\n    this.uiManager = uiManager;\n  }\n\n  disconnectFromView(viewTag: number) {\n    // Restore the default value for all props that were modified by this node.\n    for (let key of Object.keys(this.propsDictionary)) {\n      this.propsDictionary[key] = null;\n    }\n\n    if (\n      Object.keys(this.propsDictionary).length &&\n      this.connectedViewTag &&\n      this.connectedViewName &&\n      this.uiManager\n    ) {\n      this.uiManager.synchronouslyUpdateView(\n        this.connectedViewTag,\n        this.connectedViewName,\n        this.propsDictionary\n      );\n    }\n\n    this.connectedViewTag = null;\n    this.connectedViewName = null;\n    this.uiManager = null;\n  }\n\n  performUpdate() {\n    super.performUpdate();\n\n    const connectedViewTag = this.connectedViewTag;\n    if (!connectedViewTag) {\n      return;\n    }\n\n    this.parentNodes &&\n      Object.entries(this.parentNodes).forEach(([parentTag, parentNode]) => {\n        if (parentNode instanceof RCTStyleAnimatedNode) {\n          this.propsDictionary = {\n            ...this.propsDictionary,\n            ...parentNode.propsDictionary\n          };\n        } else if (parentNode instanceof RCTValueAnimatedNode) {\n          const property = this.propertyNameForParentTag(\n            parseInt(parentTag, 10)\n          );\n          const value = parentNode.value;\n          this.propsDictionary[property] = value;\n        }\n      });\n\n    if (Object.keys(this.propsDictionary).length) {\n      if (this.uiManager && this.connectedViewName && this.connectedViewTag) {\n        this.uiManager.synchronouslyUpdateView(\n          this.connectedViewTag,\n          this.connectedViewName,\n          this.propsDictionary\n        );\n      }\n    }\n  }\n\n  propertyNameForParentTag(parentTag: number): string {\n    for (let [property, tag] in this.config.props) {\n      if (tag === parentTag) {\n        return property;\n      }\n    }\n    throw new Error(\"No tags found in props that match parentTag\");\n  }\n}\n\nexport default RCTPropsAnimatedNode;\n"]}