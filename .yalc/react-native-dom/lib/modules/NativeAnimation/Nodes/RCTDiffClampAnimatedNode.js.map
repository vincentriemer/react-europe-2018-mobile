{"version":3,"sources":["../../../../ReactDom/modules/NativeAnimation/Nodes/RCTDiffClampAnimatedNode.js"],"names":["RCTDiffClampAnimatedNode","tag","config","inputNodeTag","input","min","max","parent","value","lastValue","inputNodeValue","diff","Math","parentNodes","inputNode","console","error"],"mappings":"oqBAMA,6D,0EACA,qD,yIAEMA,yB,wGAMJ,kCAAYC,GAAZ,CAAyBC,MAAzB,CAAyC,oNACjCD,GADiC,CAC5BC,MAD4B,GAEvC,MAAKC,YAAL,CAAoBD,OAAOE,KAA3B,CACA,MAAKC,GAAL,CAAWH,OAAOG,GAAlB,CACA,MAAKC,GAAL,CAAWJ,OAAOI,GAAlB,CAJuC,aAKxC,C,4GAEgBC,M,CAAyB,CACxC,6JAAuBA,MAAvB,EACA,KAAKC,KAAL,CAAa,KAAKC,SAAL,CAAiB,KAAKC,cAAnC,CACD,C,qDAEe,CACd,2JAEA,GAAMD,WAAY,KAAKA,SAAL,CAAiB,KAAKA,SAAtB,CAAkC,CAApD,CACA,GAAMD,OAAQ,KAAKE,cAAnB,CAEA,GAAMC,MAAOH,MAAQC,SAArB,CACA,KAAKA,SAAL,CAAiBD,KAAjB,CACA,KAAKA,KAAL,CAAaI,KAAKP,GAAL,CAASO,KAAKN,GAAL,CAAS,KAAKE,KAAL,CAAaG,IAAtB,CAA4B,KAAKN,GAAjC,CAAT,CAAgD,KAAKC,GAArD,CAAb,CACD,C,0CAE4B,CAC3B,wBAAU,KAAKO,WAAf,kCACA,GAAMC,WAAY,KAAKD,WAAL,CAAiB,KAAKV,YAAtB,CAAlB,CACA,GAAI,EAAEW,mDAAF,CAAJ,CAAkD,CAChDC,QAAQC,KAAR,CACE,6DADF,EAGA,MAAO,EAAP,CACD,CACD,MAAOF,WAAUN,KAAjB,CACD,C,sFAGYR,wB","file":"RCTDiffClampAnimatedNode.js","sourcesContent":["/**\n * @providesModule RCTDiffClampAnimatedNode\n * @flow\n */\n\nimport type RCTAnimatedNode from \"RCTAnimatedNode\";\nimport RCTValueAnimatedNode from \"RCTValueAnimatedNode\";\nimport invariant from \"Invariant\";\n\nclass RCTDiffClampAnimatedNode extends RCTValueAnimatedNode {\n  inputNodeTag: number;\n  min: number;\n  max: number;\n  lastValue: ?number;\n\n  constructor(tag: number, config: Object) {\n    super(tag, config);\n    this.inputNodeTag = config.input;\n    this.min = config.min;\n    this.max = config.max;\n  }\n\n  onAttachedToNode(parent: RCTAnimatedNode) {\n    super.onAttachedToNode(parent);\n    this.value = this.lastValue = this.inputNodeValue;\n  }\n\n  performUpdate() {\n    super.performUpdate();\n\n    const lastValue = this.lastValue ? this.lastValue : 0;\n    const value = this.inputNodeValue;\n\n    const diff = value - lastValue;\n    this.lastValue = value;\n    this.value = Math.min(Math.max(this.value + diff, this.min), this.max);\n  }\n\n  get inputNodeValue(): number {\n    invariant(this.parentNodes, `diffClamp node has no parents`);\n    const inputNode = this.parentNodes[this.inputNodeTag];\n    if (!(inputNode instanceof RCTValueAnimatedNode)) {\n      console.error(\n        \"Illegal node ID set as an input for Animated.DiffClamp node\"\n      );\n      return 0;\n    }\n    return inputNode.value;\n  }\n}\n\nexport default RCTDiffClampAnimatedNode;\n"]}