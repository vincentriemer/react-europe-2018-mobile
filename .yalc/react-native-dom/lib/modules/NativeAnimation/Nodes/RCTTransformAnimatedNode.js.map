{"version":3,"sources":["../../../../ReactDom/modules/NativeAnimation/Nodes/RCTTransformAnimatedNode.js"],"names":["RCTTransformAnimatedNode","tag","config","propsDictionary","transformConfigs","transforms","transform","transformConfig","type","property","value","nodeTag","node","parentNodes","push","animatedTransform"],"mappings":"uyBAMA,4D,yEACA,mD,sJAEMA,yB,8FAGJ,kCAAYC,GAAZ,CAAyBC,MAAzB,CAAyC,oNACjCD,GADiC,CAC5BC,MAD4B,GAEvC,MAAKC,eAAL,CAAuB,EAAvB,CAFuC,aAGxC,C,uGAEe,CACd,2JAEA,GAAMC,kBAAmB,KAAKF,MAAL,CAAYG,UAArC,CACA,GAAMC,WAAY,EAAlB,CAEA,kBAA4BF,gBAA5B,4IAA8C,uIAArCG,gBAAqC,MAC5C,GAAMC,MAAOD,gBAAgBC,IAA7B,CACA,GAAMC,UAAWF,gBAAgBE,QAAjC,CAEA,GAAIC,aAAJ,CACA,GAAIF,OAAS,UAAb,CAAyB,CACvB,GAAMG,SAAUJ,gBAAgBI,OAAhC,CACA,GAAMC,MAAO,KAAKC,WAAL,CAAmB,KAAKA,WAAL,CAAiBF,OAAjB,CAAnB,CAA+C,IAA5D,CACA,GAAI,EAAEC,8CAAF,CAAJ,CAA6C,CAC3C,SACD,CACDF,MAAQE,KAAKF,KAAb,CACD,CAPD,IAOO,CACLA,MAAQH,gBAAgBG,KAAxB,CACD,CACDJ,UAAUQ,IAAV,iCAAkBL,QAAlB,CAA6BC,KAA7B,GACD,CAED,KAAKP,eAAL,CAAqBY,iBAArB,CAAyCT,SAAzC,CACD,C,iFAGYN,wB","file":"RCTTransformAnimatedNode.js","sourcesContent":["/**\n * @providesModule RCTTransformAnimatedNode\n * @flow\n */\n\nimport type { Config } from \"RCTNativeAnimatedModule\";\nimport RCTValueAnimatedNode from \"RCTValueAnimatedNode\";\nimport RCTAnimatedNode from \"RCTAnimatedNode\";\n\nclass RCTTransformAnimatedNode extends RCTAnimatedNode {\n  propsDictionary: { [propName: string]: any };\n\n  constructor(tag: number, config: Config) {\n    super(tag, config);\n    this.propsDictionary = {};\n  }\n\n  performUpdate() {\n    super.performUpdate();\n\n    const transformConfigs = this.config.transforms;\n    const transform = [];\n\n    for (let transformConfig of transformConfigs) {\n      const type = transformConfig.type;\n      const property = transformConfig.property;\n\n      let value;\n      if (type === \"animated\") {\n        const nodeTag = transformConfig.nodeTag;\n        const node = this.parentNodes ? this.parentNodes[nodeTag] : null;\n        if (!(node instanceof RCTValueAnimatedNode)) {\n          continue;\n        }\n        value = node.value;\n      } else {\n        value = transformConfig.value;\n      }\n      transform.push({ [property]: value });\n    }\n\n    this.propsDictionary.animatedTransform = transform;\n  }\n}\n\nexport default RCTTransformAnimatedNode;\n"]}