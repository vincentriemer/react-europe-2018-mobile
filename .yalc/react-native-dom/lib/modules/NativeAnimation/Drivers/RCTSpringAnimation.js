Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=require("babel-runtime/helpers/classCallCheck");var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require("babel-runtime/helpers/createClass");var _createClass3=_interopRequireDefault(_createClass2);var _RCTAnimationDriver=require("./RCTAnimationDriver");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var MAX_DELTA_TIME=0.064;var RCTSpringAnimation=function(){function RCTSpringAnimation(animationId,config,valueNode,callback){(0,_classCallCheck3.default)(this,RCTSpringAnimation);var iterations=config.iterations!=null?config.iterations:1;this.animationId=animationId;this.toValue=config.toValue;this.fromValue=valueNode.value;this.lastPosition=0;this.valueNode=valueNode;this.overshootClamping=config.overshootClamping;this.restDisplacementThreshold=config.restDisplacementThreshold;this.restSpeedThreshold=config.restSpeedThreshold;this.stiffness=config.stiffness;this.damping=config.damping;this.mass=config.mass;this.initialVelocity=config.initialVelocity;this.callback=callback;this.lastPosition=this.fromValue;this.lastVelocity=this.initialVelocity;this.animationHasFinished=iterations===0;this.iterations=iterations;this.currentLoop=1;return this;}(0,_createClass3.default)(RCTSpringAnimation,[{key:"startAnimation",value:function startAnimation(){this.animationStartTime=this.animationCurrentTime=-1;this.animationHasBegun=true;}},{key:"stopAnimation",value:function stopAnimation(){if(this.callback){this.callback({finished:this.animationHasFinished});}}},{key:"stepAnimationWithTime",value:function stepAnimationWithTime(currentTime){if(!this.animationHasBegun||this.animationHasFinished){return;}var deltaTime=void 0;if(this.animationStartTime===-1){this._t=0.0;this.animationStartTime=currentTime;deltaTime=0.0;}else{var curDeltaTime=(currentTime-this.animationCurrentTime)/1000;deltaTime=Math.min(MAX_DELTA_TIME,curDeltaTime);this._t+=deltaTime;}this.animationCurrentTime=currentTime;var c=this.damping;var m=this.mass;var k=this.stiffness;var v0=-this.initialVelocity;var zeta=c/(2*Math.sqrt(k*m));var omega0=Math.sqrt(k/m);var omega1=omega0*Math.sqrt(1.0-zeta*zeta);var x0=this.toValue-this.fromValue;var position=void 0;var velocity=void 0;if(zeta<1){var envelope=Math.exp(-zeta*omega0*this._t);position=this.toValue-envelope*((v0+zeta*omega0*x0)/omega1*Math.sin(omega1*this._t)+x0*Math.cos(omega1*this._t));velocity=zeta*omega0*envelope*(Math.sin(omega1*this._t)*(v0+zeta*omega0*x0)/omega1+x0*Math.cos(omega1*this._t))-envelope*(Math.cos(omega1*this._t)*(v0+zeta*omega0*x0)-omega1*x0*Math.sin(omega1*this._t));}else{var _envelope=Math.exp(-omega0*this._t);position=this.toValue-_envelope*(x0+(v0+omega0*x0)*this._t);velocity=_envelope*(v0*(this._t*omega0-1)+this._t*x0*(omega0*omega0));}this.lastPosition=position;this.lastVelocity=velocity;this.onUpdate(position);var isOvershooting=false;if(this.overshootClamping&&this.stiffness!==0){if(this.fromValue<this.toValue){isOvershooting=position>this.toValue;}else{isOvershooting=position<this.toValue;}}var isVelocity=Math.abs(velocity)<=this.restSpeedThreshold;var isDisplacement=true;if(this.stiffness!==0){isDisplacement=Math.abs(this.toValue-position)<=this.restDisplacementThreshold;}if(isOvershooting||isVelocity&&isDisplacement){if(this.stiffness!==0){if(this.animationHasFinished){return;}this.onUpdate(this.toValue);}if(this.iterations===-1||this.currentLoop<this.iterations){this.lastPosition=this.fromValue;this.lastVelocity=this.initialVelocity;this.animationStartTime=-1;this.currentLoop++;this.onUpdate(this.fromValue);}else{this.animationHasFinished=true;}}}},{key:"onUpdate",value:function onUpdate(outputValue){this.valueNode.value=outputValue;this.valueNode.setNeedsUpdate();}}]);return RCTSpringAnimation;}();exports.default=RCTSpringAnimation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,