{"version":3,"sources":["../../../ReactDom/modules/NativeAnimation/RCTNativeAnimatedNodesManager.js"],"names":["NODE_TYPE_MAP","style","value","props","interpolation","transform","multiplication","addition","modulus","division","tracking","DRIVER_TYPE_MAP","frames","decay","spring","RCTNativeAnimatedNodesManager","uiManager","animationNodes","eventDrivers","activeAnimations","Set","ticking","tag","config","nodeType","type","NodeClass","console","error","node","manager","setNeedsUpdate","parentTag","childTag","parentNode","childNode","addChild","removeChild","nodeTag","viewTag","viewName","connectToView","disconnectFromView","detachNode","stopAnimationsForNode","offset","flattenOffset","extractOffset","animationId","endCallback","valueNode","AnimationDriverClass","animationDriver","add","startAnimation","startAnimationLoopIfNeeded","driver","stopAnimation","delete","discarded","forEach","push","eventName","eventMapping","animatedValueTag","eventPath","nativeEventPath","key","animatedNodeTag","length","driversForKey","i","splice","event","Object","keys","updateWithEvent","updateAnimations","valueObserver","size","window","requestAnimationFrame","stepAnimations","bind","timestamp","stepAnimationWithTime","animationHasFinished","stopAnimationLoopIfNeeded","values","needsUpdate","updateNodeIfNecessary"],"mappings":"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","file":"RCTNativeAnimatedNodesManager.js","sourcesContent":["/**\n * @providesModule RCTNativeAnimatedNodesManager\n * @flow\n */\n\nimport type { Config } from \"RCTNativeAnimatedModule\";\nimport type { RCTEvent } from \"RCTEventDispatcher\";\n\nimport invariant from \"Invariant\";\n\nimport type { RCTAnimationDriver } from \"RCTAnimationDriver\";\nimport type { RCTValueAnimatedNodeObserver } from \"RCTValueAnimatedNode\";\n\n// Nodes\nimport RCTAnimatedNode from \"RCTAnimatedNode\";\nimport RCTValueAnimatedNode from \"RCTValueAnimatedNode\";\nimport RCTPropsAnimatedNode from \"RCTPropsAnimatedNode\";\nimport RCTStyleAnimatedNode from \"RCTStyleAnimatedNode\";\nimport RCTInterpolationAnimatedNode from \"RCTInterpolationAnimatedNode\";\nimport RCTTransformAnimatedNode from \"RCTTransformAnimatedNode\";\nimport RCTMultiplicationAnimatedNode from \"RCTMultiplicationAnimatedNode\";\nimport RCTAdditionAnimatedNode from \"RCTAdditionAnimatedNode\";\nimport RCTModuloAnimatedNode from \"RCTModuloAnimatedNode\";\nimport RCTDivisionAnimatedNode from \"RCTDivisionAnimatedNode\";\nimport RCTTrackingAnimatedNode from \"RCTTrackingAnimatedNode\";\n\n// Drivers\nimport RCTEventAnimation from \"RCTEventAnimation\";\nimport RCTFrameAnimation from \"RCTFrameAnimation\";\nimport RCTDecayAnimation from \"RCTDecayAnimation\";\nimport RCTSpringAnimation from \"RCTSpringAnimation\";\n\nimport typeof _RCTUIManager from \"RCTUIManager\";\ntype RCTUIManager = $Call<$await<_RCTUIManager>>;\n\nconst NODE_TYPE_MAP: { [typeName: string]: Class<RCTAnimatedNode> } = {\n  style: RCTStyleAnimatedNode,\n  value: RCTValueAnimatedNode,\n  props: RCTPropsAnimatedNode,\n  interpolation: RCTInterpolationAnimatedNode,\n  transform: RCTTransformAnimatedNode,\n  multiplication: RCTMultiplicationAnimatedNode,\n  addition: RCTAdditionAnimatedNode,\n  modulus: RCTModuloAnimatedNode,\n  division: RCTDivisionAnimatedNode,\n  tracking: RCTTrackingAnimatedNode\n};\n\nconst DRIVER_TYPE_MAP: { [typeName: string]: Class<RCTAnimationDriver> } = {\n  frames: RCTFrameAnimation,\n  decay: RCTDecayAnimation,\n  spring: RCTSpringAnimation\n};\n\nclass RCTNativeAnimatedNodesManager {\n  uiManager: RCTUIManager;\n\n  animationNodes: { [nodeTag: number]: RCTAnimatedNode };\n  eventDrivers: { [key: string]: RCTEventAnimation[] };\n  activeAnimations: Set<RCTAnimationDriver>;\n\n  ticking: boolean;\n\n  constructor(uiManager: RCTUIManager) {\n    this.uiManager = uiManager;\n    this.animationNodes = {};\n    this.eventDrivers = {};\n    this.activeAnimations = new Set();\n    this.ticking = false;\n  }\n\n  // -- Graph\n\n  createAnimatedNode(tag: number, config: Config) {\n    const nodeType = config.type;\n\n    const NodeClass = NODE_TYPE_MAP[nodeType];\n    if (!NodeClass) {\n      console.error(`Animated node type ${nodeType} not supported natively`);\n      return;\n    }\n\n    const node = new NodeClass(tag, config);\n    node.manager = this;\n    this.animationNodes[tag] = node;\n    node.setNeedsUpdate();\n  }\n\n  connectAnimatedNodes(parentTag: number, childTag: number) {\n    const parentNode = this.animationNodes[parentTag];\n    const childNode = this.animationNodes[childTag];\n\n    invariant(parentNode, `no such parent node with id ${parentTag}`);\n    invariant(childNode, `no such child node with id ${childTag}`);\n\n    parentNode.addChild(childNode);\n    childNode.setNeedsUpdate();\n  }\n\n  disconnectAnimatedNodes(parentTag: number, childTag: number) {\n    const parentNode = this.animationNodes[parentTag];\n    const childNode = this.animationNodes[childTag];\n\n    invariant(parentNode, `no such parent node with id ${parentTag}`);\n    invariant(childNode, `no such child node with id ${childTag}`);\n\n    parentNode.removeChild(childNode);\n    childNode.setNeedsUpdate();\n  }\n\n  connectAnimatedNodeToView(\n    nodeTag: number,\n    viewTag: number,\n    viewName: string\n  ) {\n    const node = this.animationNodes[nodeTag];\n    if (node instanceof RCTPropsAnimatedNode) {\n      node.connectToView(viewTag, viewName, this.uiManager);\n    }\n    node.setNeedsUpdate();\n  }\n\n  disconnectAnimatedNodeFromView(nodeTag: number, viewTag: number) {\n    const node = this.animationNodes[nodeTag];\n    if (node instanceof RCTPropsAnimatedNode) {\n      node.disconnectFromView(viewTag);\n    }\n  }\n\n  dropAnimatedNode(tag: number) {\n    const node = this.animationNodes[tag];\n    if (node) {\n      node.detachNode();\n      delete this.animationNodes[tag];\n    }\n  }\n\n  // -- Mutations\n\n  setAnimatedNodeValue(nodeTag: number, value: number) {\n    const node = this.animationNodes[nodeTag];\n    if (!(node instanceof RCTValueAnimatedNode)) {\n      console.error(\"Not a value node.\");\n      return;\n    }\n    this.stopAnimationsForNode(node);\n\n    node.value = value;\n    node.setNeedsUpdate();\n  }\n\n  setAnimatedNodeOffset(nodeTag: number, offset: number) {\n    const node = this.animationNodes[nodeTag];\n    if (!(node instanceof RCTValueAnimatedNode)) {\n      console.error(\"Not a value node.\");\n      return;\n    }\n    node.offset = offset;\n    node.setNeedsUpdate();\n  }\n\n  flattenAnimatedNodeOffset(nodeTag: number) {\n    const node = this.animationNodes[nodeTag];\n    if (!(node instanceof RCTValueAnimatedNode)) {\n      console.error(\"Not a value node.\");\n      return;\n    }\n    node.flattenOffset();\n  }\n\n  extractAnimatedNodeOffset(nodeTag: number) {\n    const node = this.animationNodes[nodeTag];\n    if (!(node instanceof RCTValueAnimatedNode)) {\n      console.error(\"Not a value node.\");\n      return;\n    }\n    node.extractOffset();\n  }\n\n  // -- Drivers\n\n  startAnimatingNode(\n    animationId: number,\n    nodeTag: number,\n    config: Config,\n    endCallback: ?Function\n  ) {\n    const valueNode = this.animationNodes[nodeTag];\n    invariant(\n      valueNode instanceof RCTValueAnimatedNode,\n      `Animation Node of id ${nodeTag} is not a ValueAnimatedNode`\n    );\n\n    const AnimationDriverClass = DRIVER_TYPE_MAP[config.type];\n    if (AnimationDriverClass == null) {\n      console.error(`Unsupported animation type: ${config.type}`);\n      return;\n    }\n\n    const animationDriver = new AnimationDriverClass(\n      animationId,\n      config,\n      valueNode,\n      endCallback\n    );\n\n    this.activeAnimations.add(animationDriver);\n    animationDriver.startAnimation();\n    this.startAnimationLoopIfNeeded();\n  }\n\n  stopAnimation(animationId: number) {\n    for (let driver of this.activeAnimations) {\n      if (driver.animationId === animationId) {\n        driver.stopAnimation();\n        this.activeAnimations.delete(driver);\n        break;\n      }\n    }\n  }\n\n  stopAnimationsForNode(node: RCTAnimatedNode) {\n    const discarded: RCTAnimationDriver[] = [];\n    this.activeAnimations.forEach((driver) => {\n      if (driver.valueNode === node) {\n        discarded.push(driver);\n      }\n    });\n\n    discarded.forEach((driver) => {\n      driver.stopAnimation();\n      this.activeAnimations.delete(driver);\n    });\n  }\n\n  // -- Events\n\n  addAnimatedEventToView(\n    viewTag: number,\n    eventName: string,\n    eventMapping: Object\n  ) {\n    const nodeTag: number = eventMapping.animatedValueTag;\n    const node = this.animationNodes[nodeTag];\n\n    if (!node) {\n      console.error(`Animated node with tag ${nodeTag} does not exist`);\n      return;\n    }\n\n    if (!(node instanceof RCTValueAnimatedNode)) {\n      console.error(\n        \"Animated node connected to event should be of type RCTValueAnimatedNode\"\n      );\n      return;\n    }\n\n    const eventPath: string[] = eventMapping.nativeEventPath;\n\n    const driver = new RCTEventAnimation(eventPath, node);\n\n    const key = `${viewTag}${eventName}`;\n    if (this.eventDrivers[key] != null) {\n      this.eventDrivers[key].push(driver);\n    } else {\n      this.eventDrivers[key] = [driver];\n    }\n  }\n\n  removeAnimatedEventFromView(\n    viewTag: number,\n    eventName: string,\n    animatedNodeTag: number\n  ) {\n    const key = `${viewTag}${eventName}`;\n    if (this.eventDrivers[key] != null) {\n      if (this.eventDrivers[key].length === 1) {\n        delete this.eventDrivers[key];\n      } else {\n        const driversForKey = this.eventDrivers[key];\n        for (let i = 0; i < driversForKey.length; i++) {\n          if (driversForKey[i].valueNode.nodeTag === animatedNodeTag) {\n            this.eventDrivers[key].splice(i, 1);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  handleAnimatedEvent(event: RCTEvent) {\n    if (Object.keys(this.eventDrivers).length === 0) {\n      return;\n    }\n\n    const key = `${event.viewTag}${event.eventName}`;\n    const driversForKey = this.eventDrivers[key];\n\n    if (driversForKey) {\n      for (let driver of driversForKey) {\n        this.stopAnimationsForNode(driver.valueNode);\n        driver.updateWithEvent(event);\n      }\n\n      this.updateAnimations();\n    }\n  }\n\n  // -- Listeners\n\n  startListeningToAnimatedNodeValue(\n    tag: number,\n    valueObserver: RCTValueAnimatedNodeObserver\n  ) {\n    const node = this.animationNodes[tag];\n    if (node instanceof RCTValueAnimatedNode) {\n      node.valueObserver = valueObserver;\n    }\n  }\n\n  stopListeningToAnimatedNodeValue(tag: number) {\n    const node = this.animationNodes[tag];\n    if (node instanceof RCTValueAnimatedNode) {\n      node.valueObserver = null;\n    }\n  }\n\n  // -- Animation Loop\n  // TODO: Don't hook into RAF and instead declaritively use WAAPI\n\n  startAnimationLoopIfNeeded() {\n    if (!this.ticking && this.activeAnimations.size > 0) {\n      window.requestAnimationFrame(this.stepAnimations.bind(this));\n      this.ticking = true;\n    }\n  }\n\n  stepAnimations(timestamp: number) {\n    for (let animationDriver of this.activeAnimations) {\n      animationDriver.stepAnimationWithTime(timestamp);\n    }\n\n    this.updateAnimations();\n\n    for (let animationDriver of this.activeAnimations) {\n      if (animationDriver.animationHasFinished) {\n        animationDriver.stopAnimation();\n        this.activeAnimations.delete(animationDriver);\n      }\n    }\n\n    this.stopAnimationLoopIfNeeded();\n  }\n\n  stopAnimationLoopIfNeeded() {\n    this.ticking = false;\n\n    // If there are still active animations continue to next frame\n    if (this.activeAnimations.size !== 0) {\n      this.startAnimationLoopIfNeeded();\n    }\n  }\n\n  // -- Updates\n\n  updateAnimations() {\n    // $FlowFixMe\n    Object.values(this.animationNodes).forEach((node: RCTAnimatedNode) => {\n      if (node.needsUpdate) {\n        node.updateNodeIfNecessary();\n      }\n    });\n  }\n}\n\nexport default RCTNativeAnimatedNodesManager;\n"]}