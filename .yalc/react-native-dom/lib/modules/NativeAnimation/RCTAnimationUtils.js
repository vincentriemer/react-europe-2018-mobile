Object.defineProperty(exports,"__esModule",{value:true});exports.RCTInterpolateValue=RCTInterpolateValue;exports.RCTInterpolateValueInRange=RCTInterpolateValueInRange;var EXTRAPOLATE_TYPE_IDENTITY=exports.EXTRAPOLATE_TYPE_IDENTITY="identity";var EXTRAPOLATE_TYPE_CLAMP=exports.EXTRAPOLATE_TYPE_CLAMP="clamp";var EXTRAPOLATE_TYPE_EXTEND=exports.EXTRAPOLATE_TYPE_EXTEND="extend";function RCTFindIndexOfNearestValue(value,range){var index=void 0;var rangeCount=range.length;for(index=1;index<rangeCount-1;index++){var inputValue=range[index];if(inputValue>=value){break;}}return index-1;}function RCTInterpolateValue(value,inputMin,inputMax,outputMin,outputMax,extrapolateLeft,extrapolateRight){if(value<inputMin){if(extrapolateLeft==="identity"){return value;}else if(extrapolateLeft==="clamp"){value=inputMin;}else if(extrapolateLeft==="extend"){}else{throw new Error("Invalid extrapolation type "+extrapolateLeft+" for left extrapolation");}}if(value>inputMax){if(extrapolateRight==="identity"){return value;}else if(extrapolateRight==="clamp"){value=inputMax;}else if(extrapolateRight==="extend"){}else{throw new Error("Invalid extrapolation type "+extrapolateRight+" for right extrapolation");}}return outputMin+(value-inputMin)*(outputMax-outputMin)/(inputMax-inputMin);}function RCTInterpolateValueInRange(value,inputRange,outputRange,extrapolateLeft,extrapolateRight){var rangeIndex=RCTFindIndexOfNearestValue(value,inputRange);var inputMin=inputRange[rangeIndex];var inputMax=inputRange[rangeIndex+1];var outputMin=outputRange[rangeIndex];var outputMax=outputRange[rangeIndex+1];var output=RCTInterpolateValue(value,inputMin,inputMax,outputMin,outputMax,extrapolateLeft,extrapolateRight);return output;}
//# sourceMappingURL=RCTAnimationUtils.js.map