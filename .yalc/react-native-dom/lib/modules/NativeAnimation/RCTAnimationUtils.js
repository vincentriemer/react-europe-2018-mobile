Object.defineProperty(exports,"__esModule",{value:true});exports.RCTInterpolateValue=RCTInterpolateValue;exports.RCTInterpolateValueInRange=RCTInterpolateValueInRange;var EXTRAPOLATE_TYPE_IDENTITY=exports.EXTRAPOLATE_TYPE_IDENTITY="identity";var EXTRAPOLATE_TYPE_CLAMP=exports.EXTRAPOLATE_TYPE_CLAMP="clamp";var EXTRAPOLATE_TYPE_EXTEND=exports.EXTRAPOLATE_TYPE_EXTEND="extend";function RCTFindIndexOfNearestValue(value,range){var index=void 0;var rangeCount=range.length;for(index=1;index<rangeCount-1;index++){var inputValue=range[index];if(inputValue>=value){break;}}return index-1;}function RCTInterpolateValue(value,inputMin,inputMax,outputMin,outputMax,extrapolateLeft,extrapolateRight){if(value<inputMin){if(extrapolateLeft==="identity"){return value;}else if(extrapolateLeft==="clamp"){value=inputMin;}else if(extrapolateLeft==="extend"){}else{throw new Error("Invalid extrapolation type "+extrapolateLeft+" for left extrapolation");}}if(value>inputMax){if(extrapolateRight==="identity"){return value;}else if(extrapolateRight==="clamp"){value=inputMax;}else if(extrapolateRight==="extend"){}else{throw new Error("Invalid extrapolation type "+extrapolateRight+" for right extrapolation");}}return outputMin+(value-inputMin)*(outputMax-outputMin)/(inputMax-inputMin);}function RCTInterpolateValueInRange(value,inputRange,outputRange,extrapolateLeft,extrapolateRight){var rangeIndex=RCTFindIndexOfNearestValue(value,inputRange);var inputMin=inputRange[rangeIndex];var inputMax=inputRange[rangeIndex+1];var outputMin=outputRange[rangeIndex];var outputMax=outputRange[rangeIndex+1];var output=RCTInterpolateValue(value,inputMin,inputMax,outputMin,outputMax,extrapolateLeft,extrapolateRight);return output;}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL1JlYWN0RG9tL21vZHVsZXMvTmF0aXZlQW5pbWF0aW9uL1JDVEFuaW1hdGlvblV0aWxzLmpzIl0sIm5hbWVzIjpbIlJDVEludGVycG9sYXRlVmFsdWUiLCJSQ1RJbnRlcnBvbGF0ZVZhbHVlSW5SYW5nZSIsIkVYVFJBUE9MQVRFX1RZUEVfSURFTlRJVFkiLCJFWFRSQVBPTEFURV9UWVBFX0NMQU1QIiwiRVhUUkFQT0xBVEVfVFlQRV9FWFRFTkQiLCJSQ1RGaW5kSW5kZXhPZk5lYXJlc3RWYWx1ZSIsInZhbHVlIiwicmFuZ2UiLCJpbmRleCIsInJhbmdlQ291bnQiLCJsZW5ndGgiLCJpbnB1dFZhbHVlIiwiaW5wdXRNaW4iLCJpbnB1dE1heCIsIm91dHB1dE1pbiIsIm91dHB1dE1heCIsImV4dHJhcG9sYXRlTGVmdCIsImV4dHJhcG9sYXRlUmlnaHQiLCJFcnJvciIsImlucHV0UmFuZ2UiLCJvdXRwdXRSYW5nZSIsInJhbmdlSW5kZXgiLCJvdXRwdXQiXSwibWFwcGluZ3MiOiJpRUFxQmdCQSxtQixDQUFBQSxtQixTQTJDQUMsMEIsQ0FBQUEsMEIsQ0EzRFQsR0FBTUMsNkRBQTRCLFVBQWxDLENBQ0EsR0FBTUMsdURBQXlCLE9BQS9CLENBQ0EsR0FBTUMseURBQTBCLFFBQWhDLENBRVAsUUFBU0MsMkJBQVQsQ0FBb0NDLEtBQXBDLENBQW1EQyxLQUFuRCxDQUFvRSxDQUNsRSxHQUFJQyxhQUFKLENBQ0EsR0FBTUMsWUFBYUYsTUFBTUcsTUFBekIsQ0FDQSxJQUFLRixNQUFRLENBQWIsQ0FBZ0JBLE1BQVFDLFdBQWEsQ0FBckMsQ0FBd0NELE9BQXhDLENBQWlELENBQy9DLEdBQU1HLFlBQWFKLE1BQU1DLEtBQU4sQ0FBbkIsQ0FDQSxHQUFJRyxZQUFjTCxLQUFsQixDQUF5QixDQUN2QixNQUNELENBQ0YsQ0FDRCxNQUFPRSxPQUFRLENBQWYsQ0FDRCxDQUVNLFFBQVNSLG9CQUFULENBQ0xNLEtBREssQ0FFTE0sUUFGSyxDQUdMQyxRQUhLLENBSUxDLFNBSkssQ0FLTEMsU0FMSyxDQU1MQyxlQU5LLENBT0xDLGdCQVBLLENBUUwsQ0FDQSxHQUFJWCxNQUFRTSxRQUFaLENBQXNCLENBQ3BCLEdBQUlJLGtCQUFvQixVQUF4QixDQUFvQyxDQUNsQyxNQUFPVixNQUFQLENBQ0QsQ0FGRCxJQUVPLElBQUlVLGtCQUFvQixPQUF4QixDQUFpQyxDQUN0Q1YsTUFBUU0sUUFBUixDQUNELENBRk0sSUFFQSxJQUFJSSxrQkFBb0IsUUFBeEIsQ0FBa0MsQ0FFeEMsQ0FGTSxJQUVBLENBQ0wsS0FBTSxJQUFJRSxNQUFKLCtCQUMwQkYsZUFEMUIsMkJBQU4sQ0FHRCxDQUNGLENBRUQsR0FBSVYsTUFBUU8sUUFBWixDQUFzQixDQUNwQixHQUFJSSxtQkFBcUIsVUFBekIsQ0FBcUMsQ0FDbkMsTUFBT1gsTUFBUCxDQUNELENBRkQsSUFFTyxJQUFJVyxtQkFBcUIsT0FBekIsQ0FBa0MsQ0FDdkNYLE1BQVFPLFFBQVIsQ0FDRCxDQUZNLElBRUEsSUFBSUksbUJBQXFCLFFBQXpCLENBQW1DLENBRXpDLENBRk0sSUFFQSxDQUNMLEtBQU0sSUFBSUMsTUFBSiwrQkFDMEJELGdCQUQxQiw0QkFBTixDQUdELENBQ0YsQ0FFRCxNQUNFSCxXQUNBLENBQUNSLE1BQVFNLFFBQVQsR0FBc0JHLFVBQVlELFNBQWxDLEdBQWdERCxTQUFXRCxRQUEzRCxDQUZGLENBSUQsQ0FFTSxRQUFTWCwyQkFBVCxDQUNMSyxLQURLLENBRUxhLFVBRkssQ0FHTEMsV0FISyxDQUlMSixlQUpLLENBS0xDLGdCQUxLLENBTUwsQ0FDQSxHQUFNSSxZQUFhaEIsMkJBQTJCQyxLQUEzQixDQUFrQ2EsVUFBbEMsQ0FBbkIsQ0FDQSxHQUFNUCxVQUFXTyxXQUFXRSxVQUFYLENBQWpCLENBQ0EsR0FBTVIsVUFBV00sV0FBV0UsV0FBYSxDQUF4QixDQUFqQixDQUNBLEdBQU1QLFdBQVlNLFlBQVlDLFVBQVosQ0FBbEIsQ0FDQSxHQUFNTixXQUFZSyxZQUFZQyxXQUFhLENBQXpCLENBQWxCLENBRUEsR0FBTUMsUUFBU3RCLG9CQUNiTSxLQURhLENBRWJNLFFBRmEsQ0FHYkMsUUFIYSxDQUliQyxTQUphLENBS2JDLFNBTGEsQ0FNYkMsZUFOYSxDQU9iQyxnQkFQYSxDQUFmLENBVUEsTUFBT0ssT0FBUCxDQUNEIiwiZmlsZSI6IlJDVEFuaW1hdGlvblV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUkNUQW5pbWF0aW9uVXRpbHNcbiAqIEBmbG93XG4gKi9cblxuZXhwb3J0IGNvbnN0IEVYVFJBUE9MQVRFX1RZUEVfSURFTlRJVFkgPSBcImlkZW50aXR5XCI7XG5leHBvcnQgY29uc3QgRVhUUkFQT0xBVEVfVFlQRV9DTEFNUCA9IFwiY2xhbXBcIjtcbmV4cG9ydCBjb25zdCBFWFRSQVBPTEFURV9UWVBFX0VYVEVORCA9IFwiZXh0ZW5kXCI7XG5cbmZ1bmN0aW9uIFJDVEZpbmRJbmRleE9mTmVhcmVzdFZhbHVlKHZhbHVlOiBudW1iZXIsIHJhbmdlOiBudW1iZXJbXSkge1xuICBsZXQgaW5kZXg7XG4gIGNvbnN0IHJhbmdlQ291bnQgPSByYW5nZS5sZW5ndGg7XG4gIGZvciAoaW5kZXggPSAxOyBpbmRleCA8IHJhbmdlQ291bnQgLSAxOyBpbmRleCsrKSB7XG4gICAgY29uc3QgaW5wdXRWYWx1ZSA9IHJhbmdlW2luZGV4XTtcbiAgICBpZiAoaW5wdXRWYWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBpbmRleCAtIDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSQ1RJbnRlcnBvbGF0ZVZhbHVlKFxuICB2YWx1ZTogbnVtYmVyLFxuICBpbnB1dE1pbjogbnVtYmVyLFxuICBpbnB1dE1heDogbnVtYmVyLFxuICBvdXRwdXRNaW46IG51bWJlcixcbiAgb3V0cHV0TWF4OiBudW1iZXIsXG4gIGV4dHJhcG9sYXRlTGVmdDogc3RyaW5nLFxuICBleHRyYXBvbGF0ZVJpZ2h0OiBzdHJpbmdcbikge1xuICBpZiAodmFsdWUgPCBpbnB1dE1pbikge1xuICAgIGlmIChleHRyYXBvbGF0ZUxlZnQgPT09IFwiaWRlbnRpdHlcIikge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0gZWxzZSBpZiAoZXh0cmFwb2xhdGVMZWZ0ID09PSBcImNsYW1wXCIpIHtcbiAgICAgIHZhbHVlID0gaW5wdXRNaW47XG4gICAgfSBlbHNlIGlmIChleHRyYXBvbGF0ZUxlZnQgPT09IFwiZXh0ZW5kXCIpIHtcbiAgICAgIC8vIG5vb3BcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW52YWxpZCBleHRyYXBvbGF0aW9uIHR5cGUgJHtleHRyYXBvbGF0ZUxlZnR9IGZvciBsZWZ0IGV4dHJhcG9sYXRpb25gXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGlmICh2YWx1ZSA+IGlucHV0TWF4KSB7XG4gICAgaWYgKGV4dHJhcG9sYXRlUmlnaHQgPT09IFwiaWRlbnRpdHlcIikge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0gZWxzZSBpZiAoZXh0cmFwb2xhdGVSaWdodCA9PT0gXCJjbGFtcFwiKSB7XG4gICAgICB2YWx1ZSA9IGlucHV0TWF4O1xuICAgIH0gZWxzZSBpZiAoZXh0cmFwb2xhdGVSaWdodCA9PT0gXCJleHRlbmRcIikge1xuICAgICAgLy8gbm9vcFxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBJbnZhbGlkIGV4dHJhcG9sYXRpb24gdHlwZSAke2V4dHJhcG9sYXRlUmlnaHR9IGZvciByaWdodCBleHRyYXBvbGF0aW9uYFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgIG91dHB1dE1pbiArXG4gICAgKHZhbHVlIC0gaW5wdXRNaW4pICogKG91dHB1dE1heCAtIG91dHB1dE1pbikgLyAoaW5wdXRNYXggLSBpbnB1dE1pbilcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJDVEludGVycG9sYXRlVmFsdWVJblJhbmdlKFxuICB2YWx1ZTogbnVtYmVyLFxuICBpbnB1dFJhbmdlOiBudW1iZXJbXSxcbiAgb3V0cHV0UmFuZ2U6IG51bWJlcltdLFxuICBleHRyYXBvbGF0ZUxlZnQ6IHN0cmluZyxcbiAgZXh0cmFwb2xhdGVSaWdodDogc3RyaW5nXG4pIHtcbiAgY29uc3QgcmFuZ2VJbmRleCA9IFJDVEZpbmRJbmRleE9mTmVhcmVzdFZhbHVlKHZhbHVlLCBpbnB1dFJhbmdlKTtcbiAgY29uc3QgaW5wdXRNaW4gPSBpbnB1dFJhbmdlW3JhbmdlSW5kZXhdO1xuICBjb25zdCBpbnB1dE1heCA9IGlucHV0UmFuZ2VbcmFuZ2VJbmRleCArIDFdO1xuICBjb25zdCBvdXRwdXRNaW4gPSBvdXRwdXRSYW5nZVtyYW5nZUluZGV4XTtcbiAgY29uc3Qgb3V0cHV0TWF4ID0gb3V0cHV0UmFuZ2VbcmFuZ2VJbmRleCArIDFdO1xuXG4gIGNvbnN0IG91dHB1dCA9IFJDVEludGVycG9sYXRlVmFsdWUoXG4gICAgdmFsdWUsXG4gICAgaW5wdXRNaW4sXG4gICAgaW5wdXRNYXgsXG4gICAgb3V0cHV0TWluLFxuICAgIG91dHB1dE1heCxcbiAgICBleHRyYXBvbGF0ZUxlZnQsXG4gICAgZXh0cmFwb2xhdGVSaWdodFxuICApO1xuXG4gIHJldHVybiBvdXRwdXQ7XG59XG4iXX0=