{"version":3,"sources":["../../../ReactDom/modules/NativeAnimation/RCTAnimationUtils.js"],"names":["RCTInterpolateValue","RCTInterpolateValueInRange","EXTRAPOLATE_TYPE_IDENTITY","EXTRAPOLATE_TYPE_CLAMP","EXTRAPOLATE_TYPE_EXTEND","RCTFindIndexOfNearestValue","value","range","index","rangeCount","length","inputValue","inputMin","inputMax","outputMin","outputMax","extrapolateLeft","extrapolateRight","Error","inputRange","outputRange","rangeIndex","output"],"mappings":"iEAqBgBA,mB,CAAAA,mB,SA2CAC,0B,CAAAA,0B,CA3DT,GAAMC,6DAA4B,UAAlC,CACA,GAAMC,uDAAyB,OAA/B,CACA,GAAMC,yDAA0B,QAAhC,CAEP,QAASC,2BAAT,CAAoCC,KAApC,CAAmDC,KAAnD,CAAoE,CAClE,GAAIC,aAAJ,CACA,GAAMC,YAAaF,MAAMG,MAAzB,CACA,IAAKF,MAAQ,CAAb,CAAgBA,MAAQC,WAAa,CAArC,CAAwCD,OAAxC,CAAiD,CAC/C,GAAMG,YAAaJ,MAAMC,KAAN,CAAnB,CACA,GAAIG,YAAcL,KAAlB,CAAyB,CACvB,MACD,CACF,CACD,MAAOE,OAAQ,CAAf,CACD,CAEM,QAASR,oBAAT,CACLM,KADK,CAELM,QAFK,CAGLC,QAHK,CAILC,SAJK,CAKLC,SALK,CAMLC,eANK,CAOLC,gBAPK,CAQL,CACA,GAAIX,MAAQM,QAAZ,CAAsB,CACpB,GAAII,kBAAoB,UAAxB,CAAoC,CAClC,MAAOV,MAAP,CACD,CAFD,IAEO,IAAIU,kBAAoB,OAAxB,CAAiC,CACtCV,MAAQM,QAAR,CACD,CAFM,IAEA,IAAII,kBAAoB,QAAxB,CAAkC,CAExC,CAFM,IAEA,CACL,KAAM,IAAIE,MAAJ,+BAC0BF,eAD1B,2BAAN,CAGD,CACF,CAED,GAAIV,MAAQO,QAAZ,CAAsB,CACpB,GAAII,mBAAqB,UAAzB,CAAqC,CACnC,MAAOX,MAAP,CACD,CAFD,IAEO,IAAIW,mBAAqB,OAAzB,CAAkC,CACvCX,MAAQO,QAAR,CACD,CAFM,IAEA,IAAII,mBAAqB,QAAzB,CAAmC,CAEzC,CAFM,IAEA,CACL,KAAM,IAAIC,MAAJ,+BAC0BD,gBAD1B,4BAAN,CAGD,CACF,CAED,MACEH,WACA,CAACR,MAAQM,QAAT,GAAsBG,UAAYD,SAAlC,GAAgDD,SAAWD,QAA3D,CAFF,CAID,CAEM,QAASX,2BAAT,CACLK,KADK,CAELa,UAFK,CAGLC,WAHK,CAILJ,eAJK,CAKLC,gBALK,CAML,CACA,GAAMI,YAAahB,2BAA2BC,KAA3B,CAAkCa,UAAlC,CAAnB,CACA,GAAMP,UAAWO,WAAWE,UAAX,CAAjB,CACA,GAAMR,UAAWM,WAAWE,WAAa,CAAxB,CAAjB,CACA,GAAMP,WAAYM,YAAYC,UAAZ,CAAlB,CACA,GAAMN,WAAYK,YAAYC,WAAa,CAAzB,CAAlB,CAEA,GAAMC,QAAStB,oBACbM,KADa,CAEbM,QAFa,CAGbC,QAHa,CAIbC,SAJa,CAKbC,SALa,CAMbC,eANa,CAObC,gBAPa,CAAf,CAUA,MAAOK,OAAP,CACD","file":"RCTAnimationUtils.js","sourcesContent":["/**\n * @providesModule RCTAnimationUtils\n * @flow\n */\n\nexport const EXTRAPOLATE_TYPE_IDENTITY = \"identity\";\nexport const EXTRAPOLATE_TYPE_CLAMP = \"clamp\";\nexport const EXTRAPOLATE_TYPE_EXTEND = \"extend\";\n\nfunction RCTFindIndexOfNearestValue(value: number, range: number[]) {\n  let index;\n  const rangeCount = range.length;\n  for (index = 1; index < rangeCount - 1; index++) {\n    const inputValue = range[index];\n    if (inputValue >= value) {\n      break;\n    }\n  }\n  return index - 1;\n}\n\nexport function RCTInterpolateValue(\n  value: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  extrapolateLeft: string,\n  extrapolateRight: string\n) {\n  if (value < inputMin) {\n    if (extrapolateLeft === \"identity\") {\n      return value;\n    } else if (extrapolateLeft === \"clamp\") {\n      value = inputMin;\n    } else if (extrapolateLeft === \"extend\") {\n      // noop\n    } else {\n      throw new Error(\n        `Invalid extrapolation type ${extrapolateLeft} for left extrapolation`\n      );\n    }\n  }\n\n  if (value > inputMax) {\n    if (extrapolateRight === \"identity\") {\n      return value;\n    } else if (extrapolateRight === \"clamp\") {\n      value = inputMax;\n    } else if (extrapolateRight === \"extend\") {\n      // noop\n    } else {\n      throw new Error(\n        `Invalid extrapolation type ${extrapolateRight} for right extrapolation`\n      );\n    }\n  }\n\n  return (\n    outputMin +\n    (value - inputMin) * (outputMax - outputMin) / (inputMax - inputMin)\n  );\n}\n\nexport function RCTInterpolateValueInRange(\n  value: number,\n  inputRange: number[],\n  outputRange: number[],\n  extrapolateLeft: string,\n  extrapolateRight: string\n) {\n  const rangeIndex = RCTFindIndexOfNearestValue(value, inputRange);\n  const inputMin = inputRange[rangeIndex];\n  const inputMax = inputRange[rangeIndex + 1];\n  const outputMin = outputRange[rangeIndex];\n  const outputMax = outputRange[rangeIndex + 1];\n\n  const output = RCTInterpolateValue(\n    value,\n    inputMin,\n    inputMax,\n    outputMin,\n    outputMax,\n    extrapolateLeft,\n    extrapolateRight\n  );\n\n  return output;\n}\n"]}