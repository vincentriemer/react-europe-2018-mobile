{"version":3,"sources":["../../../ReactDom/modules/NativeAnimation/RCTNativeAnimatedModule.js"],"names":["RCTNativeAnimatedModule","bridge","uiManagerWillFlushBlocks","uiManager","preOperations","length","operations","prependUIBlock","operation","nodesManager","addUIBlock","updateAnimations","eventDispatcher","addDispatchObserver","observerCoordinator","addObserver","tag","config","addOperationBlock","createAnimatedNode","parentTag","childTag","connectAnimatedNodes","disconnectAnimatedNodes","animationId","nodeTag","endCallbackId","endCallback","callbackFromId","startAnimatingNode","stopAnimation","value","setAnimatedNodeValue","offset","setAnimatedNodeOffset","flattenAnimatedNodeOffset","extractAnimatedNodeOffset","viewTag","viewName","viewNameForReactTag","connectAnimatedNodeToView","addPreOperationBlock","disconnectAnimatedNodeFromView","dropAnimatedNode","valueObserver","addListener","startListeningToAnimatedNodeValue","removeListener","stopListeningToAnimatedNodeValue","eventName","eventMapping","addAnimatedEventToView","animatedNodeTag","removeAnimatedEventFromView","push","node","sendEventWithName","event","handleAnimatedEvent"],"mappings":"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","file":"RCTNativeAnimatedModule.js","sourcesContent":["/**\n * @providesModule RCTNativeAnimatedModule\n * @flow\n */\n\nimport type RCTBridge from \"RCTBridge\";\nimport type { RCTEvent } from \"RCTEventDispatcher\";\nimport type RCTValueAnimatedNode from \"RCTValueAnimatedNode\";\n\nimport invariant from \"Invariant\";\nimport RCTNativeAnimatedNodesManager from \"RCTNativeAnimatedNodesManager\";\nimport {\n  RCT_EXPORT_MODULE,\n  RCT_EXPORT_METHOD,\n  RCTFunctionTypeNormal\n} from \"RCTBridge\";\nimport RCTEventEmitter from \"RCTNativeEventEmitter\";\n\nexport type Config = Object;\ntype AnimatedOperation = (nodesManager: RCTNativeAnimatedNodesManager) => void;\n\n@RCT_EXPORT_MODULE(\"RCTNativeAnimatedModule\")\nclass RCTNativeAnimatedModule extends RCTEventEmitter {\n  bridge: RCTBridge;\n\n  nodesManager: RCTNativeAnimatedNodesManager;\n  operations: AnimatedOperation[];\n  preOperations: AnimatedOperation[];\n\n  constructor(bridge: RCTBridge) {\n    super(bridge);\n\n    this.bridge = bridge;\n    this.nodesManager = new RCTNativeAnimatedNodesManager(\n      this.bridge.uiManager\n    );\n\n    this.operations = [];\n    this.preOperations = [];\n\n    this.bridge.eventDispatcher.addDispatchObserver(this);\n    this.bridge.uiManager.observerCoordinator.addObserver(this);\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  createAnimatedNode(tag: number, config: Config) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.createAnimatedNode(tag, config);\n    });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  connectAnimatedNodes(parentTag: number, childTag: number) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.connectAnimatedNodes(parentTag, childTag);\n    });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  disconnectAnimatedNodes(parentTag: number, childTag: number) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.disconnectAnimatedNodes(parentTag, childTag);\n    });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  startAnimatingNode(\n    animationId: number,\n    nodeTag: number,\n    config: Config,\n    endCallbackId: number\n  ) {\n    const endCallback = this.bridge.callbackFromId(endCallbackId);\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.startAnimatingNode(\n        animationId,\n        nodeTag,\n        config,\n        endCallback\n      );\n    });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  stopAnimation(animationId: number) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.stopAnimation(animationId);\n    });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  setAnimatedNodeValue(nodeTag: number, value: number) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.setAnimatedNodeValue(nodeTag, value);\n    });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  setAnimatedNodeOffset(nodeTag: number, offset: number) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.setAnimatedNodeOffset(nodeTag, offset);\n    });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  flattenAnimatedNodeOffset(nodeTag: number) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.flattenAnimatedNodeOffset(nodeTag);\n    });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  extractAnimatedNodeOffset(nodeTag: number) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.extractAnimatedNodeOffset(nodeTag);\n    });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  connectAnimatedNodeToView(nodeTag: number, viewTag: number) {\n    const viewName = this.bridge.uiManager.viewNameForReactTag(viewTag);\n    invariant(viewName, `No such viewName for react tag ${viewTag}`);\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.connectAnimatedNodeToView(nodeTag, viewTag, viewName);\n    });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  disconnectAnimatedNodeFromView(nodeTag: number, viewTag: number) {\n    // Disconnecting a view also restores its default values so we have to make\n    // sure this happens before views get updated with their new props. This is\n    // why we enqueue this on the pre-operations queue.\n    this.addPreOperationBlock((nodesManager) => {\n      nodesManager.disconnectAnimatedNodeFromView(nodeTag, viewTag);\n    });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  dropAnimatedNode(tag: number) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.dropAnimatedNode(tag);\n    });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  startListeningToAnimatedNodeValue(tag: number) {\n    const valueObserver = this;\n    this.addOperationBlock((nodesManager) => {\n      this.addListener(\"onAnimatedValueUpdate\");\n      nodesManager.startListeningToAnimatedNodeValue(tag, valueObserver);\n    });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  stopListeningToAnimatedNodeValue(tag: number) {\n    this.addOperationBlock((nodesManager) => {\n      this.removeListener(\"onAnimatedValueUpdate\");\n      nodesManager.stopListeningToAnimatedNodeValue(tag);\n    });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  addAnimatedEventToView(\n    viewTag: number,\n    eventName: string,\n    eventMapping: Object\n  ) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.addAnimatedEventToView(viewTag, eventName, eventMapping);\n    });\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  removeAnimatedEventFromView(\n    viewTag: number,\n    eventName: string,\n    animatedNodeTag: number\n  ) {\n    this.addOperationBlock((nodesManager) => {\n      nodesManager.removeAnimatedEventFromView(\n        viewTag,\n        eventName,\n        animatedNodeTag\n      );\n    });\n  }\n\n  addOperationBlock(operation: AnimatedOperation) {\n    this.operations.push(operation);\n  }\n\n  addPreOperationBlock(operation: AnimatedOperation) {\n    this.preOperations.push(operation);\n  }\n\n  uiManagerWillFlushBlocks = (uiManager: *) => {\n    if (this.preOperations.length === 0 && this.operations.length === 0) {\n      return;\n    }\n\n    const preOperations = [...this.preOperations];\n    this.preOperations = [];\n    const operations = [...this.operations];\n    this.operations = [];\n\n    uiManager.prependUIBlock(() => {\n      for (let operation of preOperations) {\n        operation(this.nodesManager);\n      }\n    });\n\n    uiManager.addUIBlock(() => {\n      for (let operation of operations) {\n        operation(this.nodesManager);\n      }\n      this.nodesManager.updateAnimations();\n    });\n  };\n\n  supportedEvents() {\n    return [\"onAnimatedValueUpdate\"];\n  }\n\n  animatedNodeDidUpdateValue(node: RCTValueAnimatedNode, value: number) {\n    this.sendEventWithName(\"onAnimatedValueUpdate\", {\n      tag: node.nodeTag,\n      value\n    });\n  }\n\n  eventDispatcherWillDispatchEvent(event: RCTEvent) {\n    this.nodesManager.handleAnimatedEvent(event);\n  }\n}\n\nexport default RCTNativeAnimatedModule;\n"]}