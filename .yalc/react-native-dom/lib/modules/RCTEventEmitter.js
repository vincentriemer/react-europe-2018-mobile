Object.defineProperty(exports,"__esModule",{value:true});var _classCallCheck2=require("babel-runtime/helpers/classCallCheck");var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require("babel-runtime/helpers/createClass");var _createClass3=_interopRequireDefault(_createClass2);var _dec,_dec2,_desc,_value,_class;var _Invariant=require("./../utils/Invariant");var _Invariant2=_interopRequireDefault(_Invariant);var _RCTBridge=require("./../bridge/RCTBridge");var _RCTBridge2=_interopRequireDefault(_RCTBridge);var _NotificationCenter=require("./../base/NotificationCenter");var _NotificationCenter2=_interopRequireDefault(_NotificationCenter);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _applyDecoratedDescriptor(target,property,decorators,descriptor,context){var desc={};Object['ke'+'ys'](descriptor).forEach(function(key){desc[key]=descriptor[key];});desc.enumerable=!!desc.enumerable;desc.configurable=!!desc.configurable;if('value'in desc||desc.initializer){desc.writable=true;}desc=decorators.slice().reverse().reduce(function(desc,decorator){return decorator(target,property,desc)||desc;},desc);if(context&&desc.initializer!==void 0){desc.value=desc.initializer?desc.initializer.call(context):void 0;desc.initializer=undefined;}if(desc.initializer===void 0){Object['define'+'Property'](target,property,desc);desc=null;}return desc;}var RCTEventEmitter=(_dec=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),_dec2=(0,_RCTBridge.RCT_EXPORT_METHOD)(_RCTBridge.RCTFunctionTypeNormal),(_class=function(){function RCTEventEmitter(bridge,supportedMethods){(0,_classCallCheck3.default)(this,RCTEventEmitter);this.listenerCount=0;this.bridge=bridge;this._supportedMethods=supportedMethods;}(0,_createClass3.default)(RCTEventEmitter,[{key:"supportedMethods",value:function supportedMethods(){return this._supportedMethods;}},{key:"sendEventWithName",value:function sendEventWithName(eventName,body){(0,_Invariant2.default)(this.bridge,"bridge is not set. This is probably because you've"+("explicitly synthesized the bridge in "+this.constructor.name+", even though it's inherited ")+"from RCTEventEmitter.");if(this.listenerCount>0){this.bridge.enqueueJSCall("RCTDeviceEventEmitter","emit",body?[eventName,body]:[eventName]);_NotificationCenter2.default.emitEvent(eventName,[body]);}else{console.warn("Sending "+eventName+" with no listeners registered");}}},{key:"startObserving",value:function startObserving(){}},{key:"stopObserving",value:function stopObserving(){}},{key:"addListener",value:function addListener(eventName,callback){if(callback!=null){_NotificationCenter2.default.addListener(eventName,callback);}this.listenerCount++;if(this.listenerCount===1){this.startObserving();}}},{key:"removeListener",value:function removeListener(eventName,callback){if(callback!=null){_NotificationCenter2.default.removeListener(eventName,callback);}this.removeListeners(1);}},{key:"removeListeners",value:function removeListeners(count){this.listenerCount=Math.max(this.listenerCount-count,0);if(this.listenerCount===0){this.stopObserving();}}}]);return RCTEventEmitter;}(),(_applyDecoratedDescriptor(_class.prototype,"addListener",[_dec],Object.getOwnPropertyDescriptor(_class.prototype,"addListener"),_class.prototype),_applyDecoratedDescriptor(_class.prototype,"removeListeners",[_dec2],Object.getOwnPropertyDescriptor(_class.prototype,"removeListeners"),_class.prototype)),_class));exports.default=RCTEventEmitter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL1JlYWN0RG9tL21vZHVsZXMvUkNURXZlbnRFbWl0dGVyLmpzIl0sIm5hbWVzIjpbIlJDVEV2ZW50RW1pdHRlciIsImJyaWRnZSIsInN1cHBvcnRlZE1ldGhvZHMiLCJsaXN0ZW5lckNvdW50IiwiX3N1cHBvcnRlZE1ldGhvZHMiLCJldmVudE5hbWUiLCJib2R5IiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZW5xdWV1ZUpTQ2FsbCIsImVtaXRFdmVudCIsImNvbnNvbGUiLCJ3YXJuIiwiY2FsbGJhY2siLCJhZGRMaXN0ZW5lciIsInN0YXJ0T2JzZXJ2aW5nIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lcnMiLCJjb3VudCIsIk1hdGgiLCJtYXgiLCJzdG9wT2JzZXJ2aW5nIl0sIm1hcHBpbmdzIjoic1ZBS0EsK0MsbURBQ0EsZ0QsbURBQ0EsZ0UsK3lCQUVNQSxnQixPQThDSCxrRSxPQXFCQSxrRSxvQkE5REQseUJBQVlDLE1BQVosQ0FBK0JDLGdCQUEvQixDQUFpRSx5REFIakVDLGFBR2lFLENBSHpDLENBR3lDLENBQy9ELEtBQUtGLE1BQUwsQ0FBY0EsTUFBZCxDQUNBLEtBQUtHLGlCQUFMLENBQXlCRixnQkFBekIsQ0FDRCxDLG9HQUVrQyxDQUNqQyxNQUFPLE1BQUtFLGlCQUFaLENBQ0QsQyw0REFFaUJDLFMsQ0FBbUJDLEksQ0FBVyxDQUM5Qyx3QkFDRSxLQUFLTCxNQURQLENBRUUsOEZBRUksS0FBS00sV0FBTCxDQUFpQkMsSUFGckIsa0NBSUUsdUJBTkosRUFXQSxHQUFJLEtBQUtMLGFBQUwsQ0FBcUIsQ0FBekIsQ0FBNEIsQ0FDMUIsS0FBS0YsTUFBTCxDQUFZUSxhQUFaLENBQ0UsdUJBREYsQ0FFRSxNQUZGLENBR0VILEtBQU8sQ0FBQ0QsU0FBRCxDQUFZQyxJQUFaLENBQVAsQ0FBMkIsQ0FBQ0QsU0FBRCxDQUg3QixFQUtBLDZCQUFtQkssU0FBbkIsQ0FBNkJMLFNBQTdCLENBQXdDLENBQUNDLElBQUQsQ0FBeEMsRUFDRCxDQVBELElBT08sQ0FDTEssUUFBUUMsSUFBUixZQUF3QlAsU0FBeEIsa0NBQ0QsQ0FDRixDLHVEQUVnQixDQUVoQixDLHFEQUVlLENBRWYsQyxnREFHV0EsUyxDQUFtQlEsUSxDQUFnQyxDQUc3RCxHQUFJQSxVQUFZLElBQWhCLENBQXNCLENBQ3BCLDZCQUFtQkMsV0FBbkIsQ0FBK0JULFNBQS9CLENBQTBDUSxRQUExQyxFQUNELENBRUQsS0FBS1YsYUFBTCxHQUNBLEdBQUksS0FBS0EsYUFBTCxHQUF1QixDQUEzQixDQUE4QixDQUM1QixLQUFLWSxjQUFMLEdBQ0QsQ0FDRixDLHNEQUVjVixTLENBQW1CUSxRLENBQXFCLENBQ3JELEdBQUlBLFVBQVksSUFBaEIsQ0FBc0IsQ0FDcEIsNkJBQW1CRyxjQUFuQixDQUFrQ1gsU0FBbEMsQ0FBNkNRLFFBQTdDLEVBQ0QsQ0FDRCxLQUFLSSxlQUFMLENBQXFCLENBQXJCLEVBQ0QsQyx3REFHZUMsSyxDQUFlLENBRzdCLEtBQUtmLGFBQUwsQ0FBcUJnQixLQUFLQyxHQUFMLENBQVMsS0FBS2pCLGFBQUwsQ0FBcUJlLEtBQTlCLENBQXFDLENBQXJDLENBQXJCLENBQ0EsR0FBSSxLQUFLZixhQUFMLEdBQXVCLENBQTNCLENBQThCLENBQzVCLEtBQUtrQixhQUFMLEdBQ0QsQ0FDRixDLHVXQUdZckIsZSIsImZpbGUiOiJSQ1RFdmVudEVtaXR0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcm92aWRlc01vZHVsZSBSQ1ROYXRpdmVFdmVudEVtaXR0ZXJcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiSW52YXJpYW50XCI7XG5pbXBvcnQgUkNUQnJpZGdlLCB7IFJDVF9FWFBPUlRfTUVUSE9ELCBSQ1RGdW5jdGlvblR5cGVOb3JtYWwgfSBmcm9tIFwiUkNUQnJpZGdlXCI7XG5pbXBvcnQgTm90aWZpY2F0aW9uQ2VudGVyIGZyb20gXCJOb3RpZmljYXRpb25DZW50ZXJcIjtcblxuY2xhc3MgUkNURXZlbnRFbWl0dGVyIHtcbiAgYnJpZGdlOiBSQ1RCcmlkZ2U7XG4gIGxpc3RlbmVyQ291bnQ6IG51bWJlciA9IDA7XG4gIF9zdXBwb3J0ZWRNZXRob2RzOiA/QXJyYXk8c3RyaW5nPjtcblxuICBjb25zdHJ1Y3RvcihicmlkZ2U6IFJDVEJyaWRnZSwgc3VwcG9ydGVkTWV0aG9kczogP0FycmF5PHN0cmluZz4pIHtcbiAgICB0aGlzLmJyaWRnZSA9IGJyaWRnZTtcbiAgICB0aGlzLl9zdXBwb3J0ZWRNZXRob2RzID0gc3VwcG9ydGVkTWV0aG9kcztcbiAgfVxuXG4gIHN1cHBvcnRlZE1ldGhvZHMoKTogP0FycmF5PHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLl9zdXBwb3J0ZWRNZXRob2RzO1xuICB9XG5cbiAgc2VuZEV2ZW50V2l0aE5hbWUoZXZlbnROYW1lOiBzdHJpbmcsIGJvZHk6IGFueSkge1xuICAgIGludmFyaWFudChcbiAgICAgIHRoaXMuYnJpZGdlLFxuICAgICAgXCJicmlkZ2UgaXMgbm90IHNldC4gVGhpcyBpcyBwcm9iYWJseSBiZWNhdXNlIHlvdSd2ZVwiICtcbiAgICAgICAgYGV4cGxpY2l0bHkgc3ludGhlc2l6ZWQgdGhlIGJyaWRnZSBpbiAke1xuICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IubmFtZVxuICAgICAgICB9LCBldmVuIHRob3VnaCBpdCdzIGluaGVyaXRlZCBgICtcbiAgICAgICAgXCJmcm9tIFJDVEV2ZW50RW1pdHRlci5cIlxuICAgICk7XG5cbiAgICAvLyBUT0RPOiBBZGQgZGVidWcgY2hlY2sgZm9yIHN1cHBvcnRlZEV2ZW50c1xuXG4gICAgaWYgKHRoaXMubGlzdGVuZXJDb3VudCA+IDApIHtcbiAgICAgIHRoaXMuYnJpZGdlLmVucXVldWVKU0NhbGwoXG4gICAgICAgIFwiUkNURGV2aWNlRXZlbnRFbWl0dGVyXCIsXG4gICAgICAgIFwiZW1pdFwiLFxuICAgICAgICBib2R5ID8gW2V2ZW50TmFtZSwgYm9keV0gOiBbZXZlbnROYW1lXVxuICAgICAgKTtcbiAgICAgIE5vdGlmaWNhdGlvbkNlbnRlci5lbWl0RXZlbnQoZXZlbnROYW1lLCBbYm9keV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oYFNlbmRpbmcgJHtldmVudE5hbWV9IHdpdGggbm8gbGlzdGVuZXJzIHJlZ2lzdGVyZWRgKTtcbiAgICB9XG4gIH1cblxuICBzdGFydE9ic2VydmluZygpIHtcbiAgICAvKiBEb2VzIE5vdGhpbmcgKi9cbiAgfVxuXG4gIHN0b3BPYnNlcnZpbmcoKSB7XG4gICAgLyogRG9lcyBOb3RoaW5nICovXG4gIH1cblxuICBAUkNUX0VYUE9SVF9NRVRIT0QoUkNURnVuY3Rpb25UeXBlTm9ybWFsKVxuICBhZGRMaXN0ZW5lcihldmVudE5hbWU6IHN0cmluZywgY2FsbGJhY2s6ID8oYm9keTogYW55KSA9PiB2b2lkKSB7XG4gICAgLy8gVE9ETzogQWRkIGRlYnVnIGNoZWNrIGZvciBzdXBwb3J0ZWRFdmVudHNcblxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICBOb3RpZmljYXRpb25DZW50ZXIuYWRkTGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgdGhpcy5saXN0ZW5lckNvdW50Kys7XG4gICAgaWYgKHRoaXMubGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgdGhpcy5zdGFydE9ic2VydmluZygpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZUxpc3RlbmVyKGV2ZW50TmFtZTogc3RyaW5nLCBjYWxsYmFjazogP0Z1bmN0aW9uKSB7XG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgIE5vdGlmaWNhdGlvbkNlbnRlci5yZW1vdmVMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoMSk7XG4gIH1cblxuICBAUkNUX0VYUE9SVF9NRVRIT0QoUkNURnVuY3Rpb25UeXBlTm9ybWFsKVxuICByZW1vdmVMaXN0ZW5lcnMoY291bnQ6IG51bWJlcikge1xuICAgIC8vIFRPRE86IEFkZCBkZWJ1ZyBjaGVjayBmb3Igc3VwcG9ydGVkRXZlbnRzXG5cbiAgICB0aGlzLmxpc3RlbmVyQ291bnQgPSBNYXRoLm1heCh0aGlzLmxpc3RlbmVyQ291bnQgLSBjb3VudCwgMCk7XG4gICAgaWYgKHRoaXMubGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgdGhpcy5zdG9wT2JzZXJ2aW5nKCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJDVEV2ZW50RW1pdHRlcjtcbiJdfQ==