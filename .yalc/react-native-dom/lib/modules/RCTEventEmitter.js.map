{"version":3,"sources":["../../ReactDom/modules/RCTEventEmitter.js"],"names":["RCTEventEmitter","bridge","supportedMethods","listenerCount","_supportedMethods","eventName","body","constructor","name","enqueueJSCall","emitEvent","console","warn","callback","addListener","startObserving","removeListener","removeListeners","count","Math","max","stopObserving"],"mappings":"sVAKA,+C,mDACA,gD,mDACA,gE,+yBAEMA,gB,OA8CH,kE,OAqBA,kE,oBA9DD,yBAAYC,MAAZ,CAA+BC,gBAA/B,CAAiE,yDAHjEC,aAGiE,CAHzC,CAGyC,CAC/D,KAAKF,MAAL,CAAcA,MAAd,CACA,KAAKG,iBAAL,CAAyBF,gBAAzB,CACD,C,oGAEkC,CACjC,MAAO,MAAKE,iBAAZ,CACD,C,4DAEiBC,S,CAAmBC,I,CAAW,CAC9C,wBACE,KAAKL,MADP,CAEE,8FAEI,KAAKM,WAAL,CAAiBC,IAFrB,kCAIE,uBANJ,EAWA,GAAI,KAAKL,aAAL,CAAqB,CAAzB,CAA4B,CAC1B,KAAKF,MAAL,CAAYQ,aAAZ,CACE,uBADF,CAEE,MAFF,CAGEH,KAAO,CAACD,SAAD,CAAYC,IAAZ,CAAP,CAA2B,CAACD,SAAD,CAH7B,EAKA,6BAAmBK,SAAnB,CAA6BL,SAA7B,CAAwC,CAACC,IAAD,CAAxC,EACD,CAPD,IAOO,CACLK,QAAQC,IAAR,YAAwBP,SAAxB,kCACD,CACF,C,uDAEgB,CAEhB,C,qDAEe,CAEf,C,gDAGWA,S,CAAmBQ,Q,CAAgC,CAG7D,GAAIA,UAAY,IAAhB,CAAsB,CACpB,6BAAmBC,WAAnB,CAA+BT,SAA/B,CAA0CQ,QAA1C,EACD,CAED,KAAKV,aAAL,GACA,GAAI,KAAKA,aAAL,GAAuB,CAA3B,CAA8B,CAC5B,KAAKY,cAAL,GACD,CACF,C,sDAEcV,S,CAAmBQ,Q,CAAqB,CACrD,GAAIA,UAAY,IAAhB,CAAsB,CACpB,6BAAmBG,cAAnB,CAAkCX,SAAlC,CAA6CQ,QAA7C,EACD,CACD,KAAKI,eAAL,CAAqB,CAArB,EACD,C,wDAGeC,K,CAAe,CAG7B,KAAKf,aAAL,CAAqBgB,KAAKC,GAAL,CAAS,KAAKjB,aAAL,CAAqBe,KAA9B,CAAqC,CAArC,CAArB,CACA,GAAI,KAAKf,aAAL,GAAuB,CAA3B,CAA8B,CAC5B,KAAKkB,aAAL,GACD,CACF,C,uWAGYrB,e","file":"RCTEventEmitter.js","sourcesContent":["/**\n * @providesModule RCTNativeEventEmitter\n * @flow\n */\n\nimport invariant from \"Invariant\";\nimport RCTBridge, { RCT_EXPORT_METHOD, RCTFunctionTypeNormal } from \"RCTBridge\";\nimport NotificationCenter from \"NotificationCenter\";\n\nclass RCTEventEmitter {\n  bridge: RCTBridge;\n  listenerCount: number = 0;\n  _supportedMethods: ?Array<string>;\n\n  constructor(bridge: RCTBridge, supportedMethods: ?Array<string>) {\n    this.bridge = bridge;\n    this._supportedMethods = supportedMethods;\n  }\n\n  supportedMethods(): ?Array<string> {\n    return this._supportedMethods;\n  }\n\n  sendEventWithName(eventName: string, body: any) {\n    invariant(\n      this.bridge,\n      \"bridge is not set. This is probably because you've\" +\n        `explicitly synthesized the bridge in ${\n          this.constructor.name\n        }, even though it's inherited ` +\n        \"from RCTEventEmitter.\"\n    );\n\n    // TODO: Add debug check for supportedEvents\n\n    if (this.listenerCount > 0) {\n      this.bridge.enqueueJSCall(\n        \"RCTDeviceEventEmitter\",\n        \"emit\",\n        body ? [eventName, body] : [eventName]\n      );\n      NotificationCenter.emitEvent(eventName, [body]);\n    } else {\n      console.warn(`Sending ${eventName} with no listeners registered`);\n    }\n  }\n\n  startObserving() {\n    /* Does Nothing */\n  }\n\n  stopObserving() {\n    /* Does Nothing */\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  addListener(eventName: string, callback: ?(body: any) => void) {\n    // TODO: Add debug check for supportedEvents\n\n    if (callback != null) {\n      NotificationCenter.addListener(eventName, callback);\n    }\n\n    this.listenerCount++;\n    if (this.listenerCount === 1) {\n      this.startObserving();\n    }\n  }\n\n  removeListener(eventName: string, callback: ?Function) {\n    if (callback != null) {\n      NotificationCenter.removeListener(eventName, callback);\n    }\n    this.removeListeners(1);\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  removeListeners(count: number) {\n    // TODO: Add debug check for supportedEvents\n\n    this.listenerCount = Math.max(this.listenerCount - count, 0);\n    if (this.listenerCount === 0) {\n      this.stopObserving();\n    }\n  }\n}\n\nexport default RCTEventEmitter;\n"]}