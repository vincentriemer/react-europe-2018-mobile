{"version":3,"sources":["../../../ReactDom/modules/RedBox/RedBoxView.js"],"names":["wire","RedBoxView","onDismiss","dispatchEvent","Event","onReload","onCopy","onStackFrame","frame","CustomEvent","detail","attachShadow","mode","html","state","message","stack","map","entry","text","methodName","file","lineNumber","column","setState","define"],"mappings":"i2MAKA,0C,6HACQA,K,eAAAA,I,IASFC,W,kFAGJ,qBAAc,kLAoBdC,SApBc,CAoBF,UAAM,CAChB,MAAKC,aAAL,CAAmB,GAAIC,MAAJ,CAAU,SAAV,CAAnB,EACD,CAtBa,OAwBdC,QAxBc,CAwBH,UAAM,CACf,MAAKF,aAAL,CAAmB,GAAIC,MAAJ,CAAU,QAAV,CAAnB,EACD,CA1Ba,OA4BdE,MA5Bc,CA4BL,UAAM,CACb,MAAKH,aAAL,CAAmB,GAAIC,MAAJ,CAAU,MAAV,CAAnB,EACD,CA9Ba,OAgCdG,YAhCc,CAgCC,SAACC,KAAD,CAAuB,CACpC,MAAKL,aAAL,CAAmB,GAAIM,YAAJ,CAAgB,YAAhB,CAA8B,CAAEC,OAAQF,KAAV,CAA9B,CAAnB,EACD,CAlCa,CAEZ,MAAKG,YAAL,CAAkB,CAAEC,KAAM,MAAR,CAAlB,EAFY,aAGb,C,2EAiCQ,iBACP,MAAO,MAAKC,IAAZ,iBAsF6B,KAAKC,KAAL,CAAWC,OAtFxC,CAwFU,KAAKD,KAAL,CAAWE,KAAX,CAAiBC,GAAjB,CACA,SAACC,KAAD,QAAWlB,OAAX,kBACoB,iBAAM,QAAKO,YAAL,CAAkBW,KAAlB,CAAN,EADpB,CAEW,CAAEC,KAAMD,MAAME,UAAd,CAFX,CAIQF,MAAMG,IAJd,CAIsBH,MAAMI,UAJ5B,CAI0CJ,MAAMK,MAJhD,GADA,CAxFV,CAqGwB,KAAKrB,SArG7B,CAsGwB,KAAKG,QAtG7B,CAuGwB,KAAKC,MAvG7B,EA2GD,C,wCA3IyB,CACxB,MAAO,CACLS,QAAS,EADJ,CAELC,MAAO,EAFF,CAAP,CAID,C,kCAEWD,O,CAAiB,CAC3B,KAAKS,QAAL,CAAc,CAAET,eAAF,CAAd,EACD,C,gCAESC,K,CAAqB,CAC7B,KAAKQ,QAAL,CAAc,CAAER,WAAF,CAAd,EACD,C,uCAiIHf,WAAWwB,MAAX,CAAkB,YAAlB,E,gBAEexB,U","file":"RedBoxView.js","sourcesContent":["/**\n * @providesModule RedBoxView\n * @flow\n */\n\nimport HyperHTMLElement from \"hyperhtml-element/esm\";\nconst { wire } = HyperHTMLElement;\n\nimport type { StackEntry } from \"RCTExceptionsManager\";\n\ntype State = {\n  message: string,\n  stack: StackEntry[]\n};\n\nclass RedBoxView extends HyperHTMLElement {\n  state: State;\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n  }\n\n  get defaultState(): State {\n    return {\n      message: \"\",\n      stack: []\n    };\n  }\n\n  set message(message: string) {\n    this.setState({ message });\n  }\n\n  set stack(stack: StackEntry[]) {\n    this.setState({ stack });\n  }\n\n  onDismiss = () => {\n    this.dispatchEvent(new Event(\"dismiss\"));\n  };\n\n  onReload = () => {\n    this.dispatchEvent(new Event(\"reload\"));\n  };\n\n  onCopy = () => {\n    this.dispatchEvent(new Event(\"copy\"));\n  };\n\n  onStackFrame = (frame: StackEntry) => {\n    this.dispatchEvent(new CustomEvent(\"stackframe\", { detail: frame }));\n  };\n\n  render() {\n    return this.html`\n      <style>\n        :host {\n          display: contents;\n        }\n        .redbox {\n          box-sizing: border-box;\n          font-family: Arial, sans-serif;\n          position: fixed;\n          top: 0px;\n          left: 0px;\n          right: 0px;\n          bottom: 0px;\n          background: rgb(204, 0, 0);\n          color: white;\n          z-index: 2147483647;\n          text-align: left;\n          font-size: 16px;\n          line-height: 1.2;\n          display: flex;\n          flex-direction: column;\n          align-items: stretch;\n          justify-content: flex-start;\n          overflow: hidden;\n        }\n        .error {\n          padding-top: 20px;\n          padding-left: 20px;\n          padding-right: 20px;\n          padding-bottom: 10px;\n          overflow: auto;\n          flex: 1;\n        }\n        .message {\n          margin-top: 10px;\n          font-size: 1.2em;\n          white-space: pre-wrap;\n        }\n        .stack {\n          flex: 1;\n          margin-top: 2em;\n          display: flex;\n          flex-direction: column;\n        }\n        .frame {\n          cursor: pointer;\n          font-family: monospace;\n          display: block;\n          font-size: 1em;\n          color: white;\n          text-align: left;\n          padding-top: 1em;\n          padding-bottom: 1em;\n          background: none;\n          border: none;\n          transition: opacity 0.2s;\n          flex-shrink: 0;\n        }\n        .frame:active {\n          opacity: 0.4;\n        }\n        .file {\n          font-size: 0.8em;\n          color: rgba(255, 255, 255, 0.7);\n          word-break: break-all;\n        }\n        .buttons {\n          height: 60px;\n          display: flex;\n          flex-direction: row;\n          align-items: stretch;\n        }\n        .button {\n          cursor: pointer;\n          font-size: 1em;\n          background: none;\n          border: none;\n          color: rgba(255, 255, 255, 0.7);\n          flex: 1;\n        }\n        .button:active {\n          color: rgba(255, 255, 255, 1.0);\n        }\n      </style>\n      <div class=\"redbox\">\n        <div class=\"error\">\n          <div class=\"message\">${this.state.message}</div>\n          <div class=\"stack\">\n            ${this.state.stack.map(\n              (entry) => wire()`\n                <button onclick=${() => this.onStackFrame(entry)} class=\"frame\">\n                  <div>${{ text: entry.methodName }}</div>\n                  <div class=\"file\">\n                    ${entry.file}:${entry.lineNumber}:${entry.column}\n                  </div>\n                </button>\n            `\n            )}\n          </div>\n        </div>\n        <div class=\"buttons\">\n          <button onclick=${this.onDismiss} class=\"button\">Dismiss</button>\n          <button onclick=${this.onReload} class=\"button\">Reload JS</button>\n          <button onclick=${this.onCopy} class=\"button\">Copy</button>\n        </div>\n      </div>\n    `;\n  }\n}\n\nRedBoxView.define(\"rct-redbox\");\n\nexport default RedBoxView;\n"]}