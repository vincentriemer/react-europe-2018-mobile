{"version":3,"sources":["../../ReactDom/modules/RCTDeviceInfo.js"],"names":["RCTDeviceInfo","didUpdateDimensions","sendEventWithName","exportedDimensions","window","addEventListener","matchMedia","addListener","removeEventListener","Dimensions","dims","width","Math","ceil","innerWidth","height","innerHeight","scale","getDevicePixelRatio","fontScale","screen","ratio","systemXDPI","undefined","logicalXDPI","devicePixelRatio","min"],"mappings":"6lBAKA,gD,mDACA,mD,sJAGMA,c,OADL,iCAAkB,eAAlB,C,0eA2DCC,mB,CAAsB,UAAM,CAC1B,MAAKC,iBAAL,CAAuB,qBAAvB,CAA8C,MAAKC,kBAAL,EAA9C,EACD,C,2JA3DgB,CACfC,OAAOC,gBAAP,CAAwB,QAAxB,CAAkC,KAAKJ,mBAAvC,CAA4D,KAA5D,EACAG,OACGE,UADH,CACc,oCADd,EAEGC,WAFH,CAEe,KAAKN,mBAFpB,EAGD,C,qDAEe,CACdG,OAAOI,mBAAP,CAA2B,QAA3B,CAAqC,KAAKP,mBAA1C,CAA+D,KAA/D,EACAG,OACGE,UADH,CACc,oCADd,EAEGE,mBAFH,CAEuB,KAAKP,mBAF5B,EAGD,C,6DAEmB,CAClB,MAAO,CACLQ,WAAY,KAAKN,kBAAL,EADP,CAAP,CAGD,C,yDAEiB,CAChB,MAAO,CAAC,qBAAD,CAAP,CACD,C,+DAEoB,CACnB,GAAMO,MAAO,CACXC,MAAOC,KAAKC,IAAL,CAAUT,OAAOU,UAAjB,CADI,CAEXC,OAAQH,KAAKC,IAAL,CAAUT,OAAOY,WAAjB,CAFG,CAGXC,MAAO,KAAKC,mBAAL,EAHI,CAIXC,UAAW,CAJA,CAAb,CAOA,MAAO,CACLf,OAAQM,IADH,CAELU,OAAQV,IAFH,CAAP,CAID,C,iEAE6B,CAC5B,GAAIW,OAAQ,CAAZ,CAEA,GACEjB,OAAOgB,MAAP,CAAcE,UAAd,GAA6BC,SAA7B,EACAnB,OAAOgB,MAAP,CAAcI,WAAd,GAA8BD,SAD9B,EAEAnB,OAAOgB,MAAP,CAAcE,UAAd,CAA2BlB,OAAOgB,MAAP,CAAcI,WAH3C,CAIE,CAEAH,MAAQjB,OAAOgB,MAAP,CAAcE,UAAd,CAA2BlB,OAAOgB,MAAP,CAAcI,WAAjD,CACD,CAPD,IAOO,IAAIpB,OAAOqB,gBAAP,GAA4BF,SAAhC,CAA2C,CAChDF,MAAQjB,OAAOqB,gBAAf,CACD,CAID,MAAOb,MAAKc,GAAL,CAASL,KAAT,CAAgB,CAAhB,CAAP,CACD,C,gFAOYrB,a","file":"RCTDeviceInfo.js","sourcesContent":["/**\n * @providesModule RCTDeviceInfo\n * @flow\n */\n\nimport RCTBridge, { RCT_EXPORT_MODULE, RCT_EXPORT_METHOD } from \"RCTBridge\";\nimport RCTEventEmitter from \"RCTNativeEventEmitter\";\n\n@RCT_EXPORT_MODULE(\"RCTDeviceInfo\")\nclass RCTDeviceInfo extends RCTEventEmitter {\n  startObserving() {\n    window.addEventListener(\"resize\", this.didUpdateDimensions, false);\n    window\n      .matchMedia(\"screen and (min-resolution: 2dppx)\")\n      .addListener(this.didUpdateDimensions);\n  }\n\n  stopObserving() {\n    window.removeEventListener(\"resize\", this.didUpdateDimensions, false);\n    window\n      .matchMedia(\"screen and (min-resolution: 2dppx)\")\n      .removeEventListener(this.didUpdateDimensions);\n  }\n\n  constantsToExport() {\n    return {\n      Dimensions: this.exportedDimensions()\n    };\n  }\n\n  supportedEvents() {\n    return [\"didUpdateDimensions\"];\n  }\n\n  exportedDimensions() {\n    const dims = {\n      width: Math.ceil(window.innerWidth),\n      height: Math.ceil(window.innerHeight),\n      scale: this.getDevicePixelRatio(),\n      fontScale: 1\n    };\n\n    return {\n      window: dims,\n      screen: dims\n    };\n  }\n\n  getDevicePixelRatio(): number {\n    let ratio = 1;\n    // To account for zoom, change to use deviceXDPI instead of systemXDPI\n    if (\n      window.screen.systemXDPI !== undefined &&\n      window.screen.logicalXDPI !== undefined &&\n      window.screen.systemXDPI > window.screen.logicalXDPI\n    ) {\n      // Only allow for values > 1\n      ratio = window.screen.systemXDPI / window.screen.logicalXDPI;\n    } else if (window.devicePixelRatio !== undefined) {\n      ratio = window.devicePixelRatio;\n    }\n\n    // iOS displays with 3x ratio don't properly display hairlines\n    // so set max ratio to 2\n    return Math.min(ratio, 2);\n  }\n\n  didUpdateDimensions = () => {\n    this.sendEventWithName(\"didUpdateDimensions\", this.exportedDimensions());\n  };\n}\n\nexport default RCTDeviceInfo;\n"]}