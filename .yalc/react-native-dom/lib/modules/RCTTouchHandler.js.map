{"version":3,"sources":["../../ReactDom/modules/RCTTouchHandler.js"],"names":["mouseTouchCounter","TOUCH_LISTENER_OPTIONS","passiveEvents","passive","capture","getFirstParentUIView","target","parentElement","RCTTouchHandler","bridge","mouseClickBegan","event","touches","RCTNormalizeInteractionEvent","touchesBegan","view","addEventListener","mouseClickEnded","mouseClickMoved","touchesMoved","touchesEnded","removeEventListener","nativeTouchBegan","window","nativeTouchEnded","nativeTouchMoved","nativeTouchCanceled","removeTouchEvents","touchesCanceled","eventDispatcher","moduleForClass","nativeTouches","nativeTouchesByIdentifier","reactTouches","touchViews","addGestureRecognizer","deviceType","undefined","removeGestureRecognizer","forEach","touch","hasOwnProperty","identifier","targetView","reactTag","touchable","touchID","reactTouch","push","nativeTouch","index","indexOf","splice","touchIndex","newTouch","updatedReactTouch","pageX","pageY","locationX","locationY","timestamp","eventName","changedIndexes","console","log","updateReactTouch","length","map","canBeCoalesced","coalescingKey","sendEvent","recordNewTouches","updateAndDispatchTouches","recordRemovedTouches","rawEvent","MouseEvent","which","button","clientX","clientY","performance","now","changedTouches","rawTouches","resultingTouchList","i","rawTouch","rect","getBoundingClientRect","left","top","error","Error"],"mappings":"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","file":"RCTTouchHandler.js","sourcesContent":["/**\n * @providesModule RCTTouchHandler\n * @flow\n */\n\nimport type RCTBridge from \"RCTBridge\";\n\nimport detectIt from \"detect-it\";\n\nimport invariant from \"Invariant\";\nimport UIView, { UIChildContainerView } from \"UIView\";\nimport RCTEventDispatcher from \"RCTEventDispatcher\";\nimport RCTTouchEvent from \"RCTTouchEvent\";\nimport guid from \"Guid\";\n\ntype UITouch = {\n  view: UIView | UIChildContainerView,\n  identifier: number,\n  pageX: number,\n  pageY: number,\n  locationX: number,\n  locationY: number,\n  timestamp: number\n};\n\ntype ReactTouch = {\n  target: number,\n  identifier: number,\n  pageX?: number,\n  pageY?: number,\n  locationX?: number,\n  locationY?: number,\n  timestamp?: number\n};\n\nlet mouseTouchCounter = 1;\n\nconst TOUCH_LISTENER_OPTIONS = detectIt.passiveEvents\n  ? { passive: true, capture: false }\n  : false;\n\nfunction getFirstParentUIView(target: any) {\n  while (target.parentElement) {\n    if (target instanceof UIView || target instanceof UIChildContainerView) {\n      return target;\n    }\n    target = target.parentElement;\n  }\n  return target;\n}\n\nclass RCTTouchHandler {\n  eventDispatcher: RCTEventDispatcher;\n\n  nativeTouchesByIdentifier: { [number]: UITouch };\n  nativeTouches: Array<UITouch>;\n  reactTouches: Array<ReactTouch>;\n  touchViews: Array<UIView>;\n  coalescingKey: number;\n\n  view: ?UIView;\n\n  constructor(bridge: RCTBridge) {\n    this.eventDispatcher = (bridge.moduleForClass(\n      (RCTEventDispatcher: any)\n    ): any);\n\n    this.nativeTouches = [];\n    this.nativeTouchesByIdentifier = {};\n    this.reactTouches = [];\n    this.touchViews = [];\n  }\n\n  static RCTNormalizeInteractionEvent(\n    rawEvent: TouchEvent | MouseEvent\n  ): ?Array<UITouch> {\n    if (rawEvent instanceof MouseEvent) {\n      const target: UIView = getFirstParentUIView(rawEvent.target);\n\n      if (\"which\" in rawEvent && rawEvent.which === 3) {\n        return null;\n      } else if (\"button\" in rawEvent && rawEvent.button === 2) {\n        return null;\n      }\n\n      return [\n        {\n          view: target,\n          identifier: 0,\n          pageX: rawEvent.pageX,\n          pageY: rawEvent.pageY,\n          locationX: rawEvent.clientX,\n          locationY: rawEvent.clientY,\n          timestamp: performance.now()\n        }\n      ];\n    } else if (rawEvent.changedTouches) {\n      const rawTouches = rawEvent.changedTouches;\n      const resultingTouchList = [];\n\n      for (let i = 0; i < rawTouches.length; i++) {\n        const rawTouch = rawTouches[i];\n        const target: UIView = getFirstParentUIView(rawTouch.target);\n\n        const rect = target.getBoundingClientRect();\n\n        resultingTouchList.push({\n          view: target,\n          identifier: rawTouch.identifier % 20,\n          pageX: rawTouch.clientX,\n          pageY: rawTouch.clientY,\n          locationX: rawTouch.pageX - rect.left,\n          locationY: rawTouch.pageY - rect.top,\n          timestamp: performance.now()\n        });\n      }\n\n      return resultingTouchList;\n    }\n\n    console.error(rawEvent);\n    throw new Error(\"Invalid Event\");\n  }\n\n  attachToView(view: UIView) {\n    this.view = view;\n    view.addGestureRecognizer(\n      this,\n      detectIt.deviceType,\n      TOUCH_LISTENER_OPTIONS\n    );\n  }\n\n  detachFromView(view: UIView) {\n    this.view = undefined;\n    view.removeGestureRecognizer(this);\n  }\n\n  recordNewTouches(touches: Array<UITouch>) {\n    touches.forEach((touch) => {\n      invariant(\n        !this.nativeTouchesByIdentifier.hasOwnProperty(touch.identifier),\n        \"Touch is already recorded. This is a critical bug\"\n      );\n\n      // Find closest React-managed touchable element\n      let targetView = (touch.view: any);\n      while (targetView) {\n        if (targetView === this.view) break;\n        if (targetView.reactTag && targetView.touchable) break;\n        targetView = targetView.parentElement;\n      }\n\n      const reactTag = targetView.reactTag;\n      const touchID = touch.identifier;\n\n      // Create touch\n      const reactTouch = {\n        target: reactTag,\n        identifier: touchID\n      };\n\n      // Add to arrays\n      this.touchViews.push(targetView);\n      this.nativeTouches.push(touch);\n      this.nativeTouchesByIdentifier[touchID] = touch;\n      this.reactTouches.push(reactTouch);\n    });\n  }\n\n  recordRemovedTouches(touches: Array<UITouch>) {\n    for (let touch of touches) {\n      const nativeTouch = this.nativeTouchesByIdentifier[touch.identifier];\n\n      if (!nativeTouch) {\n        continue;\n      }\n\n      const index = this.nativeTouches.indexOf(nativeTouch);\n\n      this.touchViews.splice(index, 1);\n      this.nativeTouches.splice(index, 1);\n      delete this.nativeTouchesByIdentifier[touch.identifier];\n      this.reactTouches.splice(index, 1);\n    }\n  }\n\n  updateReactTouch(touchIndex: number, newTouch: UITouch) {\n    const reactTouch = this.reactTouches[touchIndex];\n\n    const updatedReactTouch = {\n      ...reactTouch,\n      pageX: newTouch.pageX,\n      pageY: newTouch.pageY,\n      locationX: newTouch.locationX,\n      locationY: newTouch.locationY,\n      timestamp: newTouch.timestamp\n    };\n\n    // TODO: force touch\n\n    this.reactTouches[touchIndex] = updatedReactTouch;\n  }\n\n  updateAndDispatchTouches(touches: Array<UITouch>, eventName: string) {\n    const changedIndexes = [];\n    for (let touch of touches) {\n      const nativeTouch = this.nativeTouchesByIdentifier[touch.identifier];\n      if (!nativeTouch) {\n        console.log(\"updateAndDispatch failed\");\n        continue;\n      }\n\n      const index = this.nativeTouches.indexOf(nativeTouch);\n\n      if (index === -1) continue;\n\n      this.updateReactTouch(index, touch);\n      changedIndexes.push(index);\n    }\n\n    if (changedIndexes.length === 0) {\n      console.log(\"no changed Indexes\");\n      return;\n    }\n\n    const reactTouches = this.reactTouches.map((reactTouch) => ({\n      ...reactTouch\n    }));\n\n    const canBeCoalesced = eventName === \"touchMove\";\n\n    if (!canBeCoalesced) {\n      this.coalescingKey++;\n    }\n\n    invariant(this.view, \"attempting to send event to unknown view\");\n\n    const event = new RCTTouchEvent(\n      eventName,\n      this.view.reactTag,\n      reactTouches,\n      changedIndexes,\n      this.coalescingKey\n    );\n\n    if (!canBeCoalesced) {\n      this.coalescingKey++;\n    }\n\n    this.eventDispatcher.sendEvent(event);\n  }\n\n  mouseClickBegan = (event: MouseEvent) => {\n    const touches = RCTTouchHandler.RCTNormalizeInteractionEvent(event);\n    if (!touches) return;\n\n    this.touchesBegan(touches);\n\n    const view = this.view;\n    if (view) {\n      view.addEventListener(\"mouseup\", this.mouseClickEnded);\n      view.addEventListener(\"mousemove\", this.mouseClickMoved);\n    }\n  };\n\n  mouseClickMoved = (event: MouseEvent) => {\n    const touches = RCTTouchHandler.RCTNormalizeInteractionEvent(event);\n    if (!touches) return;\n\n    this.touchesMoved(touches);\n  };\n\n  mouseClickEnded = (event: MouseEvent) => {\n    const touches = RCTTouchHandler.RCTNormalizeInteractionEvent(event);\n    if (!touches) return;\n\n    this.touchesEnded(touches);\n\n    const view = this.view;\n    if (view) {\n      view.removeEventListener(\"mouseup\", this.mouseClickEnded);\n      view.removeEventListener(\"mousemove\", this.mouseClickMoved);\n    }\n  };\n\n  nativeTouchBegan = (event: TouchEvent) => {\n    const touches = RCTTouchHandler.RCTNormalizeInteractionEvent(event);\n    if (!touches) return;\n\n    this.touchesBegan(touches);\n\n    const view = this.view;\n    if (view) {\n      window.addEventListener(\n        \"touchend\",\n        this.nativeTouchEnded,\n        TOUCH_LISTENER_OPTIONS\n      );\n      window.addEventListener(\n        \"touchmove\",\n        this.nativeTouchMoved,\n        TOUCH_LISTENER_OPTIONS\n      );\n      window.addEventListener(\n        \"touchcancel\",\n        this.nativeTouchCanceled,\n        TOUCH_LISTENER_OPTIONS\n      );\n    }\n\n    return true;\n  };\n\n  nativeTouchMoved = (event: TouchEvent) => {\n    const touches = RCTTouchHandler.RCTNormalizeInteractionEvent(event);\n    if (!touches) return;\n\n    this.touchesMoved(touches);\n\n    return true;\n  };\n\n  nativeTouchEnded = (event: TouchEvent) => {\n    const touches = RCTTouchHandler.RCTNormalizeInteractionEvent(event);\n    if (!touches) return;\n\n    this.touchesEnded(touches);\n\n    const view = this.view;\n    if (view) {\n      this.removeTouchEvents(view);\n    }\n\n    return true;\n  };\n\n  removeTouchEvents(view: UIView) {\n    window.removeEventListener(\n      \"touchend\",\n      this.nativeTouchEnded,\n      TOUCH_LISTENER_OPTIONS\n    );\n    window.removeEventListener(\n      \"touchmove\",\n      this.nativeTouchMoved,\n      TOUCH_LISTENER_OPTIONS\n    );\n    window.removeEventListener(\n      \"touchcancel\",\n      this.nativeTouchCanceled,\n      TOUCH_LISTENER_OPTIONS\n    );\n  }\n\n  nativeTouchCanceled = (event: TouchEvent) => {\n    const touches = RCTTouchHandler.RCTNormalizeInteractionEvent(event);\n    if (!touches) return;\n\n    this.touchesCanceled(touches);\n\n    const view = this.view;\n    if (view) {\n      this.removeTouchEvents(view);\n    }\n\n    return true;\n  };\n\n  touchesBegan(touches: Array<UITouch>) {\n    this.recordNewTouches(touches);\n    this.updateAndDispatchTouches(touches, \"touchStart\");\n  }\n\n  touchesMoved(touches: Array<UITouch>) {\n    this.updateAndDispatchTouches(touches, \"touchMove\");\n  }\n\n  touchesEnded(touches: Array<UITouch>) {\n    this.updateAndDispatchTouches(touches, \"touchEnd\");\n    this.recordRemovedTouches(touches);\n  }\n\n  touchesCanceled(touches: Array<UITouch>) {\n    this.updateAndDispatchTouches(touches, \"touchCancel\");\n    this.recordRemovedTouches(touches);\n  }\n}\n\nexport default RCTTouchHandler;\n"]}