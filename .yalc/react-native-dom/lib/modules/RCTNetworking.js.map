{"version":3,"sources":["../../ReactDom/modules/RCTNetworking.js"],"names":["parseHttpHeaders","httpHeaders","split","map","x","filter","reduce","ac","requestIdCounter","RCTNetworking","bridge","requestStore","handleLoadEnd","request","responseURL","headers","getAllResponseHeaders","status","responseJSON","requestId","sendEventWithName","handleLoad","responseType","sendData","completeJSON","handleError","handleAbort","handlers","undefined","requestHandlers","responseHandlers","handler","canHandleNetworkingResponse","responseData","handleNetworkingResponse","response","JSON","stringify","console","warn","conformingHandlers","modulesConformingToProtocol","sort","a","b","handlerPriority","canHandleRequest","query","callbackId","data","method","url","withCredentials","timeout","req","XMLHttpRequest","open","log","addEventListener","Object","entries","forEach","header","value","setRequestHeader","body","canHandleNetworkingRequest","handleNetworkingRequest","tempBody","contentType","string","base64","send","callbackFromId","eventName","callback","count","push","index","indexOf","splice"],"mappings":"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","file":"RCTNetworking.js","sourcesContent":["/**\n * @providesModule RCTNetworkingNative\n * @flow\n */\n\nimport RCTBridge, {\n  RCT_EXPORT_MODULE,\n  RCT_EXPORT_METHOD,\n  RCTFunctionTypeNormal\n} from \"RCTBridge\";\n\nimport RCTURLRequestHandler from \"RCTURLRequestHandler\";\n\nimport RCTEventEmitter from \"RCTNativeEventEmitter\";\n\ntype DataTypeString = { string: string };\ntype DataTypeUri = { uri: string };\ntype DataTypeFormData = { formData: string[] };\ntype DataTypeBlob = { blob: Object };\ntype DataTypeBase64 = { base64: string };\n\ntype DataType =\n  | DataTypeString\n  | DataTypeUri\n  | DataTypeFormData\n  | DataTypeBlob\n  | DataTypeBase64;\n\nexport type RCTRequest = {\n  data: DataType,\n  headers: Object,\n  incrementalUpdates: boolean,\n  method: string,\n  responseType: \"base64\" | \"blob\" | \"text\",\n  timeout: number,\n  url: string,\n  withCredentials: boolean\n};\n\nexport interface RCTNetworkingRequestHandler {\n  canHandleNetworkingRequest(data: Object): boolean;\n  handleNetworkingRequest(data: Object): Object;\n}\n\nexport interface RCTNetworkingResponseHandler {\n  canHandleNetworkingResponse(responseType: string): boolean;\n  handleNetworkingResponse(response: RCTHttpRequest, data: any): Object;\n}\n\nexport type RCTHttpRequest = XMLHttpRequest & { requestId: number };\n\nfunction parseHttpHeaders(httpHeaders: ?string) {\n  if (httpHeaders == null) return {};\n  return httpHeaders\n    .split(\"\\n\")\n    .map((x) => x.split(/: */, 2))\n    .filter((x) => x[0])\n    .reduce((ac, x) => {\n      ac[x[0]] = x[1];\n      return ac;\n    }, {});\n}\n\nlet requestIdCounter = 0;\n\n@RCT_EXPORT_MODULE(\"RCTNetworking\")\nexport default class RCTNetworking extends RCTEventEmitter {\n  requestStore: { [id: number]: RCTHttpRequest } = {};\n  handlers: ?(RCTURLRequestHandler[]);\n\n  requestHandlers: RCTNetworkingRequestHandler[];\n  responseHandlers: RCTNetworkingResponseHandler[];\n\n  constructor(bridge: RCTBridge) {\n    super(bridge, [\n      \"didCompleteNetworkResponse\",\n      \"didReceiveNetworkResponse\",\n      \"didSendNetworkData\",\n      \"didReceiveNetworkIncrementalData\",\n      \"didReceiveNetworkDataProgress\",\n      \"didReceiveNetworkData\"\n    ]);\n    this.handlers = undefined;\n    this.requestHandlers = [];\n    this.responseHandlers = [];\n  }\n\n  sendData(request: RCTHttpRequest, responseType: string) {\n    for (const handler of this.responseHandlers) {\n      if (handler.canHandleNetworkingResponse(responseType)) {\n        const responseData = handler.handleNetworkingResponse(\n          request,\n          request.response\n        );\n        return this.sendEventWithName(\"didReceiveNetworkData\", [\n          request.requestId,\n          responseData\n        ]);\n      }\n    }\n\n    let responseData: any = undefined;\n    if (responseType === \"text\" && typeof request.response === \"string\") {\n      responseData = request.response;\n    } else if (\n      responseType === \"text\" &&\n      typeof request.response === \"object\"\n    ) {\n      responseData = JSON.stringify(request.response);\n    } else {\n      console.warn(`Invalid responseType ${responseType}`);\n      return;\n    }\n\n    this.sendEventWithName(\"didReceiveNetworkData\", [\n      request.requestId,\n      responseData\n    ]);\n  }\n\n  handleLoadEnd = (request: RCTHttpRequest) => () => {\n    const responseURL = request.responseURL;\n    const headers = parseHttpHeaders(request.getAllResponseHeaders());\n    const status = request.status;\n\n    const responseJSON = [request.requestId, status, headers, responseURL];\n    this.sendEventWithName(\"didReceiveNetworkResponse\", responseJSON);\n  };\n\n  handleLoad = (request: RCTHttpRequest, responseType: string) => () => {\n    this.sendData(request, responseType);\n\n    // requestId, errorDescription, timed-out\n    const completeJSON = [request.requestId, null, false];\n    this.sendEventWithName(\"didCompleteNetworkResponse\", completeJSON);\n    delete this.requestStore[request.requestId];\n  };\n\n  handleError = (request: RCTHttpRequest) => () => {};\n\n  handleAbort = (request: RCTHttpRequest) => () => {};\n\n  handlerForRequest(request: RCTRequest): ?RCTURLRequestHandler {\n    let handlers = this.handlers;\n\n    if (handlers == null) {\n      const conformingHandlers = this.bridge.modulesConformingToProtocol(\n        RCTURLRequestHandler\n      );\n      conformingHandlers.sort((a, b) => {\n        if (a.handlerPriority < b.handlerPriority) return -1;\n        if (a.handlerPriority > b.handlerPriority) return 1;\n        return 0;\n      });\n      handlers = conformingHandlers;\n    }\n\n    for (const handler of handlers) {\n      if (handler.canHandleRequest(request)) {\n        return handler;\n      }\n    }\n\n    return null;\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  sendRequest(query: RCTRequest, callbackId: number) {\n    const {\n      data,\n      method,\n      url,\n      withCredentials,\n      timeout,\n      headers,\n      responseType\n    } = query;\n\n    const requestId = requestIdCounter++;\n    const req: RCTHttpRequest = Object.assign((new XMLHttpRequest(): Object), {\n      requestId\n    });\n    this.requestStore[requestId] = req;\n\n    req.open(method, url);\n    console.log(withCredentials);\n    req.withCredentials = withCredentials;\n    req.timeout = timeout;\n    req.responseType = responseType;\n\n    req.addEventListener(\"load\", this.handleLoad(req, responseType));\n    req.addEventListener(\"loadend\", this.handleLoadEnd(req));\n\n    Object.entries(headers).forEach(([header, value]: [string, any]) => {\n      req.setRequestHeader(header, value);\n    });\n\n    let body: ?any;\n    for (const handler of this.requestHandlers) {\n      if (handler.canHandleNetworkingRequest(query)) {\n        const { body: tempBody, contentType } = handler.handleNetworkingRequest(\n          query\n        );\n        if (tempBody) {\n          body = tempBody;\n          req.setRequestHeader(\"Content-Type\", contentType);\n          break;\n        }\n      }\n    }\n\n    if (data.string) {\n      body = data.string;\n    }\n\n    if (data.base64) {\n      body = data.base64;\n    }\n\n    req.send(body);\n\n    this.bridge.callbackFromId(callbackId)(requestId);\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  abortRequest(requestId: number) {\n    console.log(\"abortRequest\", requestId);\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  clearCookies(callbackId: number) {\n    console.log(\"clearCookies\", callbackId);\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  addListener(eventName: string, callback: ?(body: any) => void) {\n    super.addListener(eventName, callback);\n  }\n\n  @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n  removeListeners(count: number) {\n    super.removeListeners(count);\n  }\n\n  addRequestHandler(handler: RCTNetworkingRequestHandler) {\n    this.requestHandlers.push(handler);\n  }\n\n  addResponseHandler(handler: RCTNetworkingResponseHandler) {\n    this.responseHandlers.push(handler);\n  }\n\n  removeRequestHandler(handler: RCTNetworkingRequestHandler) {\n    const index = this.requestHandlers.indexOf(handler);\n    if (index !== -1) {\n      this.requestHandlers.splice(index, 1);\n    }\n  }\n\n  removeResponseHandler(handler: RCTNetworkingResponseHandler) {\n    const index = this.responseHandlers.indexOf(handler);\n    if (index !== -1) {\n      this.responseHandlers.splice(index, 1);\n    }\n  }\n}\n"]}