{"version":3,"sources":["../../ReactDom/modules/RCTUIManager.js"],"names":["rootTagCounter","byPosition","a","b","compareDocumentPosition","sourceIndex","reactViewFromPoint","topView","x","y","element","elements","old_visibility","document","elementFromPoint","documentElement","push","style","visibility","k","length","filter","elem","contains","sort","module","exports","RCTShadowView","RCTRootShadowView","RCTShadowText","RCTUIManager","bridge","pendingUIBlocks","didUpdateDimensions","window","width","height","scale","rootViewTag","rootView","viewRegistry","get","addUIBlock","setAvailableSize","rootViewTags","requestTick","shadowViewRegistry","Map","Set","componentDataByName","moduleClasses","forEach","moduleClass","__isViewManager","componentData","set","name","layoutAnimationManager","observerCoordinator","deviceInfoModule","modulesByName","addListener","reactTag","availableSize","shadowView","viewName","constructor","pixelRatio","deviceInfo","getDevicePixelRatio","updatePointScaleFactor","add","size","rootShadowView","updateAvailableSize","localData","view","tag","console","warn","completion","isPending","delete","purge","reactSuperview","removeReactSubview","queueRemovedNode","uiManager","uiManagerWillPerformLayout","rootTag","isDirty","layoutChanges","recalculateLayout","addLayoutChanges","applyLayoutChanges","uiManagerDidPerformLayout","uiManagerWillFlushBlocks","uiBlocks","block","call","layoutChange","layout","frame","callbackId","Promise","resolve","reject","measurement","measureGlobal","globalX","globalY","previousLayout","left","top","callbackFromId","getBoundingClientRect","jsResponder","error","config","onAnimationDidEnd","matchMedia","matches","configureNext","containerTag","reactTags","RCTSetChildren","props","createShadowView","setPropsForShadowView","backgroundColor","createView","setPropsForView","setBackgroundColor","updatedProps","newReactTag","superShadowView","indexOfView","reactSubviews","indexOf","removeAtIndices","addTags","manageChildren","atPoint","target","measure","moveFrom","moveTo","addChildTags","addAtIndices","removeFrom","viewToManage","shadowViewToManage","numToMove","viewsToAdd","indicesToRemove","tagsToRemove","tagsToDelete","i","moveFromIndex","tagToMove","index","viewTagToAdd","indexToAddAt","indexToRemove","tagToRemove","childIndex","shadowSubView","undefined","textChildren","subView","tagToAdd","indexToAdd","insertReactSubviewAtIndex","makeDirty","purgeView","commandID","commandArgs","managerClass","moduleData","moduleDataForName","methodName","methods","args","manager","moduleForClass","apply","constants","bubblingEvents","directEvents","moduleConstants","bubblingEventTypes","directEventTypes","Manager","viewConfig","NativeProps","propTypes","baseModuleName","eventName","registrationName","substring","bubbleName","phasedRegistrationNames","bubbled","captured","registry","container"],"mappings":"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","file":"RCTUIManager.js","sourcesContent":["/**\n * @providesModule RCTUIManager\n * @flow\n */\n\nimport invariant from \"Invariant\";\nimport RCTBridge, {\n  RCT_EXPORT_MODULE,\n  RCT_EXPORT_METHOD,\n  bridgeModuleNameForClass,\n  RCTFunctionTypeNormal\n} from \"RCTBridge\";\nimport UIView from \"UIView\";\nimport RCTView from \"RCTView\";\nimport RCTRootView from \"RCTRootView\";\nimport RCTDeviceInfo from \"RCTDeviceInfo\";\nimport RCTLayoutAnimationManager from \"RCTLayoutAnimationManager\";\nimport RCTUIManagerObserverCoordinator from \"RCTUIManagerObserverCoordinator\";\nimport RCTComponentData from \"RCTComponentData\";\nimport CanUse from \"CanUse\";\nimport instrument from \"Instrument\";\n\nimport type { RCTComponent } from \"RCTComponent\";\nimport type { LayoutChange } from \"RCTShadowView\";\nimport type { LayoutAnimationConfig } from \"RCTLayoutAnimationManager\";\n\nimport _RCTShadowView from \"RCTShadowView\";\nimport _RCTRootShadowView from \"RCTRootShadowView\";\nimport _RCTShadowText from \"RCTShadowText\";\n\ntype ShadowView = any;\ntype Size = { width: number, height: number };\n\nlet rootTagCounter = 0;\n\nfunction byPosition(a, b) {\n  if (a === b) return 0;\n  if (!a.compareDocumentPosition) {\n    return b.sourceIndex - a.sourceIndex;\n  }\n  if (a.compareDocumentPosition(b) & 2) {\n    return -1;\n  }\n  return 1;\n}\n\n// Doesn't get more hacky than this folks\nfunction reactViewFromPoint(topView: UIView, x: number, y: number) {\n  var element,\n    elements = [];\n  var old_visibility = [];\n  while (true) {\n    element = document.elementFromPoint(x, y);\n    if (!element || element === document.documentElement) {\n      break;\n    }\n    elements.push(element);\n    old_visibility.push(element.style.visibility);\n    element.style.visibility = \"hidden\"; // Temporarily hide the element (without changing the layout)\n  }\n  for (var k = 0; k < elements.length; k++) {\n    elements[k].style.visibility = old_visibility[k];\n  }\n\n  elements = elements.filter(\n    (elem) => topView.contains(elem) && elem instanceof UIView\n  );\n  elements.sort(byPosition);\n\n  return elements[0];\n}\n\nmodule.exports = (async () => {\n  const RCTShadowView = await _RCTShadowView;\n  const RCTRootShadowView = await _RCTRootShadowView;\n  const RCTShadowText = await _RCTShadowText;\n\n  type UIBlock = (RCTUIManager, Map<number, UIView>) => void;\n\n  @RCT_EXPORT_MODULE(\"RCTUIManager\")\n  class RCTUIManager {\n    bridge: RCTBridge;\n    rootViewTags: Set<number>;\n    shadowViewRegistry: Map<number, RCTShadowView>;\n    viewRegistry: Map<number, UIView>;\n    componentDataByName: Map<string, RCTComponentData>;\n    jsResponder: ?UIView;\n    layoutAnimationManager: RCTLayoutAnimationManager;\n    observerCoordinator: RCTUIManagerObserverCoordinator;\n\n    pendingUIBlocks: Array<UIBlock> = [];\n\n    constructor(bridge: RCTBridge) {\n      this.bridge = bridge;\n\n      this.shadowViewRegistry = new Map();\n      this.viewRegistry = new Map();\n\n      // Internal resources\n      this.rootViewTags = new Set();\n\n      // Get view managers from bridge\n      this.componentDataByName = new Map();\n      this.bridge.moduleClasses.forEach((moduleClass: any) => {\n        if (moduleClass.__isViewManager) {\n          const componentData = new RCTComponentData(moduleClass, this.bridge);\n          this.componentDataByName.set(componentData.name, componentData);\n        }\n      });\n\n      this.layoutAnimationManager = new RCTLayoutAnimationManager(this);\n      this.observerCoordinator = new RCTUIManagerObserverCoordinator();\n\n      invariant(this.bridge, \"Bridge must be set\");\n      const deviceInfoModule: RCTDeviceInfo = (this.bridge.modulesByName[\n        \"DeviceInfo\"\n      ]: any);\n      deviceInfoModule.addListener(\n        \"didUpdateDimensions\",\n        this.didUpdateDimensions\n      );\n    }\n\n    didUpdateDimensions = ({ window: { width, height, scale } }: any) => {\n      // this.bridge.GlobalYogaConfig.setPointScaleFactor(scale);\n\n      for (let rootViewTag of this.rootViewTags) {\n        const rootView = this.viewRegistry.get(rootViewTag);\n\n        invariant(rootView, \"Root view must exist\");\n        invariant(\n          rootView instanceof RCTRootView,\n          \"View must be an RCTRootView\"\n        );\n        this.addUIBlock(() => {\n          this.setAvailableSize({ width, height }, scale, rootView);\n        });\n      }\n\n      this.requestTick();\n    };\n\n    get allocateRootTag(): number {\n      const tag = rootTagCounter;\n      rootTagCounter++;\n      return tag * 10 + 1;\n    }\n\n    /**\n     * Register a root view with the RCTUIManager.\n     */\n    registerRootView(rootView: RCTRootView) {\n      const reactTag = rootView.reactTag;\n      const availableSize = rootView.availableSize;\n\n      // register view\n      this.viewRegistry.set(reactTag, rootView);\n\n      // register shadow view\n      const shadowView = new RCTRootShadowView();\n      shadowView.availableSize = availableSize;\n      shadowView.reactTag = reactTag;\n      shadowView.viewName = rootView.constructor.name;\n\n      const pixelRatio = this.bridge.deviceInfo.getDevicePixelRatio();\n      shadowView.updatePointScaleFactor(pixelRatio);\n\n      this.shadowViewRegistry.set(reactTag, shadowView);\n      this.rootViewTags.add(reactTag);\n    }\n\n    /**\n     * Set the available size (`availableSize` property) for a root view.\n     * This might be used in response to changes in external layout constraints.\n     * This value will be directly trasmitted to layout engine and defines how big viewport is;\n     * this value does not affect root node size style properties.\n     * Can be considered as something similar to `setSize:forView:` but applicable only for root view.\n     */\n    setAvailableSize(size: Size, scale: number, rootView: RCTRootView): void {\n      this.pendingUIBlocks.push(() => {\n        const reactTag = rootView.reactTag;\n        const rootShadowView = this.shadowViewRegistry.get(reactTag);\n        if (rootShadowView && rootShadowView instanceof RCTRootShadowView)\n          rootShadowView.updateAvailableSize(size) &&\n            rootShadowView.updatePointScaleFactor(scale);\n      });\n    }\n\n    setLocalDataForView(localData: any, view: UIView) {\n      const tag = view.reactTag;\n      const shadowView = this.shadowViewRegistry.get(tag);\n      if (shadowView == null) {\n        console.warn(\n          `Could not locate shadow view with tag ${tag}, this is probably caused by a temporary inconsistency between native views and shadow views.`\n        );\n        return;\n      }\n      shadowView.localData = localData;\n      this.requestTick();\n    }\n\n    /**\n     * Given a reactTag from a component, find its root view, if possible.\n     * Otherwise, this will give back nil.\n     *\n     * @param reactTag the component tag\n     * @param completion the completion block that will hand over the rootView, if any.\n     *\n     */\n    rootViewForReactTag(reactTag: number, completion: Function) {}\n\n    viewNameForReactTag(reactTag: number): string {\n      const shadowView = this.shadowViewRegistry.get(reactTag);\n      invariant(shadowView, `No such shadowView with id ${reactTag}`);\n      return shadowView.viewName;\n    }\n\n    purgeView(reactTag: number) {\n      const shadowView = this.shadowViewRegistry.get(reactTag);\n      if (shadowView) {\n        !this.layoutAnimationManager.isPending() &&\n          this.shadowViewRegistry.delete(reactTag);\n        shadowView.purge();\n      }\n\n      if (this.layoutAnimationManager.isPending()) {\n        const view = this.viewRegistry.get(reactTag);\n        if (view && view.reactSuperview) {\n          view.reactSuperview.removeReactSubview(view);\n        }\n        this.layoutAnimationManager.queueRemovedNode(reactTag);\n      } else {\n        this.addUIBlock((uiManager, viewRegistry) => {\n          const view = viewRegistry.get(reactTag);\n          viewRegistry.delete(reactTag);\n          if (view) {\n            view.purge();\n          }\n        });\n      }\n    }\n\n    async frame() {\n      this.observerCoordinator.uiManagerWillPerformLayout(this);\n\n      this.rootViewTags.forEach((rootTag) => {\n        const rootShadowView = this.shadowViewRegistry.get(rootTag);\n        if (rootShadowView != null && rootShadowView.isDirty) {\n          invariant(\n            rootShadowView instanceof RCTRootShadowView,\n            \"attempting to recalculate from shadowView that isn't root\"\n          );\n\n          const layoutChanges = instrument(\"⚛️ Layout\", () =>\n            rootShadowView.recalculateLayout()\n          );\n\n          if (this.layoutAnimationManager.isPending()) {\n            this.layoutAnimationManager.addLayoutChanges(layoutChanges);\n          } else {\n            this.applyLayoutChanges(layoutChanges);\n          }\n        }\n      });\n\n      this.observerCoordinator.uiManagerDidPerformLayout(this);\n\n      if (this.layoutAnimationManager.isPending()) {\n        instrument(\"⚛️ LayoutAnimation Construction\", () => {\n          this.layoutAnimationManager.applyLayoutChanges();\n        });\n      }\n\n      this.observerCoordinator.uiManagerWillFlushBlocks(this);\n\n      instrument(\"⚛️ Style\", () => {\n        if (this.pendingUIBlocks.length > 0) {\n          const uiBlocks = [...this.pendingUIBlocks];\n          this.pendingUIBlocks = [];\n\n          uiBlocks.forEach((block) => {\n            block.call(null, this, this.viewRegistry);\n          });\n\n          this.requestTick();\n        }\n      });\n    }\n\n    shouldContinue(): boolean {\n      return this.pendingUIBlocks.length !== 0;\n    }\n\n    requestTick() {\n      this.rootViewTags.forEach((rootViewTag) => {\n        const rootView = this.viewRegistry.get(rootViewTag);\n        invariant(\n          rootView && rootView instanceof RCTRootView,\n          `RootView (with ID ${rootViewTag}) does not exist`\n        );\n        rootView.requestTick();\n      });\n    }\n\n    applyLayoutChanges(layoutChanges: LayoutChange[]) {\n      layoutChanges.forEach((layoutChange) => {\n        const { reactTag, layout } = layoutChange;\n        this.addUIBlock((uiManager, viewRegistry) => {\n          const view = viewRegistry.get(reactTag);\n          invariant(view, `View with reactTag ${reactTag} does not exist`);\n          view.frame = layout;\n        });\n      });\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    measure(reactTag: number, callbackId: ?number) {\n      return new Promise((resolve, reject) => {\n        this.addUIBlock(() => {\n          let shadowView = this.shadowViewRegistry.get(reactTag);\n          let view = this.viewRegistry.get(reactTag);\n\n          if (!shadowView || !shadowView.measurement) {\n            return;\n          }\n\n          const { globalX, globalY } = shadowView.measureGlobal();\n\n          invariant(\n            shadowView.previousLayout,\n            \"Shadow view has no previous layout\"\n          );\n          let { left, top, width, height } = shadowView.previousLayout;\n\n          if (callbackId != null) {\n            this.bridge.callbackFromId(callbackId)(\n              left,\n              top,\n              width,\n              height,\n              globalX,\n              globalY\n            );\n          } else {\n            resolve({\n              left,\n              top,\n              width,\n              height,\n              globalX,\n              globalY\n            });\n          }\n        });\n      });\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    async measureInWindow(reactTag: number, callbackId: number) {\n      // const result = await this.measure(reactTag);\n      // invariant(result, `No measurement available for view ${reactTag}`);\n\n      // TODO: Replace with calculation from shadowView tree\n      const view = this.viewRegistry.get(reactTag);\n      invariant(view, `No such view with tag: ${reactTag}`);\n\n      const { left, top, width, height } = view.getBoundingClientRect();\n\n      // const { globalX, globalY, width, height } = result;\n      this.bridge.callbackFromId(callbackId)(left, top, width, height);\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    setJSResponder(reactTag: number) {\n      this.jsResponder = this.viewRegistry.get(reactTag);\n      if (!this.jsResponder) {\n        console.error(\n          `Invalid view set to be the JS responder - tag ${reactTag}`\n        );\n      }\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    clearJSResponder() {\n      this.jsResponder = null;\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    configureNextLayoutAnimation(\n      config: LayoutAnimationConfig,\n      onAnimationDidEnd: number\n    ) {\n      if (\n        !CanUse.matchMedia ||\n        !window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches\n      ) {\n        this.layoutAnimationManager.configureNext(\n          config,\n          this.bridge.callbackFromId(onAnimationDidEnd)\n        );\n      }\n    }\n\n    addUIBlock(block: ?UIBlock) {\n      if (block == null || this.viewRegistry == null) {\n        return;\n      }\n      // TODO: Determine why defering the UI blocks causes flatlist to crash\n      block.call(null, this, this.viewRegistry);\n      // this.pendingUIBlocks.push(block);\n    }\n\n    prependUIBlock(block: ?UIBlock) {\n      if (!block) {\n        return;\n      }\n      block.call(null, this, this.viewRegistry);\n      // this.pendingUIBlocks.unshift(block);\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    setChildren(containerTag: number, reactTags: Array<number>) {\n      RCTUIManager.RCTSetChildren(\n        containerTag,\n        reactTags,\n        this.shadowViewRegistry\n      );\n\n      this.addUIBlock(\n        (uiManager: RCTUIManager, viewRegistry: Map<number, UIView>) => {\n          RCTUIManager.RCTSetChildren(containerTag, reactTags, viewRegistry);\n        }\n      );\n    }\n\n    static RCTSetChildren(\n      containerTag: number,\n      reactTags: Array<number>,\n      registry: Map<number, $Subtype<RCTComponent>>\n    ) {\n      const container = registry.get(containerTag);\n      let index = 0;\n      reactTags.forEach((reactTag) => {\n        const view = registry.get(reactTag);\n        invariant(\n          container,\n          `No container view found with id: ${containerTag}`\n        );\n        invariant(view, `No view found with id: ${reactTag}`);\n        container.insertReactSubviewAtIndex(view, index++);\n      });\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    createView(\n      reactTag: number,\n      viewName: string,\n      rootTag: number,\n      props: Object\n    ) {\n      const componentData = this.componentDataByName.get(viewName);\n      invariant(\n        componentData,\n        `No component found for view with name ${viewName}`\n      );\n\n      // register shadow view\n      const shadowView = componentData.createShadowView(reactTag);\n      if (shadowView != null) {\n        shadowView.viewName = viewName;\n        componentData.setPropsForShadowView(props, shadowView);\n        this.shadowViewRegistry.set(reactTag, shadowView);\n      }\n\n      // Shadow view is the source of truth for background color this is a little\n      // bit counter-intuitive if people try to set background color when setting up\n      // the view, but it's the only way that makes sense given our threading model\n      const backgroundColor = shadowView.backgroundColor;\n\n      // Dispatch view creation directly to the main thread instead of adding to\n      // UIBlocks array. This way, it doesn't get deferred until after layout.\n      const view = componentData.createView(reactTag);\n      if (view != null) {\n        componentData.setPropsForView(props, view);\n\n        if (typeof view.setBackgroundColor === \"function\") {\n          view.setBackgroundColor(backgroundColor);\n        }\n\n        // TODO: investigate usage of reactBridgeDidFinishTransaction\n\n        this.viewRegistry.set(reactTag, view);\n      }\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    updateView(reactTag: number, viewName: string, updatedProps: Object) {\n      const componentData = this.componentDataByName.get(viewName);\n      invariant(\n        componentData,\n        `No component found for view with name ${viewName}`\n      );\n\n      const shadowView = this.shadowViewRegistry.get(reactTag);\n      if (shadowView) {\n        componentData.setPropsForShadowView(updatedProps, shadowView);\n      }\n\n      const view = this.viewRegistry.get(reactTag);\n      if (view) {\n        componentData.setPropsForView(updatedProps, view);\n      }\n    }\n\n    synchronouslyUpdateView(reactTag: number, viewName: string, props: Object) {\n      const componentData = this.componentDataByName.get(viewName);\n      invariant(\n        componentData,\n        `No component found for view with name ${viewName}`\n      );\n\n      const view = this.viewRegistry.get(reactTag);\n      if (view) {\n        // console.log(\"animating view\", view, props);\n        componentData.setPropsForView(props, view);\n      }\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    replaceExistingNonRootView(reactTag: number, newReactTag: number) {\n      const shadowView = this.shadowViewRegistry.get(reactTag);\n      invariant(shadowView, `shadowView (for ID ${reactTag}) not found`);\n\n      const superShadowView = shadowView.reactSuperview;\n      invariant(\n        superShadowView,\n        `shadowView super (of ID ${reactTag}) not found`\n      );\n\n      const indexOfView = superShadowView.reactSubviews.indexOf(shadowView);\n      invariant(\n        indexOfView !== -1,\n        \"View's superview does't claim it as subview\"\n      );\n\n      const removeAtIndices = [indexOfView];\n      const addTags = [newReactTag];\n\n      this.manageChildren(\n        superShadowView.reactTag,\n        null,\n        null,\n        addTags,\n        removeAtIndices,\n        removeAtIndices\n      );\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    async findSubviewIn(\n      reactTag: number,\n      atPoint: [number, number],\n      callbackId: number\n    ) {\n      const [x, y] = atPoint;\n      const view = this.viewRegistry.get(reactTag);\n\n      invariant(view, `No such view with tag ${reactTag}`);\n\n      const target = reactViewFromPoint(view, x, y);\n\n      if (!target || !(target instanceof UIView)) return;\n\n      const measurement = await this.measure(target.reactTag);\n\n      invariant(\n        measurement,\n        `View with tag ${target.reactTag} has no measurement`\n      );\n      const { globalX, globalY, width, height } = measurement;\n\n      this.bridge.callbackFromId(callbackId)(\n        target.reactTag,\n        globalX,\n        globalY,\n        width,\n        height\n      );\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    manageChildren(\n      tag: number,\n      moveFrom: ?Array<number>,\n      moveTo: ?Array<number>,\n      addChildTags: Array<number>,\n      addAtIndices: Array<number>,\n      removeFrom: Array<number>\n    ) {\n      const viewToManage = this.viewRegistry.get(tag);\n      const shadowViewToManage = this.shadowViewRegistry.get(tag);\n\n      if (!viewToManage || !shadowViewToManage) return;\n\n      // determine counts with checks for null\n      const numToMove = !moveFrom ? 0 : moveFrom.length;\n\n      // We treat moves as an add and a delete\n      const viewsToAdd = [];\n      const indicesToRemove = [];\n      const tagsToRemove = [];\n      const tagsToDelete = [];\n\n      // moves are based on a series of adds after removes\n      if (moveFrom && moveTo) {\n        for (let i = 0; i < moveFrom.length; i++) {\n          const moveFromIndex = moveFrom[i];\n          const tagToMove = viewToManage.reactSubviews[moveFromIndex].reactTag;\n          viewsToAdd[i] = {\n            tag: tagToMove,\n            index: moveTo[i]\n          };\n          indicesToRemove[i] = moveFromIndex;\n          tagsToRemove[i] = tagToMove;\n        }\n      }\n\n      // add the rest of the adds\n      if (addChildTags) {\n        for (let i = 0; i < addChildTags.length; i++) {\n          const viewTagToAdd = addChildTags[i];\n          const indexToAddAt = addAtIndices[i];\n          viewsToAdd[numToMove + i] = {\n            tag: viewTagToAdd,\n            index: indexToAddAt\n          };\n        }\n      }\n\n      // now add the required removes\n      if (removeFrom) {\n        for (let i = 0; i < removeFrom.length; i++) {\n          const indexToRemove = removeFrom[i];\n          if (viewToManage.reactSubviews[indexToRemove]) {\n            const tagToRemove =\n              viewToManage.reactSubviews[indexToRemove].reactTag;\n            indicesToRemove[numToMove + i] = indexToRemove;\n            tagsToRemove[numToMove + i] = tagToRemove;\n            tagsToDelete[i] = tagToRemove;\n          }\n        }\n      }\n\n      // NB: moveFrom and removeFrom are both relative to the starting state of the View's children.\n      // moveTo and addAt are both relative to the final state of the View's children.\n      //\n      // 1) Sort the views to add and indices to remove by index\n      // 2) Iterate the indices being removed from high to low and remove them. Going high to low\n      //    makes sure we remove the correct index when there are multiple to remove.\n      // 3) Iterate the views being added by index low to high and add them. Like the view removal,\n      //    iteration direction is important to preserve the correct index.\n\n      viewsToAdd.sort(function(a, b) {\n        return a.index - b.index;\n      });\n      indicesToRemove.sort(function(a, b) {\n        return a - b;\n      });\n\n      // Apply changes to node hierarchy\n      // removing in the order last index to first index\n      for (let i = indicesToRemove.length - 1; i >= 0; i--) {\n        const childIndex = indicesToRemove[i];\n\n        let shadowSubView = undefined;\n        if (shadowViewToManage instanceof RCTShadowText) {\n          shadowSubView = shadowViewToManage.textChildren[childIndex];\n        } else {\n          shadowSubView = shadowViewToManage.reactSubviews[childIndex];\n        }\n\n        if (shadowSubView) {\n          shadowViewToManage.removeReactSubview(shadowSubView);\n          if (this.layoutAnimationManager.isPending()) {\n            shadowSubView.reactSuperview = shadowViewToManage;\n          }\n        }\n\n        if (!this.layoutAnimationManager.isPending()) {\n          this.addUIBlock((uiManager, viewRegistry) => {\n            const subView = viewToManage.reactSubviews[childIndex];\n            viewToManage.removeReactSubview(subView);\n          });\n        }\n      }\n\n      // add the new children\n      for (let i = 0; i < viewsToAdd.length; i++) {\n        const { tag: tagToAdd, index: indexToAdd } = viewsToAdd[i];\n\n        const shadowSubView = this.shadowViewRegistry.get(tagToAdd);\n        if (shadowSubView) {\n          shadowViewToManage.insertReactSubviewAtIndex(\n            shadowSubView,\n            indexToAdd\n          );\n          shadowSubView.makeDirty();\n        }\n\n        this.addUIBlock((uiManager, viewRegistry) => {\n          const subView = viewRegistry.get(tagToAdd);\n          invariant(\n            subView,\n            `Attempted to insert subview with tag ${tagToAdd} that does not exist`\n          );\n          viewToManage.insertReactSubviewAtIndex(subView, indexToAdd);\n        });\n      }\n\n      for (let i = 0; i < tagsToDelete.length; i++) {\n        this.purgeView(tagsToDelete[i]);\n      }\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    dispatchViewManagerCommand(\n      reactTag: number,\n      commandID: number,\n      commandArgs: any[]\n    ) {\n      const shadowView = this.shadowViewRegistry.get(reactTag);\n      invariant(shadowView, `No such shadow view with tag ${reactTag}`);\n\n      const componentData = this.componentDataByName.get(shadowView.viewName);\n      invariant(\n        componentData,\n        `No such componentData for name ${shadowView.viewName}`\n      );\n\n      const managerClass = componentData.managerClass;\n      const moduleData = this.bridge.moduleDataForName[\n        bridgeModuleNameForClass(managerClass)\n      ];\n\n      const methodName = moduleData.methods[commandID];\n      const args = [reactTag, ...commandArgs];\n\n      const manager = this.bridge.moduleForClass(managerClass);\n      manager[methodName].apply(manager, args);\n    }\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    focus(reactTag: number) {}\n\n    @RCT_EXPORT_METHOD(RCTFunctionTypeNormal)\n    blur(reactTag: number) {}\n\n    constantsToExport() {\n      const constants = {};\n      const bubblingEvents = {};\n      const directEvents = {};\n\n      for (const [name, componentData] of this.componentDataByName) {\n        const moduleConstants = {};\n\n        // Register which event-types this view dispatches.\n        // React needs this for the event plugin.\n        const bubblingEventTypes = {};\n        const directEventTypes = {};\n\n        // Add manager class\n        moduleConstants.Manager = bridgeModuleNameForClass(\n          componentData.managerClass\n        );\n\n        // Add native props\n        const viewConfig = componentData.viewConfig;\n        moduleConstants.NativeProps = viewConfig.propTypes;\n        moduleConstants.baseModuleName = viewConfig.baseModuleName;\n\n        // Add direct events\n        for (let eventName of viewConfig.directEvents) {\n          if (!directEvents[eventName]) {\n            directEvents[eventName] = {\n              registrationName: `on${eventName.substring(3)}`\n            };\n          }\n          directEventTypes[eventName] = directEvents[eventName];\n        }\n        moduleConstants.directEventTypes = directEventTypes;\n\n        // Add bubbling events\n        for (let eventName of viewConfig.bubblingEvents) {\n          if (!bubblingEvents[eventName]) {\n            const bubbleName = `on${eventName.substring(3)}`;\n            bubblingEvents[eventName] = {\n              phasedRegistrationNames: {\n                bubbled: bubbleName,\n                captured: `${bubbleName}Capture`\n              }\n            };\n          }\n          bubblingEventTypes[eventName] = bubblingEvents[eventName];\n        }\n        moduleConstants.bubblingEventTypes = bubblingEventTypes;\n\n        constants[name] = moduleConstants;\n      }\n\n      return constants;\n    }\n  }\n\n  return RCTUIManager;\n})();\n"]}