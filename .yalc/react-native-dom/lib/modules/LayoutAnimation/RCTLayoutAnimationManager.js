Object.defineProperty(exports,"__esModule",{value:true});var _slicedToArray2=require("babel-runtime/helpers/slicedToArray");var _slicedToArray3=_interopRequireDefault(_slicedToArray2);var _defineProperty2=require("babel-runtime/helpers/defineProperty");var _defineProperty3=_interopRequireDefault(_defineProperty2);var _extends4=require("babel-runtime/helpers/extends");var _extends5=_interopRequireDefault(_extends4);var _classCallCheck2=require("babel-runtime/helpers/classCallCheck");var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require("babel-runtime/helpers/createClass");var _createClass3=_interopRequireDefault(_createClass2);var _Invariant=require("./../../utils/Invariant");var _Invariant2=_interopRequireDefault(_Invariant);var _RTCKeyframeGenerator=require("./RTCKeyframeGenerator");var _RTCKeyframeGenerator2=_interopRequireDefault(_RTCKeyframeGenerator);var _MatrixMath=require("./../../utils/MatrixMath.dom");var MatrixMath=_interopRequireWildcard(_MatrixMath);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var PropertiesEnum={opacity:true,scaleXY:true};var TypesEnum={spring:true,linear:true,easeInEaseOut:true,easeIn:true,easeOut:true};var RCTLayoutAnimationManager=function(){function RCTLayoutAnimationManager(manager){(0,_classCallCheck3.default)(this,RCTLayoutAnimationManager);this.manager=manager;this.reset();}(0,_createClass3.default)(RCTLayoutAnimationManager,[{key:"configureNext",value:function configureNext(config,callback){this.pendingConfig=config;this.pendingCallback=callback;}},{key:"reset",value:function reset(){this.removedNodes=[];this.layoutChanges=[];this.pendingConfig=undefined;this.pendingCallback=undefined;}},{key:"isPending",value:function isPending(){return this.pendingConfig!=null;}},{key:"addLayoutChanges",value:function addLayoutChanges(changes){this.layoutChanges=this.layoutChanges.concat(changes);}},{key:"queueRemovedNode",value:function queueRemovedNode(tag){this.removedNodes.push(tag);}},{key:"constructKeyframes",value:function constructKeyframes(config){var create=config.create,update=config.update,del=config.delete,duration=config.duration;var keyframes={create:(0,_RTCKeyframeGenerator2.default)(create,duration),update:(0,_RTCKeyframeGenerator2.default)(update,duration),delete:(0,_RTCKeyframeGenerator2.default)(del,duration)};return keyframes;}},{key:"createOpacityKeyframes",value:function createOpacityKeyframes(from,to,keyframes){return keyframes.map(function(keyframe){return{opacity:""+(to+(from-to)*(1-keyframe))};});}},{key:"createTransformAnimationKeyframes",value:function createTransformAnimationKeyframes(from,to,keyframes,propName,existingKeyframes){return existingKeyframes.map(function(prevKeyframe,index){var newValue=void 0;if(["scaleX","scaleY"].includes(propName)){newValue=from+(to-from)*keyframes[index];if(newValue<=0){newValue=0.0001;}}else{newValue=from+(to-from)*keyframes[index];}return(0,_extends5.default)({},prevKeyframe,(0,_defineProperty3.default)({},propName,newValue));});}},{key:"createInverseTransformAnimationKeyframes",value:function createInverseTransformAnimationKeyframes(propName,existingKeyframes,parentKeyframes){return existingKeyframes.map(function(prevKeyframe,index){var parentKeyframe=parentKeyframes[index];var parentValue=parentKeyframe[propName];var newValue=void 0;if(["scaleX","scaleY"].includes(propName)){newValue=1/parentValue;}else{newValue=-1*parentValue;}return(0,_extends5.default)({},prevKeyframe,(0,_defineProperty3.default)({},propName,newValue));});}},{key:"transformAnimationConfigFactory",value:function transformAnimationConfigFactory(keyLength,duration,layout){return[new Array(keyLength).fill({translateX:layout.left,translateY:layout.top,scaleX:1.0,scaleY:1.0,inverseScaleX:1.0,inverseScaleY:1.0}),{duration:duration,layout:layout,origin:{x:-1*layout.width/2,y:-1*layout.height/2}}];}},{key:"childContainerAnimationConfigFactory",value:function childContainerAnimationConfigFactory(keyLength){return new Array(keyLength).fill({scaleX:1.0,scaleY:1.0});}},{key:"applyInverseTransformOnChildren",value:function applyInverseTransformOnChildren(shadowView,registry,updateKeyConfig,newFrames,propName){var _this=this;var view=this.manager.viewRegistry.get(shadowView.reactTag);if(view&&view.reactSubviews.length!==0){view.reactSubviews.forEach(function(subView,index){var subReactTag=subView.reactTag;var subShadowView=_this.manager.shadowViewRegistry.get(subReactTag);(0,_Invariant2.default)(subShadowView,"Shadow View does not exist");var previousLayout=subShadowView.previousLayout;(0,_Invariant2.default)(previousLayout,"Shadow View has no previous layout");if(!registry.hasOwnProperty(subReactTag)){registry[subReactTag]=_this.transformAnimationConfigFactory(updateKeyConfig.keyframes.length,updateKeyConfig.duration,previousLayout);}registry[subReactTag][0]=_this.createInverseTransformAnimationKeyframes(propName,registry[subReactTag][0],newFrames);});}}},{key:"createTransformAnimations",value:function createTransformAnimations(keyframes,config){var _this2=this;var animations=[];var cleanup=[];var registry={};var createKeyConfig=keyframes.create,updateKeyConfig=keyframes.update,deleteKeyConfig=keyframes.delete;var addedNodes=this.layoutChanges.filter(function(lc){return!lc.previousMeasurement;}).map(function(lc){return lc.reactTag;});this.layoutChanges.forEach(function(layoutChange){var reactTag=layoutChange.reactTag,layout=layoutChange.layout,nextMeasurement=layoutChange.nextMeasurement,previousMeasurement=layoutChange.previousMeasurement;var view=_this2.manager.viewRegistry.get(reactTag);(0,_Invariant2.default)(view,"view does not exist");if(!previousMeasurement){if(createKeyConfig==null){view.frame=layout;view.opacity=1;return;}if(view.reactSuperview&&addedNodes.includes(view.reactSuperview.reactTag)){view.frame=layout;view.opacity=1;return;}var _keyframes=_this2.createOpacityKeyframes(0,1,createKeyConfig.keyframes);var _config={duration:createKeyConfig.duration,delay:createKeyConfig.delay,fill:"none"};view.style.willChange="opacity";view.frame=layout;animations.push(new KeyframeEffect(view,_keyframes,_config));cleanup.push(function(){view.style.willChange="";});}else{if(updateKeyConfig==null){view.frame=layout;return;}var shadowView=_this2.manager.shadowViewRegistry.get(reactTag);(0,_Invariant2.default)(shadowView,"shadowView does not exist");if(!registry.hasOwnProperty(reactTag)){registry[reactTag]=_this2.transformAnimationConfigFactory(updateKeyConfig.keyframes.length,updateKeyConfig.duration,layout);}var _view$frame=view.frame,prevTop=_view$frame.top,prevLeft=_view$frame.left,prevWidth=_view$frame.width,prevHeight=_view$frame.height;var nextTop=layout.top,nextLeft=layout.left,nextWidth=layout.width,nextHeight=layout.height;if(prevTop!==nextTop){var prevTranslateY=prevTop;var nextTranslateY=nextTop;var newFrames=_this2.createTransformAnimationKeyframes(prevTranslateY,nextTranslateY,updateKeyConfig.keyframes,"translateY",registry[reactTag][0]);registry[reactTag][0]=newFrames;}if(prevLeft!==nextLeft){var prevTranslateX=prevLeft;var nextTranslateX=nextLeft;var _newFrames=_this2.createTransformAnimationKeyframes(prevTranslateX,nextTranslateX,updateKeyConfig.keyframes,"translateX",registry[reactTag][0]);registry[reactTag][0]=_newFrames;}var childContainerTransform=_this2.childContainerAnimationConfigFactory(updateKeyConfig.keyframes.length);var shouldTransformChildren=false;if(prevWidth!==nextWidth&&nextWidth!==0){var prevScaleX=prevWidth/nextWidth;var nextScaleX=1.0;var _newFrames2=_this2.createTransformAnimationKeyframes(prevScaleX,nextScaleX,updateKeyConfig.keyframes,"scaleX",registry[reactTag][0]);registry[reactTag][0]=_newFrames2;if(view.childContainer){shouldTransformChildren=true;childContainerTransform=_this2.createInverseTransformAnimationKeyframes("scaleX",childContainerTransform,_newFrames2);}}if(prevHeight!==nextHeight&&nextHeight!==0){var nextScaleY=1.0;var prevScaleY=prevHeight/nextHeight;var _newFrames3=_this2.createTransformAnimationKeyframes(prevScaleY,nextScaleY,updateKeyConfig.keyframes,"scaleY",registry[reactTag][0]);registry[reactTag][0]=_newFrames3;if(view.childContainer){shouldTransformChildren=true;childContainerTransform=_this2.createInverseTransformAnimationKeyframes("scaleY",childContainerTransform,_newFrames3);}}if(shouldTransformChildren){var childContainer=view.childContainer;if(childContainer){var _keyframes2=childContainerTransform.map(function(_ref){var scaleX=_ref.scaleX,scaleY=_ref.scaleY;return{transform:"scale("+scaleX+","+scaleY+")"};});var _config2={duration:updateKeyConfig.duration,fill:"none"};childContainer.style.willChange="transform";animations.push(new KeyframeEffect(childContainer,_keyframes2,_config2));cleanup.push(function(){childContainer.style.willChange="";});}}}});Object.keys(registry).forEach(function(tag){var reactTag=parseInt(tag,10);var _registry$reactTag=(0,_slicedToArray3.default)(registry[reactTag],2),keyframeConfigs=_registry$reactTag[0],_registry$reactTag$=_registry$reactTag[1],duration=_registry$reactTag$.duration,layout=_registry$reactTag$.layout,origin=_registry$reactTag$.origin;var view=_this2.manager.viewRegistry.get(reactTag);(0,_Invariant2.default)(view,"view does not exist");var keyframes=_this2.constructTransformKeyframes(keyframeConfigs,origin);var layoutStyle={width:layout.width+"px",height:layout.height+"px"};var config={duration:duration,fill:"none"};var prevWillChange=view.style.willChange;view.style.willChange="transform";view.frame=layout;animations.push(new KeyframeEffect(view,keyframes,config));cleanup.push(function(){view.style.willChange=prevWillChange;});});this.removedNodes.forEach(function(reactTag){var view=_this2.manager.viewRegistry.get(reactTag);(0,_Invariant2.default)(view,"view does not exist");var cleanUpRemovedNode=function cleanUpRemovedNode(){};if(deleteKeyConfig==null){if(view.reactSuperview){view.reactSuperview.removeReactSubview(view);}_this2.manager.viewRegistry.delete(reactTag);view.purge();return;}if(view.reactSuperview&&_this2.removedNodes.includes(view.reactSuperview.reactTag)){if(view.reactSuperview){view.reactSuperview.removeReactSubview(view);}_this2.manager.viewRegistry.delete(reactTag);return;}var keyframes=_this2.createOpacityKeyframes(1,0,deleteKeyConfig.keyframes);var config={duration:deleteKeyConfig.duration,delay:deleteKeyConfig.delay,fill:"forwards"};view.style.willChange="opacity";animations.push(new KeyframeEffect(view,keyframes,config));cleanup.push(function(){if(view.reactSuperview){view.reactSuperview.removeReactSubview(view);}_this2.manager.viewRegistry.delete(reactTag);view.purge();});});return[animations,cleanup];}},{key:"constructTransformKeyframes",value:function constructTransformKeyframes(keyframeConfigs,origin){return keyframeConfigs.map(function(config){var translateX=config.translateX,translateY=config.translateY,scaleX=config.scaleX,scaleY=config.scaleY;var transformMatrix=MatrixMath.createTranslate2d(origin.x,origin.y);MatrixMath.multiplyInto(transformMatrix,transformMatrix,MatrixMath.createTranslate2d(translateX,translateY));var scaleMatrix=MatrixMath.createIdentityMatrix();MatrixMath.reuseScale3dCommand(scaleMatrix,scaleX,scaleY,1.0);MatrixMath.multiplyInto(transformMatrix,transformMatrix,scaleMatrix);MatrixMath.multiplyInto(transformMatrix,transformMatrix,MatrixMath.createTranslate2d(-origin.x,-origin.y));return{transform:"matrix3d("+transformMatrix.join(", ")+")"};});}},{key:"applyLayoutChanges",value:function applyLayoutChanges(){var pendingConfig=this.pendingConfig;var layoutChanges=this.layoutChanges;var callback=this.pendingCallback;(0,_Invariant2.default)(pendingConfig&&layoutChanges&&callback,"Attempting to apply a layoutanimation without a pending config.");var keyframes=this.constructKeyframes(pendingConfig);var _createTransformAnima=this.createTransformAnimations(keyframes,pendingConfig),_createTransformAnima2=(0,_slicedToArray3.default)(_createTransformAnima,2),animations=_createTransformAnima2[0],cleanup=_createTransformAnima2[1];var groupEffect=new GroupEffect(animations);var animation=document.timeline.play(groupEffect);animation.finished.then(function(){cleanup.forEach(function(c){return c();});callback();});this.reset();}}]);return RCTLayoutAnimationManager;}();exports.default=RCTLayoutAnimationManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,