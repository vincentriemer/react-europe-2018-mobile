Object.defineProperty(exports,"__esModule",{value:true});var _bezierEasing=require("bezier-easing");var _bezierEasing2=_interopRequireDefault(_bezierEasing);var _rebound=require("rebound");var _rebound2=_interopRequireDefault(_rebound);var _fastMemoize=require("fast-memoize");var _fastMemoize2=_interopRequireDefault(_fastMemoize);var _Invariant=require("./../../utils/Invariant");var _Invariant2=_interopRequireDefault(_Invariant);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var timestepCoefficient=1;var staticEasingFunctions={linear:function linear(x){return x;},easeIn:(0,_bezierEasing2.default)(0.42,0,1,1),easeOut:(0,_bezierEasing2.default)(0,0,0.58,1),easeInEaseOut:(0,_bezierEasing2.default)(0.42,0,0.58,1)};var springTimestep=16.667*timestepCoefficient;function generateStaticKeyframes(ease,duration,delay){var numSteps=duration/springTimestep;var timestep=1.0/numSteps;var keyframes=[];var currentX=0;for(var i=0;i<numSteps;i++){keyframes.push(ease(currentX));currentX+=timestep;}keyframes.push(1);return{keyframes:keyframes,duration:duration,delay:delay};}var looper=new _rebound2.default.SimulationLooper(springTimestep);var springSystem=new _rebound2.default.SpringSystem(looper);function generateSpringKeyframes(springDamping){var initialVelocity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var delay=arguments[2];var mass=1;var tension=40;var friction=springDamping*(2*Math.sqrt(mass*tension));var springConfig=_rebound2.default.SpringConfig.fromOrigamiTensionAndFriction(tension,friction);var spring=springSystem.createSpringWithConfig(springConfig);var result=[];function readStep(spring){result.push(spring.getCurrentValue());}spring.addListener({onSpringUpdate:readStep});spring._endValue=1.0;spring._currentState.velocity=initialVelocity;springSystem.activateSpring(spring.getId());spring.removeAllListeners();var springDuration=result.length*springTimestep;return{keyframes:result,duration:springDuration,delay:delay};}var generateKeyframes=(0,_fastMemoize2.default)(function(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var duration=arguments[1];var _config$type=config.type,type=_config$type===undefined?"easeInEaseOut":_config$type,springDamping=config.springDamping,initialVelocity=config.initialVelocity,delay=config.delay;var resolvedDelay=delay!=null?delay:0;if(type&&type!=="spring"){var easingFunction=staticEasingFunctions[type];var resolvedDuration=config.duration!=null?config.duration:duration;if(resolvedDuration===0){return null;}return generateStaticKeyframes(easingFunction,resolvedDuration,resolvedDelay);}if(type&&type==="spring"&&springDamping){return generateSpringKeyframes(springDamping,initialVelocity,resolvedDelay);}(0,_Invariant2.default)(false,"Invalid layoutAnimation configuration provided");});exports.default=generateKeyframes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL1JlYWN0RG9tL21vZHVsZXMvTGF5b3V0QW5pbWF0aW9uL1JUQ0tleWZyYW1lR2VuZXJhdG9yLmpzIl0sIm5hbWVzIjpbInRpbWVzdGVwQ29lZmZpY2llbnQiLCJzdGF0aWNFYXNpbmdGdW5jdGlvbnMiLCJsaW5lYXIiLCJ4IiwiZWFzZUluIiwiZWFzZU91dCIsImVhc2VJbkVhc2VPdXQiLCJzcHJpbmdUaW1lc3RlcCIsImdlbmVyYXRlU3RhdGljS2V5ZnJhbWVzIiwiZWFzZSIsImR1cmF0aW9uIiwiZGVsYXkiLCJudW1TdGVwcyIsInRpbWVzdGVwIiwia2V5ZnJhbWVzIiwiY3VycmVudFgiLCJpIiwicHVzaCIsImxvb3BlciIsIlNpbXVsYXRpb25Mb29wZXIiLCJzcHJpbmdTeXN0ZW0iLCJTcHJpbmdTeXN0ZW0iLCJnZW5lcmF0ZVNwcmluZ0tleWZyYW1lcyIsInNwcmluZ0RhbXBpbmciLCJpbml0aWFsVmVsb2NpdHkiLCJtYXNzIiwidGVuc2lvbiIsImZyaWN0aW9uIiwiTWF0aCIsInNxcnQiLCJzcHJpbmdDb25maWciLCJTcHJpbmdDb25maWciLCJmcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbiIsInNwcmluZyIsImNyZWF0ZVNwcmluZ1dpdGhDb25maWciLCJyZXN1bHQiLCJyZWFkU3RlcCIsImdldEN1cnJlbnRWYWx1ZSIsImFkZExpc3RlbmVyIiwib25TcHJpbmdVcGRhdGUiLCJfZW5kVmFsdWUiLCJfY3VycmVudFN0YXRlIiwidmVsb2NpdHkiLCJhY3RpdmF0ZVNwcmluZyIsImdldElkIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwic3ByaW5nRHVyYXRpb24iLCJsZW5ndGgiLCJnZW5lcmF0ZUtleWZyYW1lcyIsImNvbmZpZyIsInR5cGUiLCJyZXNvbHZlZERlbGF5IiwiZWFzaW5nRnVuY3Rpb24iLCJyZXNvbHZlZER1cmF0aW9uIl0sIm1hcHBpbmdzIjoieURBS0EsMkMseURBQ0EsZ0MsK0NBQ0EseUMsdURBRUEsa0Qsc0lBSUEs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QUl1QyxNQUFRQSxPQUFTLFFBQXJCLENBQStCLENBQzdCLEdBQU1FLGdCQUFpQm5ELHNCQUFzQmlELElBQXRCLENBQXZCLENBQ0EsR0FBTUcsa0JBQ0pKLE9BQU92QyxRQUFQLEVBQW1CLElBQW5CLENBQTBCdUMsT0FBT3ZDLFFBQWpDLENBQTRDQSxRQUQ5QyxDQUdBLEdBQUkyQyxtQkFBcUIsQ0FBekIsQ0FBNEIsQ0FDMUIsTUFBTyxLQUFQLENBQ0QsQ0FFRCxNQUFPN0MseUJBQ0w0QyxjQURLLENBRUxDLGdCQUZLLENBR0xGLGFBSEssQ0FBUCxDQUtELENBRUQsR0FBSUQsTUFBUUEsT0FBUyxRQUFqQixFQUE2QjNCLGFBQWpDLENBQWdELENBQzlDLE1BQU9ELHlCQUNMQyxhQURLLENBRUxDLGVBRkssQ0FHTDJCLGFBSEssQ0FBUCxDQUtELENBRUQsd0JBQVUsS0FBVixDQUFpQixnREFBakIsRUFDRCxDQW5Dc0IsQ0FIdkIsQyxnQkF3Q2VILGlCIiwiZmlsZSI6IlJUQ0tleWZyYW1lR2VuZXJhdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUkNUS2V5ZnJhbWVHZW5lcmF0b3JcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IEJlemllckVhc2luZyBmcm9tIFwiYmV6aWVyLWVhc2luZ1wiO1xuaW1wb3J0IFJlYm91bmQgZnJvbSBcInJlYm91bmRcIjtcbmltcG9ydCBtZW1vaXplIGZyb20gXCJmYXN0LW1lbW9pemVcIjtcblxuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiSW52YXJpYW50XCI7XG5cbmltcG9ydCB0eXBlIHsgTGF5b3V0QW5pbSB9IGZyb20gXCJSQ1RMYXlvdXRBbmltYXRpb25NYW5hZ2VyXCI7XG5cbmNvbnN0IHRpbWVzdGVwQ29lZmZpY2llbnQgPSAxO1xuXG5jb25zdCBzdGF0aWNFYXNpbmdGdW5jdGlvbnMgPSB7XG4gIGxpbmVhcjogKHgpID0+IHgsXG4gIGVhc2VJbjogQmV6aWVyRWFzaW5nKDAuNDIsIDAsIDEsIDEpLFxuICBlYXNlT3V0OiBCZXppZXJFYXNpbmcoMCwgMCwgMC41OCwgMSksXG4gIGVhc2VJbkVhc2VPdXQ6IEJlemllckVhc2luZygwLjQyLCAwLCAwLjU4LCAxKVxufTtcblxuZXhwb3J0IHR5cGUgS2V5ZnJhbWVSZXN1bHQgPSB7XG4gIGtleWZyYW1lczogbnVtYmVyW10sXG4gIGR1cmF0aW9uOiBudW1iZXIsXG4gIGRlbGF5OiBudW1iZXJcbn07XG5cbmNvbnN0IHNwcmluZ1RpbWVzdGVwID0gMTYuNjY3ICogdGltZXN0ZXBDb2VmZmljaWVudDtcblxuZnVuY3Rpb24gZ2VuZXJhdGVTdGF0aWNLZXlmcmFtZXMoXG4gIGVhc2U6ICh4OiBudW1iZXIpID0+IG51bWJlcixcbiAgZHVyYXRpb246IG51bWJlcixcbiAgZGVsYXk6IG51bWJlclxuKTogS2V5ZnJhbWVSZXN1bHQge1xuICBjb25zdCBudW1TdGVwcyA9IGR1cmF0aW9uIC8gc3ByaW5nVGltZXN0ZXA7XG4gIGNvbnN0IHRpbWVzdGVwID0gMS4wIC8gbnVtU3RlcHM7XG5cbiAgY29uc3Qga2V5ZnJhbWVzID0gW107XG5cbiAgbGV0IGN1cnJlbnRYID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1TdGVwczsgaSsrKSB7XG4gICAga2V5ZnJhbWVzLnB1c2goZWFzZShjdXJyZW50WCkpO1xuICAgIGN1cnJlbnRYICs9IHRpbWVzdGVwO1xuICB9XG5cbiAga2V5ZnJhbWVzLnB1c2goMSk7XG5cbiAgcmV0dXJuIHsga2V5ZnJhbWVzLCBkdXJhdGlvbiwgZGVsYXkgfTtcbn1cblxuY29uc3QgbG9vcGVyID0gbmV3IFJlYm91bmQuU2ltdWxhdGlvbkxvb3BlcihzcHJpbmdUaW1lc3RlcCk7XG5jb25zdCBzcHJpbmdTeXN0ZW0gPSBuZXcgUmVib3VuZC5TcHJpbmdTeXN0ZW0obG9vcGVyKTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVTcHJpbmdLZXlmcmFtZXMoXG4gIHNwcmluZ0RhbXBpbmc6IG51bWJlcixcbiAgaW5pdGlhbFZlbG9jaXR5OiBudW1iZXIgPSAwLFxuICBkZWxheTogbnVtYmVyXG4pOiBLZXlmcmFtZVJlc3VsdCB7XG4gIGNvbnN0IG1hc3MgPSAxOyAvKiBPcmFnYW1pIERlZmF1bHQgKi9cbiAgY29uc3QgdGVuc2lvbiA9IDQwOyAvKiBPcmFnYW1pIERlZmF1bHQgKi9cbiAgY29uc3QgZnJpY3Rpb24gPSBzcHJpbmdEYW1waW5nICogKDIgKiBNYXRoLnNxcnQobWFzcyAqIHRlbnNpb24pKTtcblxuICBjb25zdCBzcHJpbmdDb25maWcgPSBSZWJvdW5kLlNwcmluZ0NvbmZpZy5mcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbihcbiAgICB0ZW5zaW9uLFxuICAgIGZyaWN0aW9uXG4gICk7XG4gIGNvbnN0IHNwcmluZyA9IHNwcmluZ1N5c3RlbS5jcmVhdGVTcHJpbmdXaXRoQ29uZmlnKHNwcmluZ0NvbmZpZyk7XG5cbiAgbGV0IHJlc3VsdCA9IFtdO1xuICBmdW5jdGlvbiByZWFkU3RlcChzcHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChzcHJpbmcuZ2V0Q3VycmVudFZhbHVlKCkpO1xuICB9XG5cbiAgc3ByaW5nLmFkZExpc3RlbmVyKHsgb25TcHJpbmdVcGRhdGU6IHJlYWRTdGVwIH0pO1xuICBzcHJpbmcuX2VuZFZhbHVlID0gMS4wO1xuICBzcHJpbmcuX2N1cnJlbnRTdGF0ZS52ZWxvY2l0eSA9IGluaXRpYWxWZWxvY2l0eTtcbiAgc3ByaW5nU3lzdGVtLmFjdGl2YXRlU3ByaW5nKHNwcmluZy5nZXRJZCgpKTtcbiAgc3ByaW5nLnJlbW92ZUFsbExpc3RlbmVycygpO1xuXG4gIGNvbnN0IHNwcmluZ0R1cmF0aW9uID0gcmVzdWx0Lmxlbmd0aCAqIHNwcmluZ1RpbWVzdGVwO1xuXG4gIHJldHVybiB7IGtleWZyYW1lczogcmVzdWx0LCBkdXJhdGlvbjogc3ByaW5nRHVyYXRpb24sIGRlbGF5IH07XG59XG5cbmNvbnN0IGdlbmVyYXRlS2V5ZnJhbWVzOiAoXG4gIGNvbmZpZzogTGF5b3V0QW5pbSxcbiAgZHVyYXRpb246IG51bWJlclxuKSA9PiA/S2V5ZnJhbWVSZXN1bHQgPSBtZW1vaXplKChjb25maWc6IExheW91dEFuaW0gPSB7fSwgZHVyYXRpb246IG51bWJlcikgPT4ge1xuICBjb25zdCB7XG4gICAgdHlwZSA9IFwiZWFzZUluRWFzZU91dFwiLFxuICAgIHNwcmluZ0RhbXBpbmcsXG4gICAgaW5pdGlhbFZlbG9jaXR5LFxuICAgIGRlbGF5XG4gIH0gPSBjb25maWc7XG5cbiAgY29uc3QgcmVzb2x2ZWREZWxheSA9IGRlbGF5ICE9IG51bGwgPyBkZWxheSA6IDA7XG5cbiAgaWYgKHR5cGUgJiYgdHlwZSAhPT0gXCJzcHJpbmdcIikge1xuICAgIGNvbnN0IGVhc2luZ0Z1bmN0aW9uID0gc3RhdGljRWFzaW5nRnVuY3Rpb25zW3R5cGVdO1xuICAgIGNvbnN0IHJlc29sdmVkRHVyYXRpb24gPVxuICAgICAgY29uZmlnLmR1cmF0aW9uICE9IG51bGwgPyBjb25maWcuZHVyYXRpb24gOiBkdXJhdGlvbjtcblxuICAgIGlmIChyZXNvbHZlZER1cmF0aW9uID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2VuZXJhdGVTdGF0aWNLZXlmcmFtZXMoXG4gICAgICBlYXNpbmdGdW5jdGlvbixcbiAgICAgIHJlc29sdmVkRHVyYXRpb24sXG4gICAgICByZXNvbHZlZERlbGF5XG4gICAgKTtcbiAgfVxuXG4gIGlmICh0eXBlICYmIHR5cGUgPT09IFwic3ByaW5nXCIgJiYgc3ByaW5nRGFtcGluZykge1xuICAgIHJldHVybiBnZW5lcmF0ZVNwcmluZ0tleWZyYW1lcyhcbiAgICAgIHNwcmluZ0RhbXBpbmcsXG4gICAgICBpbml0aWFsVmVsb2NpdHksXG4gICAgICByZXNvbHZlZERlbGF5XG4gICAgKTtcbiAgfVxuXG4gIGludmFyaWFudChmYWxzZSwgXCJJbnZhbGlkIGxheW91dEFuaW1hdGlvbiBjb25maWd1cmF0aW9uIHByb3ZpZGVkXCIpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGdlbmVyYXRlS2V5ZnJhbWVzO1xuIl19