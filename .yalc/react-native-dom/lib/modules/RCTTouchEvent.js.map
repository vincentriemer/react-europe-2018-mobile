{"version":3,"sources":["../../ReactDom/modules/RCTTouchEvent.js"],"names":["RCTTouchEvent","eventName","reactTag","reactTouches","changedIndexes","coalescingKey","viewTag","event","length","newEventIsMoreRecent","oldEventIsMoreRecent","count","i","touch","newTouch","identifier","timestamp","filter","e"],"mappings":"mTAOA,+C,mDACA,kE,2JAIMA,c,YAUJ,uBACEC,SADF,CAEEC,QAFF,CAGEC,YAHF,CAIEC,cAJF,CAKEC,aALF,CAME,kDACA,KAAKC,OAAL,CAAeJ,QAAf,CACA,KAAKD,SAAL,CAAiBA,SAAjB,CACA,KAAKE,YAAL,CAAoBA,YAApB,CACA,KAAKC,cAAL,CAAsBA,cAAtB,CACA,KAAKC,aAAL,CAAqBA,aAArB,CACD,C,wFAEsB,CACrB,MAAO,MAAKJ,SAAL,GAAmB,WAA1B,CACD,C,4DAGiBM,K,CAA2B,CAC3C,wBACEA,gBAAiBP,cADnB,CAEE,8DAFF,EAIA,wBACE,KAAKG,YAAL,CAAkBK,MAAlB,GAA6BD,MAAMJ,YAAN,CAAmBK,MADlD,CAEE,gDAFF,EAKA,GAAIC,sBAAuB,KAA3B,CACA,GAAIC,sBAAuB,KAA3B,CACA,GAAIC,OAAQ,KAAKR,YAAL,CAAkBK,MAA9B,CACA,IAAK,GAAII,GAAI,CAAb,CAAgBA,EAAID,KAApB,CAA2BC,GAA3B,CAAgC,CAC9B,GAAMC,OAAQ,KAAKV,YAAL,CAAkBS,CAAlB,CAAd,CACA,GAAME,UAAWP,MAAMJ,YAAN,CAAmBS,CAAnB,CAAjB,CAEA,wBACEC,MAAME,UAAN,GAAqBD,SAASC,UADhC,CAEE,sDAFF,EAKA,GAAIF,MAAMG,SAAN,CAAkBF,SAASE,SAA/B,CAA0C,CACxCN,qBAAuB,IAAvB,CACD,CAFD,IAEO,CACLD,qBAAuB,IAAvB,CACD,CACF,CAED,wBACE,CAACC,oBAAD,CAAuBD,oBAAvB,EAA6CQ,MAA7C,CAAoD,SAACC,CAAD,QAAOA,EAAP,EAApD,EAA8DV,MAA9D,GACE,CAFJ,CAGE,oEAHF,EAMA,MAAOC,sBAAuBF,KAAvB,CAA+B,IAAtC,CACD,C,yDAEyB,CACxB,MAAO,gCAAP,CACD,C,8CAEuB,CACtB,MAAO,CACL,gDAAwB,KAAKN,SAA7B,CADK,CAEL,KAAKE,YAFA,CAGL,KAAKC,cAHA,CAAP,CAKD,C,qDAEuB,CACtB,MAAO,MAAKC,aAAZ,CACD,C,6CAGYL,a","file":"RCTTouchEvent.js","sourcesContent":["/**\n * @providesModule RCTTouchEvent\n * @flow\n */\n\nimport type { RCTEvent } from \"RCTEventDispatcher\";\n\nimport invariant from \"Invariant\";\nimport RCTEventDispatcher, {\n  normalizeInputEventName\n} from \"RCTEventDispatcher\";\n\nclass RCTTouchEvent implements RCTEvent {\n  // interface properties\n  viewTag: number;\n  eventName: string;\n  coalescingKey: number;\n\n  // touch properties\n  reactTouches: Array<{ [string]: any }>;\n  changedIndexes: Array<number>;\n\n  constructor(\n    eventName: string,\n    reactTag: number,\n    reactTouches: Array<{ [string]: any }>,\n    changedIndexes: Array<number>,\n    coalescingKey: number\n  ) {\n    this.viewTag = reactTag;\n    this.eventName = eventName;\n    this.reactTouches = reactTouches;\n    this.changedIndexes = changedIndexes;\n    this.coalescingKey = coalescingKey;\n  }\n\n  canCoalesce(): boolean {\n    return this.eventName === \"touchMove\";\n  }\n\n  // We coalesce only move events, while holding some assumptions that seem reasonable but there are no explicit guarantees about them.\n  coalesceWithEvent(event: RCTEvent): RCTEvent {\n    invariant(\n      event instanceof RCTTouchEvent,\n      \"Touch event cannot be coalesced with any other type of event\"\n    );\n    invariant(\n      this.reactTouches.length !== event.reactTouches.length,\n      \"Touch events have different number of touches.\"\n    );\n\n    let newEventIsMoreRecent = false;\n    let oldEventIsMoreRecent = false;\n    let count = this.reactTouches.length;\n    for (let i = 0; i < count; i++) {\n      const touch = this.reactTouches[i];\n      const newTouch = event.reactTouches[i];\n\n      invariant(\n        touch.identifier !== newTouch.identifier,\n        \"Touch events doesn't have touches in the same order.\"\n      );\n\n      if (touch.timestamp > newTouch.timestamp) {\n        oldEventIsMoreRecent = true;\n      } else {\n        newEventIsMoreRecent = true;\n      }\n    }\n\n    invariant(\n      [oldEventIsMoreRecent, newEventIsMoreRecent].filter((e) => e).length ===\n        1,\n      \"Neither touch event is exclusively more recent than the other one.\"\n    );\n\n    return newEventIsMoreRecent ? event : this;\n  }\n\n  moduleDotMethod(): string {\n    return \"RCTEventEmitter.receiveTouches\";\n  }\n\n  arguments(): Array<any> {\n    return [\n      normalizeInputEventName(this.eventName),\n      this.reactTouches,\n      this.changedIndexes\n    ];\n  }\n\n  coalescingKey(): number {\n    return this.coalescingKey;\n  }\n}\n\nexport default RCTTouchEvent;\n"]}