var _toConsumableArray2=require("babel-runtime/helpers/toConsumableArray");var _toConsumableArray3=_interopRequireDefault(_toConsumableArray2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}ErrorUtils={setGlobalHandler:function setGlobalHandler(){},reportFatalError:console.error};function sendMessage(topic,payload){postMessage({topic:topic,payload:payload});}var Status=undefined;function loadBundle(bundle){return new Promise(function(resolve,reject){if(__DEV__){var xmlHttp=new XMLHttpRequest();xmlHttp.open("GET",bundle,true);xmlHttp.setRequestHeader("Accept","multipart/mixed");xmlHttp.onload=function(){importScripts(bundle);resolve();};xmlHttp.onerror=function(evt){reject(evt);};xmlHttp.onabort=function(evt){reject(evt);};xmlHttp.onprogress=function(evt){var progressEvents=xmlHttp.response.match(/\{[\S]*\}/g);if(progressEvents){var _JSON$parse=JSON.parse(progressEvents[progressEvents.length-1]),done=_JSON$parse.done,total=_JSON$parse.total;if(done&&total){sendMessage("updateProgress",{done:done,total:total});}}};xmlHttp.send();}else{importScripts(bundle);resolve();}});}function handleError(e){console.warn(e);var xmlhttp=new XMLHttpRequest();xmlhttp.open("GET",bundle,true);xmlhttp.onreadystatechange=function(){if(xmlhttp.readyState==4){var result=JSON.parse(xmlhttp.responseText);if(result){if(result.type==="UnableToResolveError"||result.type==="NotFoundError"){console.warn(result.message);}else{if(result.snippet){result.snippet=result.snippet.replace(/\u001b\[.*?m/g,"").split("\\n");}if(result.filename&&result.filename.indexOf(":")<=2){result.filename="file:///"+result.filename;}if(result.errors){for(var i=0;i<result.errors.length;i++){var error=result.errors[i];if(error.filename&&error.filename.indexOf(":")<=2){error.filename="file:///"+error.filename;}}}console.warn(JSON.stringify(result,undefined,2));}}}xmlhttp.send(null);};}onmessage=function onmessage(_ref){var data=_ref.data;var topic=data.topic,payload=data.payload;switch(topic){case"loadBridgeConfig":{var config=payload.config,_bundle=payload.bundle;__fbBatchedBridgeConfig=config;loadBundle(_bundle).then(function(){sendMessage("bundleFinishedLoading");}).catch(handleError);break;}case"callFunctionReturnFlushedQueue":{try{if(self.__fbBatchedBridge){var _fbBatchedBridge;var flushedQueue=(_fbBatchedBridge=__fbBatchedBridge).callFunctionReturnFlushedQueue.apply(_fbBatchedBridge,(0,_toConsumableArray3.default)(payload));sendMessage("flushedQueue",flushedQueue);}}catch(e){console.warn(e);console.warn("topic",topic);console.warn("payload",payload);}break;}case"invokeCallbackAndReturnFlushedQueue":{try{if(self.__fbBatchedBridge){var _fbBatchedBridge2;var _flushedQueue=(_fbBatchedBridge2=__fbBatchedBridge).invokeCallbackAndReturnFlushedQueue.apply(_fbBatchedBridge2,(0,_toConsumableArray3.default)(payload));sendMessage("flushedQueue",_flushedQueue);}}catch(e){console.warn(e);console.warn("topic",topic);console.warn("payload",payload);}break;}case"flush":{try{if(self.__fbBatchedBridge){var _flushedQueue2=__fbBatchedBridge.flushedQueue.apply(null);sendMessage("flushedQueue",_flushedQueue2);}}catch(e){console.warn(e);console.warn("topic",topic);console.warn("payload",payload);}break;}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,