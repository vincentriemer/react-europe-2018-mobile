{"version":3,"sources":["../../ReactDom/bridge/RCTBridge.worker.js"],"names":["sendMessage","topic","payload","postMessage","Status","undefined","self","_XMLHttpRequest","XMLHttpRequest","loadBundle","bundle","Promise","resolve","reject","__DEV__","xmlHttp","open","setRequestHeader","onload","importScripts","onerror","evt","onabort","onprogress","progressEvents","response","match","JSON","parse","length","done","total","send","handleError","e","console","warn","xmlhttp","onreadystatechange","readyState","result","responseText","type","message","snippet","replace","split","filename","indexOf","errors","i","error","stringify","onmessage","data","config","__fbBatchedBridgeConfig","then","catch","__fbBatchedBridge","flushedQueue","callFunctionReturnFlushedQueue","invokeCallbackAndReturnFlushedQueue","apply"],"mappings":"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","file":"RCTBridge.worker.js","sourcesContent":["function sendMessage(topic, payload) {\n  postMessage({ topic, payload });\n}\n\nvar Status = undefined;\n\n// store a reference to the original XMLHttpRequest before initializeCore is called\nself._XMLHttpRequest = XMLHttpRequest;\n\nfunction loadBundle(bundle) {\n  return new Promise(function(resolve, reject) {\n    if (__DEV__) {\n      var xmlHttp = new XMLHttpRequest();\n      xmlHttp.open(\"GET\", bundle, true);\n      xmlHttp.setRequestHeader(\"Accept\", \"multipart/mixed\");\n      xmlHttp.onload = function() {\n        importScripts(bundle);\n        resolve();\n      };\n      xmlHttp.onerror = function(evt) {\n        reject(evt);\n      };\n      xmlHttp.onabort = function(evt) {\n        reject(evt);\n      };\n      xmlHttp.onprogress = function(evt) {\n        const progressEvents = xmlHttp.response.match(/\\{[\\S]*\\}/g);\n        if (progressEvents) {\n          const { done, total } = JSON.parse(\n            progressEvents[progressEvents.length - 1]\n          );\n\n          if (done && total) {\n            sendMessage(\"updateProgress\", { done, total });\n          }\n        }\n      };\n      xmlHttp.send();\n    } else {\n      importScripts(bundle);\n      resolve();\n    }\n  });\n}\n\nfunction handleError(e) {\n  console.warn(e);\n  var xmlhttp = new XMLHttpRequest();\n  xmlhttp.open(\"GET\", bundle, true);\n  xmlhttp.onreadystatechange = function() {\n    if (xmlhttp.readyState == 4) {\n      var result = JSON.parse(xmlhttp.responseText);\n      if (result) {\n        if (\n          result.type === \"UnableToResolveError\" ||\n          result.type === \"NotFoundError\"\n        ) {\n          console.warn(result.message);\n        } else {\n          if (result.snippet) {\n            // remove all color characters and split the lines for improved clarity\n            result.snippet = result.snippet\n              .replace(/\\u001b\\[.*?m/g, \"\")\n              .split(\"\\\\n\");\n          }\n          if (result.filename && result.filename.indexOf(\":\") <= 2) {\n            result.filename = \"file:///\" + result.filename;\n          }\n          if (result.errors) {\n            for (var i = 0; i < result.errors.length; i++) {\n              var error = result.errors[i];\n              if (error.filename && error.filename.indexOf(\":\") <= 2) {\n                error.filename = \"file:///\" + error.filename;\n              }\n            }\n          }\n          console.warn(JSON.stringify(result, undefined, 2));\n        }\n      }\n    }\n    xmlhttp.send(null);\n  };\n}\n\nonmessage = ({ data }) => {\n  const { topic, payload } = data;\n  // console.log(\"Recieved message from main thread:\", topic, payload);\n\n  switch (topic) {\n    case \"loadBridgeConfig\": {\n      const { config, bundle } = payload;\n      __fbBatchedBridgeConfig = config;\n      loadBundle(bundle)\n        .then(function() {\n          sendMessage(\"bundleFinishedLoading\");\n        })\n        .catch(handleError);\n      break;\n    }\n    case \"callFunctionReturnFlushedQueue\": {\n      try {\n        if (self.__fbBatchedBridge) {\n          const flushedQueue = __fbBatchedBridge.callFunctionReturnFlushedQueue(\n            ...payload\n          );\n          sendMessage(\"flushedQueue\", flushedQueue);\n        }\n      } catch (e) {\n        console.warn(e);\n        console.warn(\"topic\", topic);\n        console.warn(\"payload\", payload);\n      }\n      break;\n    }\n    case \"invokeCallbackAndReturnFlushedQueue\": {\n      try {\n        if (self.__fbBatchedBridge) {\n          const flushedQueue = __fbBatchedBridge.invokeCallbackAndReturnFlushedQueue(\n            ...payload\n          );\n          sendMessage(\"flushedQueue\", flushedQueue);\n        }\n      } catch (e) {\n        console.warn(e);\n        console.warn(\"topic\", topic);\n        console.warn(\"payload\", payload);\n      }\n      break;\n    }\n    case \"flush\": {\n      try {\n        if (self.__fbBatchedBridge) {\n          const flushedQueue = __fbBatchedBridge.flushedQueue.apply(null);\n          sendMessage(\"flushedQueue\", flushedQueue);\n        }\n      } catch (e) {\n        console.warn(e);\n        console.warn(\"topic\", topic);\n        console.warn(\"payload\", payload);\n      }\n      break;\n    }\n  }\n};\n"]}