Object.defineProperty(exports,"__esModule",{value:true});exports.RCT_EXPORT_MODULE=exports.default=exports.RCTFunctionTypeSync=exports.RCTFunctionTypePromise=exports.RCTFunctionTypeNormal=undefined;var _extends2=require("babel-runtime/helpers/extends");var _extends3=_interopRequireDefault(_extends2);var _regenerator=require("babel-runtime/regenerator");var _regenerator2=_interopRequireDefault(_regenerator);var _classCallCheck2=require("babel-runtime/helpers/classCallCheck");var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require("babel-runtime/helpers/createClass");var _createClass3=_interopRequireDefault(_createClass2);var _slicedToArray2=require("babel-runtime/helpers/slicedToArray");var _slicedToArray3=_interopRequireDefault(_slicedToArray2);var _toConsumableArray2=require("babel-runtime/helpers/toConsumableArray");var _toConsumableArray3=_interopRequireDefault(_toConsumableArray2);var _class,_temp,_initialiseProps;exports.getPropertyNames=getPropertyNames;exports.bridgeModuleNameForClass=bridgeModuleNameForClass;exports.RCT_EXPORT_METHOD=RCT_EXPORT_METHOD;var _Invariant=require("./../utils/Invariant");var _Invariant2=_interopRequireDefault(_Invariant);var _yogaDom=require("yoga-dom");var YG=_interopRequireWildcard(_yogaDom);var _RCTModuleConfig=require("./RCTModuleConfig");var _NotificationCenter=require("./../base/NotificationCenter");var _NotificationCenter2=_interopRequireDefault(_NotificationCenter);var _RCTBridgeMethod=require("./RCTBridgeMethod");function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.RCTFunctionTypeNormal=_RCTBridgeMethod.RCTFunctionTypeNormal;exports.RCTFunctionTypePromise=_RCTBridgeMethod.RCTFunctionTypePromise;exports.RCTFunctionTypeSync=_RCTBridgeMethod.RCTFunctionTypeSync;var MODULE_IDS=0;var METHOD_IDS=1;var PARAMS=2;var DEVTOOLS_FLAG=/\bdevtools\b/;var HOTRELOAD_FLAG=/\bhotreload\b/;var WORKER_SRC="ErrorUtils = {\n  setGlobalHandler: () => {},\n  reportFatalError: console.error\n};\n\nfunction sendMessage(topic, payload) {\n  postMessage({ topic, payload });\n}\n\nvar Status = undefined;\n\nfunction loadBundle(bundle) {\n  return new Promise(function(resolve, reject) {\n    if (__DEV__) {\n      var xmlHttp = new XMLHttpRequest();\n      xmlHttp.open(\"GET\", bundle, true);\n      xmlHttp.setRequestHeader(\"Accept\", \"multipart/mixed\");\n      xmlHttp.onload = function() {\n        importScripts(bundle);\n        resolve();\n      };\n      xmlHttp.onerror = function(evt) {\n        reject(evt);\n      };\n      xmlHttp.onabort = function(evt) {\n        reject(evt);\n      };\n      xmlHttp.onprogress = function(evt) {\n        const progressEvents = xmlHttp.response.match(/\\{[\\S]*\\}/g);\n        if (progressEvents) {\n          const { done, total } = JSON.parse(\n            progressEvents[progressEvents.length - 1]\n          );\n\n          if (done && total) {\n            sendMessage(\"updateProgress\", { done, total });\n          }\n        }\n      };\n      xmlHttp.send();\n    } else {\n      importScripts(bundle);\n      resolve();\n    }\n  });\n}\n\nfunction handleError(e) {\n  console.warn(e);\n  var xmlhttp = new XMLHttpRequest();\n  xmlhttp.open(\"GET\", bundle, true);\n  xmlhttp.onreadystatechange = function() {\n    if (xmlhttp.readyState == 4) {\n      var result = JSON.parse(xmlhttp.responseText);\n      if (result) {\n        if (\n          result.type === \"UnableToResolveError\" ||\n          result.type === \"NotFoundError\"\n        ) {\n          console.warn(result.message);\n        } else {\n          if (result.snippet) {\n            // remove all color characters and split the lines for improved clarity\n            result.snippet = result.snippet\n              .replace(/\\u001b\\[.*?m/g, \"\")\n              .split(\"\\\\n\");\n          }\n          if (result.filename && result.filename.indexOf(\":\") <= 2) {\n            result.filename = \"file:///\" + result.filename;\n          }\n          if (result.errors) {\n            for (var i = 0; i < result.errors.length; i++) {\n              var error = result.errors[i];\n              if (error.filename && error.filename.indexOf(\":\") <= 2) {\n                error.filename = \"file:///\" + error.filename;\n              }\n            }\n          }\n          console.warn(JSON.stringify(result, undefined, 2));\n        }\n      }\n    }\n    xmlhttp.send(null);\n  };\n}\n\nonmessage = ({ data }) => {\n  const { topic, payload } = data;\n  // console.log(\"Recieved message from main thread:\", topic, payload);\n\n  switch (topic) {\n    case \"loadBridgeConfig\": {\n      const { config, bundle } = payload;\n      __fbBatchedBridgeConfig = config;\n      loadBundle(bundle)\n        .then(function() {\n          sendMessage(\"bundleFinishedLoading\");\n        })\n        .catch(handleError);\n      break;\n    }\n    case \"callFunctionReturnFlushedQueue\": {\n      try {\n        if (self.__fbBatchedBridge) {\n          const flushedQueue = __fbBatchedBridge.callFunctionReturnFlushedQueue(\n            ...payload\n          );\n          sendMessage(\"flushedQueue\", flushedQueue);\n        }\n      } catch (e) {\n        console.warn(e);\n        console.warn(\"topic\", topic);\n        console.warn(\"payload\", payload);\n      }\n      break;\n    }\n    case \"invokeCallbackAndReturnFlushedQueue\": {\n      try {\n        if (self.__fbBatchedBridge) {\n          const flushedQueue = __fbBatchedBridge.invokeCallbackAndReturnFlushedQueue(\n            ...payload\n          );\n          sendMessage(\"flushedQueue\", flushedQueue);\n        }\n      } catch (e) {\n        console.warn(e);\n        console.warn(\"topic\", topic);\n        console.warn(\"payload\", payload);\n      }\n      break;\n    }\n    case \"flush\": {\n      try {\n        if (self.__fbBatchedBridge) {\n          const flushedQueue = __fbBatchedBridge.flushedQueue.apply(null);\n          sendMessage(\"flushedQueue\", flushedQueue);\n        }\n      } catch (e) {\n        console.warn(e);\n        console.warn(\"topic\", topic);\n        console.warn(\"payload\", payload);\n      }\n      break;\n    }\n  }\n};\n";if(__DEV__){WORKER_SRC="__DEV__ = true;\n"+WORKER_SRC;if(DEVTOOLS_FLAG.test(location.search)){WORKER_SRC="__DEVTOOLS__ = true;\n"+WORKER_SRC;if(window.__REACT_DEVTOOLS_GLOBAL_HOOK__){console.log("We detected that you have the React Devtools extension installed. "+"Please note that at this time, React VR is only compatible with the "+"standalone React Native Inspector that ships with Nuclide.");}}}else{WORKER_SRC="__DEV__ = false;\n"+WORKER_SRC;}function getPropertyNames(obj){if(obj==null)return[];var currentPropertyNames=Object.getOwnPropertyNames(obj);return currentPropertyNames.concat(getPropertyNames(Object.getPrototypeOf(obj)));}function bridgeModuleNameForClass(cls){var name=cls.__moduleName;if(name!=null){if(name.startsWith("RK")){name=name.substring(2);}else if(name.startsWith("RCT")){name=name.substring(3);}return name;}return"";}function generateModuleConfig(name,bridgeModule){var methodNames=[].concat((0,_toConsumableArray3.default)(new Set(getPropertyNames(bridgeModule)))).filter(function(methodName){return methodName.startsWith("__rct_export__");});var constants=bridgeModule.constantsToExport?bridgeModule.constantsToExport():undefined;var allMethods=[];var promiseMethods=[];var syncMethods=[];methodNames.forEach(function(rctName){if(bridgeModule[rctName]){var _bridgeModule$rctName=bridgeModule[rctName].call(bridgeModule),_bridgeModule$rctName2=(0,_slicedToArray3.default)(_bridgeModule$rctName,2),methodName=_bridgeModule$rctName2[0],methodType=_bridgeModule$rctName2[1];allMethods.push(methodName);if(methodType===_RCTBridgeMethod.RCTFunctionTypePromise){promiseMethods.push(allMethods.length-1);}if(methodType===_RCTBridgeMethod.RCTFunctionTypeSync){syncMethods.push(allMethods.length-1);}}});return[name,constants,allMethods,promiseMethods,syncMethods];}var RCTBridge=(_temp=_class=function(){function RCTBridge(moduleName,bundle,nativeModules){(0,_classCallCheck3.default)(this,RCTBridge);_initialiseProps.call(this);this.loading=true;this.moduleName=moduleName;this.bundleLocation=bundle;this.nativeModules=nativeModules;var bridgeCodeBlob=new Blob([WORKER_SRC]);var worker=new Worker(URL.createObjectURL(bridgeCodeBlob));this.setThread(worker);}(0,_createClass3.default)(RCTBridge,[{key:"moduleForClass",value:function moduleForClass(cls){(0,_Invariant2.default)(cls.__moduleName,"Class does not seem to be exported");return this.modulesByName[bridgeModuleNameForClass(cls)];}},{key:"setThread",value:function setThread(thread){this.thread=thread;thread.onmessage=this.onMessage.bind(this);}},{key:"sendMessage",value:function sendMessage(topic,payload){if(this.thread){this.thread.postMessage({topic:topic,payload:payload});}}},{key:"callNativeModule",value:function callNativeModule(moduleId,methodId,params){var moduleConfig=this.moduleConfigs[moduleId];(0,_Invariant2.default)(moduleConfig,"No such module with id: "+moduleId);var _moduleConfig=(0,_slicedToArray3.default)(moduleConfig,3),name=_moduleConfig[0],functions=_moduleConfig[2];(0,_Invariant2.default)(functions,"Module "+name+" has no methods to call");var functionName=functions[methodId];(0,_Invariant2.default)(functionName,"No such function in module "+name+" with id "+methodId);var nativeModule=this.modulesByName[name];(0,_Invariant2.default)(nativeModule,"No such module with name "+name);(0,_Invariant2.default)(nativeModule[functionName],"No such method "+functionName+" on module "+name);nativeModule[functionName].apply(nativeModule,params);}},{key:"onMessage",value:function onMessage(message){var _message$data=message.data,topic=_message$data.topic,payload=_message$data.payload;switch(topic){case"bundleFinishedLoading":{this.loading=false;_NotificationCenter2.default.emitEvent("RCTJavaScriptDidLoadNotification");if(this.bundleFinishedLoading){this.bundleFinishedLoading();}break;}case"flushedQueue":{if(payload!=null&&Array.isArray(payload)){var _payload=(0,_slicedToArray3.default)(payload,3),moduleIds=_payload[0],methodIds=_payload[1],params=_payload[2];for(var i=0;i<moduleIds.length;i++){this.messages.push({moduleId:moduleIds[i],methodId:methodIds[i],args:params[i]});}}break;}case"updateProgress":{this.devLoadingView.updateProgress(payload);break;}default:{console.warn("Unknown topic: "+topic);}}if(this.shouldContinue()){this.uiManager.requestTick();}}},{key:"generateModuleConfig",value:function generateModuleConfig(name,bridgeModule){var methodNames=[].concat((0,_toConsumableArray3.default)(new Set(getPropertyNames(bridgeModule)))).filter(function(methodName){return methodName.startsWith("__rct_export__");});var constants=bridgeModule.constantsToExport?bridgeModule.constantsToExport():undefined;var allMethods=[];var promiseMethods=[];var syncMethods=[];methodNames.forEach(function(rctName){if(bridgeModule[rctName]){var _bridgeModule$rctName3=bridgeModule[rctName].call(bridgeModule),_bridgeModule$rctName4=(0,_slicedToArray3.default)(_bridgeModule$rctName3,2),methodName=_bridgeModule$rctName4[0],methodType=_bridgeModule$rctName4[1];allMethods.push(methodName);if(methodType===_RCTBridgeMethod.RCTFunctionTypePromise){promiseMethods.push(allMethods.length-1);}if(methodType===_RCTBridgeMethod.RCTFunctionTypeSync){syncMethods.push(allMethods.length-1);}}});this.moduleConfigs.push((0,_RCTModuleConfig.moduleConfigFactory)(name,constants,allMethods,promiseMethods,syncMethods));return[name,constants,allMethods,promiseMethods,syncMethods];}},{key:"loadBridgeConfig",value:function loadBridgeConfig(){var config=this.getInitialModuleConfig();this.sendMessage("loadBridgeConfig",{config:config,bundle:this.bundleLocation});}},{key:"enqueueJSCall",value:function enqueueJSCall(moduleName,methodName,args){this.sendMessage("callFunctionReturnFlushedQueue",[moduleName,methodName,args]);}},{key:"enqueueJSCallWithDotMethod",value:function enqueueJSCallWithDotMethod(moduleDotMethod,args){var _moduleDotMethod$spli=moduleDotMethod.split("."),_moduleDotMethod$spli2=(0,_slicedToArray3.default)(_moduleDotMethod$spli,2),module=_moduleDotMethod$spli2[0],method=_moduleDotMethod$spli2[1];this.enqueueJSCall(module,method,args);}},{key:"enqueueJSCallback",value:function enqueueJSCallback(id,args){this.sendMessage("invokeCallbackAndReturnFlushedQueue",[id,args]);}},{key:"callbackFromId",value:function callbackFromId(id){var _this=this;return function(){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this.enqueueJSCallback(id,args);};}},{key:"frame",value:function frame(){var _this2=this;var messages;return _regenerator2.default.async(function frame$(_context){while(1){switch(_context.prev=_context.next){case 0:this.sendMessage("flush");messages=[].concat((0,_toConsumableArray3.default)(this.messages));this.messages=[];messages.forEach(function(_ref){var moduleId=_ref.moduleId,methodId=_ref.methodId,args=_ref.args;_this2.callNativeModule(moduleId,methodId,args);});case 4:case"end":return _context.stop();}}},null,this);}},{key:"shouldContinue",value:function shouldContinue(){return this.messages.length!==0;}},{key:"uiManager",get:function get(){if(!this._uiManager){var uiManager=this.modulesByName["UIManager"];this._uiManager=uiManager;}return this._uiManager;}},{key:"devLoadingView",get:function get(){if(!this._devLoadingView){var devLoadingView=this.modulesByName["DevLoadingView"];this._devLoadingView=devLoadingView;}return this._devLoadingView;}},{key:"eventDispatcher",get:function get(){if(!this._eventDispatcher){var eventDispatcher=this.modulesByName["EventDispatcher"];this._eventDispatcher=eventDispatcher;}return this._eventDispatcher;}},{key:"imageLoader",get:function get(){if(!this._imageLoader){var imageLoader=this.modulesByName["ImageLoader"];this._imageLoader=imageLoader;}return this._imageLoader;}},{key:"deviceInfo",get:function get(){if(!this._deviceInfo){var deviceInfo=this.modulesByName["DeviceInfo"];this._deviceInfo=deviceInfo;}return this._deviceInfo;}},{key:"devSettings",get:function get(){if(!this._devSettings){var devSettings=this.modulesByName["DevSettings"];this._devSettings=devSettings;}return this._devSettings;}}]);return RCTBridge;}(),_initialiseProps=function _initialiseProps(){var _this3=this;this.modulesByName={};this.moduleClasses=[];this.moduleConfigs=[];this.messages=[];this.queue=[];this.executing=false;this.initializeModules=function _callee(){return _regenerator2.default.async(function _callee$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regenerator2.default.awrap(Promise.all(_this3.nativeModules));case 2:_this3.moduleClasses=_context2.sent;_this3.moduleClasses=_this3.moduleClasses.map(function(maybeModule){return maybeModule.__esModule?maybeModule.default:maybeModule;});_this3.moduleClasses.forEach(function(moduleClass){var module=new moduleClass(_this3);var moduleName=bridgeModuleNameForClass(moduleClass);_this3.modulesByName[moduleName]=module;});case 5:case"end":return _context2.stop();}}},null,_this3);};this.getInitialModuleConfig=function(){var remoteModuleConfig=Object.keys(_this3.modulesByName).map(function(moduleName){var bridgeModule=_this3.modulesByName[moduleName];return _this3.generateModuleConfig(moduleName,bridgeModule);});return{remoteModuleConfig:remoteModuleConfig};};},_temp);exports.default=RCTBridge;function RCT_EXPORT_METHOD(type){return function(target,key,descriptor){if(typeof descriptor.value==="function"){Object.defineProperty(target,"__rct_export__"+key,(0,_extends3.default)({},descriptor,{value:function value(){return[key,type];}}));}return descriptor;};}var RCT_EXPORT_MODULE=exports.RCT_EXPORT_MODULE=function RCT_EXPORT_MODULE(name){return function(target){target.__moduleName=name;};};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,